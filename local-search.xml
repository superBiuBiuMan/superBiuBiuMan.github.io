<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>移动端适配vue小练习</title>
    <link href="/2022/05/24/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8Dvue%E5%B0%8F%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/05/24/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8Dvue%E5%B0%8F%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="移动端Vue适配小练习"><a href="#移动端Vue适配小练习" class="headerlink" title="移动端Vue适配小练习"></a>移动端Vue适配小练习</h2><ul><li>为了练习,就没有使用自动转换rem的功能,想了解的可以看看这几位博主的<ul><li><a href="https://www.jianshu.com/p/67a29794b98b">博主1</a></li><li><a href="https://blog.csdn.net/weixin_35773751/article/details/120894238">博主2</a></li></ul></li><li>想看源码的可以到github或者gitee上下载(后台也打包好了)<ul><li><a href="https://github.com/superBiuBiuMan/vue_mobile_littel_demo">github地址</a></li><li><a href="https://gitee.com/superBiuBiu/vue_mobile_littel_demo">gitee地址</a></li></ul></li></ul><h3 id="项目遇到的问题记录"><a href="#项目遇到的问题记录" class="headerlink" title="项目遇到的问题记录"></a>项目遇到的问题记录</h3><h4 id="Navigation-aborted-from-“-x2F-center“-to-“-x2F-login“-via-a-navigation-guard"><a href="#Navigation-aborted-from-“-x2F-center“-to-“-x2F-login“-via-a-navigation-guard" class="headerlink" title="Navigation aborted from “&#x2F;center“ to “&#x2F;login“ via a navigation guard"></a>Navigation aborted from “&#x2F;center“ to “&#x2F;login“ via a navigation guard</h4><p><strong>解决方法:</strong></p><p>vue_project\src\router\index.js 路由主入口文件当中添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> originalPush = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span><br><span class="hljs-comment">//解决重复提交相同链接报错</span><br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">location, onResolve, onReject</span>) &#123;<br>    <span class="hljs-keyword">if</span> (onResolve || onReject)<br>        <span class="hljs-keyword">return</span> originalPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, onResolve, onReject)<br>    <span class="hljs-keyword">return</span> originalPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">isNavigationFailure</span>(err)) &#123;<br>            <span class="hljs-comment">// resolve err</span><br>            <span class="hljs-keyword">return</span> err<br>        &#125;<br>        <span class="hljs-comment">// rethrow error</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> originalReplace = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">replace</span><br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">replace</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">replace</span>(<span class="hljs-params">location, onResolve, onReject</span>) &#123;<br>    <span class="hljs-keyword">if</span> (onResolve || onReject)&#123;<br>        <span class="hljs-comment">//回调函数里面会用到this的指向,所以就要使用call</span><br>        <span class="hljs-keyword">return</span> originalReplace.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, onResolve, onReject)<br>    &#125;<br>    <span class="hljs-keyword">return</span> originalReplace.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">isNavigationFailure</span>(err)) &#123;<br>            <span class="hljs-comment">//如果为相同链接引发的错误,返回错误原因,promise状态为resolve</span><br>            <span class="hljs-comment">// resolve err</span><br>            <span class="hljs-keyword">return</span> err<br>        &#125;<br>        <span class="hljs-comment">// rethrow error</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置代理问题"><a href="#配置代理问题" class="headerlink" title="配置代理问题"></a>配置代理问题</h4><p>由于视频的是react,所以配置代理花了一点时间</p><p>在<code>vue.config.js</code>当中,主要是proxy的配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; defineConfig &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@vue/cli-service&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">lintOnSave</span>:<span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">transpileDependencies</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">devServer</span>:&#123;<br>    <span class="hljs-attr">proxy</span>:&#123;<br>      <span class="hljs-string">&quot;/dev&quot;</span>:&#123;<br>        <span class="hljs-comment">//转发</span><br>        <span class="hljs-attr">target</span>:<span class="hljs-string">&quot;http://localhost:5000&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">//重写,删除/dev前缀</span><br>        <span class="hljs-attr">pathRewrite</span>:&#123;<br>          <span class="hljs-string">&quot;^/dev&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>注意:这样子写的话所有api请求都需要戴上&#x2F;dev前缀了,所以一般都是对axios进行二次封装,下面是我的二次封装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;axios&quot;</span>;<br><span class="hljs-keyword">import</span> nprogress <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;nprogress&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;nprogress/nprogress.css&quot;</span><br><br><span class="hljs-comment">//创建一个axios的实例化对象</span><br><span class="hljs-comment">//传入配置对象</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-comment">//每一个ajax请求都添加/dev前缀</span><br>    <span class="hljs-comment">//比如http://localhost:8080/dev/login</span><br>    <span class="hljs-comment">//http://localhost:8080/dev/home</span><br>    <span class="hljs-attr">baseURL</span>:<span class="hljs-string">&quot;/dev&quot;</span>,<br>    <span class="hljs-comment">//请求超时时间</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">2000</span><br>&#125;);<br><span class="hljs-comment">//请求拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//进度显示(当然,nprogress是假进度条)</span><br>    nprogress.<span class="hljs-title function_">start</span>();<br>    <span class="hljs-keyword">return</span> config;<br>&#125;)<br><br><span class="hljs-comment">//响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>    nprogress.<span class="hljs-title function_">done</span>();<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span> || response;<br>&#125;, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>    nprogress.<span class="hljs-title function_">done</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未知错误!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">() =&gt;</span> &#123;&#125;);<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></td></tr></table></figure><h3 id="OAuth认证"><a href="#OAuth认证" class="headerlink" title="OAuth认证"></a>OAuth认证</h3><h4 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h4><ul><li>OAuth 2.0 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</li><li>简单说，OAuth 就是一种授权机制。数据的所有者同意其他应用使用自己存储的用户信息。</li></ul><h4 id="授权流程（以GitHub为例）"><a href="#授权流程（以GitHub为例）" class="headerlink" title="授权流程（以GitHub为例）"></a>授权流程（以GitHub为例）</h4><ul><li><p><a href="https://docs.github.com/cn/developers/apps/building-oauth-apps/creating-an-oauth-app">GitHub官方文档</a></p></li><li><p>开发流程介绍</p><ul><li>从A 网站跳转到 GitHub授权页面。</li><li>GitHub 要求校验用户信息，引导用户登录。</li><li>GitHub 询问”A 网站要求获得你的xx数据，你是否同意？”</li><li>用户同意，GitHub 就会重定向到A网站对应的服务器，同时发回一个授权码。</li><li>A网站服务器使用授权码，向 GitHub 请求令牌。</li><li>GitHub 返回令牌token. A网站服务器使用令牌，向 GitHub 请求用户数据。</li></ul></li><li><p>应用登记</p><ul><li>一个应用要 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</li></ul></li></ul><h4 id="使用GitHub授权"><a href="#使用GitHub授权" class="headerlink" title="使用GitHub授权"></a>使用GitHub授权</h4><h5 id="1-GitHub登记应用"><a href="#1-GitHub登记应用" class="headerlink" title="1.GitHub登记应用"></a>1.GitHub登记应用</h5><p>登记地址：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242000531.png" alt="登记"></p><h5 id="2-获得client-id"><a href="#2-获得client-id" class="headerlink" title="2.获得client_id"></a>2.获得client_id</h5><p>查看地址：<a href="https://github.com/settings/developers">https://github.com/settings/developers</a></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242001147.png" alt="client_id"></p><h5 id="3-获得Client-secrets"><a href="#3-获得Client-secrets" class="headerlink" title="3.获得Client secrets"></a>3.获得Client secrets</h5><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242001499.png" alt="获得Client secrets"></p><h5 id="4-配置"><a href="#4-配置" class="headerlink" title="4.配置"></a>4.配置</h5><p>4.1 前台项目准备好个人中心组件,供授权成功后查看</p><p>4.2 将得到的 client_id 、clinet_secret配置到服务器config\index.js中，随后重启服务器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// github oauth</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CLIENT_ID</span> = <span class="hljs-string">&quot;xxxxxxxxxxxxxxx&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CLIENT_SECRET</span> = <span class="hljs-string">&quot;xxxxxxxxxxxxxxx&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242003636.png" alt="如图,server配置"></p><p>4.3 配置前端请求地址,这里就不写了</p><p>4.4 项目中携带网站标识跳转到授权页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">loginGithub = <span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-variable constant_">AUTH_BASE_URL</span>+<span class="hljs-string">&#x27;?client_id=&#x27;</span>+<span class="hljs-variable constant_">CLIENT_ID</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h3><h4 id="1-电脑安装好MongoDB后启动"><a href="#1-电脑安装好MongoDB后启动" class="headerlink" title="1.电脑安装好MongoDB后启动"></a>1.电脑安装好MongoDB后启动</h4><h4 id="2-server路径下cmd打开-输入npm-start"><a href="#2-server路径下cmd打开-输入npm-start" class="headerlink" title="2.server路径下cmd打开,输入npm start"></a>2.server路径下cmd打开,输入npm start</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242006013.png" alt="server启动"></p><h4 id="3-项目启动-项目路径下cmd打开-输入npm-run-serve后浏览器进入"><a href="#3-项目启动-项目路径下cmd打开-输入npm-run-serve后浏览器进入" class="headerlink" title="3.项目启动 ,项目路径下cmd打开,输入npm run serve后浏览器进入~"></a>3.项目启动 ,项目路径下cmd打开,输入npm run serve后浏览器进入~</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205242007443.png"></p><h3 id="项目的展示"><a href="#项目的展示" class="headerlink" title="项目的展示"></a>项目的展示</h3><p><strong>主页登录</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205241945498.png" alt="主页登录"></p><p><strong>获取验证码</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205241945065.png" alt="获取验证码"></p><p><strong>个人中心</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205241946993.png" alt="个人中心"></p><p><strong>github关联</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205241946226.png" alt="github关联"></p><p>关联后</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205241947552.png" alt="关联后"></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动端前端的适配和rem,vm其他的一些的复习</title>
    <link href="/2022/05/23/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D%E5%92%8Crem,vm%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/05/23/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%89%8D%E7%AB%AF%E7%9A%84%E9%80%82%E9%85%8D%E5%92%8Crem,vm%E5%85%B6%E4%BB%96%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><p><strong>注意:</strong></p><p>屏幕分辨率是一个固定的值,屏幕生产出来就确定了,无法修改!</p><p>我们在电脑所设置的,都是<strong>显示分辨率</strong>! 显示分辨率和屏幕分辨率是二个概念!</p><h3 id="屏幕密度"><a href="#屏幕密度" class="headerlink" title="屏幕密度"></a>屏幕密度</h3><p>每英寸里包含的物理像素点的个数,单位是PPI(pixels per inch),还有另外一个是dpi(dots per inch) ,dpi是衡量打印机的,ppi是衡量屏幕的</p><p>计算公式:</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221920760.png" alt="计算公式"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221921231.png" alt="就是一个勾股定理"></p><h3 id="像素相关"><a href="#像素相关" class="headerlink" title="像素相关"></a>像素相关</h3><ul><li><p>物理像素</p><ul><li>又称：设备像素，物理像素是一个长度单位，单位是px，1个物理像素就是屏幕上的一个物理成像点，就是屏幕中一个微小的发光物理元器件（可简单理解为超级微小的灯泡），是屏幕能显示的最小粒度。<span style="color:red">它由屏幕制造商决定，屏幕生产后无法修改。</span>例如 iPhone 6 的横向上拥有的物理像素为750、纵向上拥有的物理像素为1334 ，我们也可以用：750* 1334表示。</li></ul></li><li><p>css像素</p><ul><li><p>又称： 逻辑像素，css像素是一个抽象的长度单位，单位也是px，它是为 Web 开发者创造的，用来精确的度量Web 页面上的内容大小。我们在编写css、js、less中所使用的都是css像素（可以理解为：“程序员像素”）；</p><p>思考：我代码中所写的1px（css像素），到了屏幕上到底对应几个物理像素呢？是1个css像素就对应1个物理像素(“发光的灯泡”)吗？要探讨这个对应关系，就要学习接下来的新概念：设备独立像素。</p></li></ul></li><li><p>设备独立像素</p><ul><li>程序员写了：width &#x3D; 2px，height &#x3D; 2px 的盒子，若1个css像素直接对应1个物理像素，由于iPhone3G&#x2F;S 与iPhone4屏幕尺寸相同，但iPhone4的屏幕能容纳下更多的物理像素点，所以iPhone4的物理像素点比iPhone3G&#x2F;S小很多，那么理论上这个盒子在iPhone4屏幕上也就会比iPhone3G&#x2F;S屏幕上小很多，而事实是iPhone3G&#x2F;S 和 iPhone4下这个盒子是一样大的！！！，只不过 iPhone4更加细腻、清晰。如何做到的呢？这就要靠设备独立像素。</li><li><span style="color:#ee0b41">设备独立像素的出现，使得即使在【<strong>高清屏</strong>】下，（例如苹果的Retina屏），也可以让元素有正常的尺寸，让代码不受到设备的影响，它是设备厂商根据屏幕特性设置的，无法更改。</span></li></ul></li></ul><p><strong>设备独立像素与物理像素的关系</strong></p><ul><li>普通屏幕下1个设备独立像素对应1个物理像素(1:1关系)</li><li>高清屏幕下1个设备独立像素对应N个物理像素(1:n关系)</li></ul><p><strong>设备独立像素与css像素关系</strong></p><ul><li>在无缩放的情况下(标准情况): <strong>1css像素 &#x3D; 1设备独立像素</strong></li></ul><p><strong>像素比</strong></p><p>像素比(dpr):单一方向上设备的<strong>物理像素</strong>和设备独立像素的比例</p><p>即dpr &#x3D; 物理像素 &#x2F; 设备独立像素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">js获取当前屏幕像素比<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">devicePixelRadio</span><br></code></pre></td></tr></table></figure><p>几款手机的屏幕像素参数，<a href="https://uiiiuiii.com/screen/">点击这里查看更多</a></p><table><thead><tr><th align="center">型号</th><th align="center">分辨率（物理像素点总和）</th><th align="center">设备独立像素(dip或dp)</th><th align="center">像素比(dpr)</th></tr></thead><tbody><tr><td align="center">IPhone 3GS</td><td align="center">320 * 480</td><td align="center">320 * 480</td><td align="center">1</td></tr><tr><td align="center">IPhone 4 &#x2F; 4s</td><td align="center">640 * 960</td><td align="center">320 * 480</td><td align="center">2</td></tr><tr><td align="center">IPhone 5 &#x2F; 5s</td><td align="center">640 * 1136</td><td align="center">320 * 568</td><td align="center">2</td></tr><tr><td align="center"><span style='color:red'><strong>IPhone 6 &#x2F; 7 &#x2F; 8</strong></span></td><td align="center"><strong><span style='color:red'>750 * 1334</span></strong></td><td align="center"><strong><span style='color:red'>375 * 667</span></strong></td><td align="center">2</td></tr><tr><td align="center">IPhone 6p &#x2F; 7p &#x2F; 8p</td><td align="center">1242 x 2208</td><td align="center">414 * 736</td><td align="center">3</td></tr><tr><td align="center">IPhone X</td><td align="center">1125 * 2436</td><td align="center">375 * 812</td><td align="center">3</td></tr><tr><td align="center">HUAWEI P10</td><td align="center">1080 x 1920</td><td align="center">360 x 640</td><td align="center">3</td></tr></tbody></table><h3 id="图形的高清显示"><a href="#图形的高清显示" class="headerlink" title="图形的高清显示"></a>图形的高清显示</h3><p>概念:</p><p>由于css像素和像素比(dpr)的存在,可能会导致图片在不同(像素比)下显示模糊之类的</p><ul><li>比如说一个<strong>图片设置css像素为200px * 200px</strong>那么在<strong>dpr为1</strong>的情况下<strong>占据屏幕分辨率为200px * 200px</strong>(物理像素) <ul><li>刚刚好一个css像素对应一个屏幕的分辨率</li></ul></li><li>如果在<strong>dpr为2</strong>的情况下,占据的屏幕分辨率就是400px * 400px(物理像素)<ul><li>就会导致一个css像素占据了二个物理像素,所以屏幕要怎么处理?肯定是平均下这一个css像素的颜色,使其分散在2个格子上面,不然另外一个格子没有内容啊(没有填充内容肯定不行啊!所以肯定要平均下!)所以这就导致了图片的模糊</li></ul></li><li>解决办法很简单,就是将图片的像素提示,<strong>dpr为2的使用2x图,dpr为3的使用3x图等等</strong></li></ul><p>结合<code>-webkit-min-device-pixel-ratio</code>和<code>media</code>媒体查询来使用替换图片<strong>多用于品牌LOGO</strong></p><p>示例:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>    &lt;style&gt;<br>        #one &#123;<br>            width: 200px;<br>            height: 200px;<br>        &#125;<br><br>        /* 媒体查询 */<br>        @media screen and (-webkit-min-device-pixel-ratio:2) &#123;<br><br>            /* dpr最小值为2,也就是&gt;=2的时候,使用2x图 */<br>            #one &#123;<br>                content: url(&quot;img/logo@2x.png&quot;)<br>            &#125;<br>        &#125;<br><br>        @media screen and (-webkit-min-device-pixel-ratio:3) &#123;<br>            #one &#123;<br>                content: url(&quot;img/logo@3x.png&quot;)<br>            &#125;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;img id=&quot;one&quot; src=&quot;./img/logo.png&quot; alt=&quot;&quot;&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205222116547.png" alt="随着dpr的改变,图片也会被替换,可以明显感觉到图片越来越清晰"></p><h3 id="视口相关"><a href="#视口相关" class="headerlink" title="视口相关"></a>视口相关</h3><h4 id="pc端视口"><a href="#pc端视口" class="headerlink" title="pc端视口"></a>pc端视口</h4><p>   在pc端，视口的默认宽度和浏览器窗口的宽度一致。在 css 标准文档中，pc端视口也被称为：初始包含块，它是所有 css 百分比宽度推算的根源，在pc端可通过如下几种方式获取宽度：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最干净的显示区域&#x27;</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>);<span class="hljs-comment">//常用</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最干净的显示区域+滚动条&#x27;</span>,<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;最干净的显示区域+滚动条+浏览器边框&#x27;</span>,<span class="hljs-variable language_">window</span>.<span class="hljs-property">outerWidth</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;与浏览器无关，当前设备显示分辨率横向的值&#x27;</span>,screen.<span class="hljs-property">width</span>);<br></code></pre></td></tr></table></figure><h4 id="移动端视口"><a href="#移动端视口" class="headerlink" title="移动端视口"></a>移动端视口</h4><p>​在移动端,浏览器厂商面临着一个比较大的问题,他们如何将数以万计甚至可以说是数以亿计的pc端网页完整的呈现在移动端设备上，并且不会出现横向滚动条呢？那就要引出移动端的三个概念：<strong>1.布局视口、2.视觉视口、3. 理想视口</strong></p><h5 id="1-布局视口"><a href="#1-布局视口" class="headerlink" title="1.布局视口"></a>1.布局视口</h5><p>​早期的时候我们这样做：pc端网页宽度一般都为：960px ~ 1024px 这个范围，就算超出了该范围，960px ~ 1024px这个区域也依然是版心的位置，浏览器厂商针对移动端设备设计了一个容器，先用这个容器去承装pc端的网页，这容器的宽度一般是**<span style='color:red'>980px</span><strong>，不同的设备可能有所差异，但相差并不大；随后将这个容器</strong>等比例压缩**到与手机等宽，这样就可以保证没有滚动条且能完整呈现页面，但是这样做依然有问题：网页内容被压缩的太小，严重影响用户体验。</p><p>移动端获取布局视口方式：<code>document.documentElement.clientWidth </code> (一般布局视口为980px)</p><ul><li>说简单就是早期我们手机显示pc端的网页是将pc端的网页等比压缩成为手机端的980px,然后将这个980px渲染到手机端<ul><li>实际上是对网页进行了整体的缩小</li><li>例如200宽的盒子占据了980份的200份200&#x2F;980</li><li><strong>若缩小后文字的小于12px,线条小于1px,将被分别显示为12px和1px</strong></li></ul></li></ul><p><strong>见下图，在物理分辨率是750px上面显示pc端的内容,会将内容等比压缩</strong></p><ul><li>图片中<strong>98px* 98px</strong>的绿色方框实际显示为75px*75px</li><li>13px和12px的文字显示为12px,16px文字进行了相应的缩小;1px的线条还是显示为1px</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205222226047.png" alt="图"></p><ul><li>所以为什么我们在不设置meta的参数的情况下想要将容器占满手机端,我们就需要设置width为980px才可以占满</li></ul><p>所以为了让所有的网站显示正常,各移动浏览器厂商统一将设备默认<strong>布局视口</strong>设置为 980px。</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205222131784.png"></p><p>比如在宽 375px 的 iphone6 上显示一个宽为 980px 的页面，大多数浏览器为了让页面显示全而缩小页面。</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205222132605.png"></p><p>我们可以使用<code>meta viewport</code>让浏览器<strong>布局视区</strong>等于屏幕宽度也就是375px，这样显示出来就是理想效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205222132427.png"></p><h5 id="2-视觉视口"><a href="#2-视觉视口" class="headerlink" title="2.视觉视口"></a>2.视觉视口</h5><p>​<strong>视觉视口就是用户可见的区域</strong>，它的绝对宽度永远和设备屏幕一样宽，但是这个宽度里所包含的css像素值是变化的，例如：一般手机会将980个css像素放入视觉视口中，而ipad Pro会将1024个css像素放入视觉视口中。</p><p>​移动端获取视觉视口方式：<code>window.innerWidth</code>，不过在Android2、Opera mini 、UC8 中无法正确获取。（一般不通过代码看视觉视口）</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205230821772.png"></p><h5 id="理想视口标准"><a href="#理想视口标准" class="headerlink" title="理想视口标准"></a>理想视口标准</h5><p>与<strong>屏幕（设备独立像素）等宽的布局视口</strong>，称之为理想视口，所以也可以说理想视口是一种标准：让布局视口宽度 与 屏幕等宽（设备独立像素），靠meta标签实现。</p><p>理想视口的特点：</p><blockquote><ul><li>布局视口和屏幕等宽，以iPhone6为例，符合理想视口标准之后：设备独立像素：375px，<strong>布局视口宽度：375px。</strong></li><li>用户不需要缩放、滚动就能看到网站的全部内容。</li><li>要为移动端设备单独设计一个移动端网站。</li></ul></blockquote><p>设置理想视口的具体方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结</strong></p><p>不写<code>meta</code>标签（不符合理想视口标准）：</p><blockquote><ol><li>描述屏幕：物理像素：750px 、设备独立像素：375px、css像素：980px。</li><li>优点：元素在不同设备上，呈现效果几乎一样，因都是通过布局容器等比缩放的，例如200宽的盒子：200&#x2F;980(占据了980份的200份)</li><li>缺点：元素太小，页面文字不清楚，用户体验不好。</li></ol></blockquote><p>写<code>meta</code>标签（符合理想视口标准）：</p><blockquote><ol><li><p>描述屏幕：物理像素：750px 、设备独立像素：375px、<span style='color:red'>css像素：375px</span>。</p></li><li><p>优点：</p><ol><li><p>页面清晰展现，内容不再小到难以观察，用户体验较好。</p></li><li><p>更清晰的像素关系：布局视口 &#x3D; 视觉视口 &#x3D; 设备独立像素 &#x3D; 375px。</p></li><li><p>更清晰的dpr，即dpr &#x3D; 物理像素&#x2F;设备独立像素  &#x3D;  物理像素&#x2F;css像素。</p><p>例如：dpr&#x3D;2的设备，1 * 1 css像素  &#x3D;  1 * 1 设备独立像素 &#x3D; 2 * 2 物理像素</p></li></ol></li><li><p>缺点：同一个元素，在不同屏幕（设备）上，呈现效果不一样，例如375宽的盒子： 375&#x2F;375 和 375&#x2F;414 (不是等比显示)</p></li><li><p>解决缺点：做适配。</p></li></ol></blockquote><h3 id="缩放和放大"><a href="#缩放和放大" class="headerlink" title="缩放和放大"></a>缩放和放大</h3><h4 id="PC端的"><a href="#PC端的" class="headerlink" title="PC端的"></a>PC端的</h4><p>放大的时候</p><ul><li>视口变小(可以理解为在聚焦,所以视口变小了)</li><li>元素的css像素值不变,但是一个css像素所占面积变大了</li></ul><p>缩小的时候</p><ul><li>视口变大</li><li>元素的css像素值不变,但一个css像素值所占的面积变小了</li></ul><h4 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h4><p>放大的时候</p><ul><li>布局视口不变</li><li>视觉视口变小(视觉视口就是用户可见的区域)</li></ul><p>缩小的时候</p><ul><li>布局视口不变</li><li>视觉视口变大(视觉视口就是用户可见的区域)</li></ul><p><span style="color:#ee0b41">注意：移动端缩放不会影响页面布局，因为缩放的时候，布局视口视口没有变化，简记：移动端的缩放没有改变布局视口的任何东西！</span></p><p>说简单点就是因为移动端并不改变布局视口,而pc端会改变布局视口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">移动端或者布局视口和获取pc端视口<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span><br><br>移动端获取视觉视口<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span><br></code></pre></td></tr></table></figure><h4 id="总结缩放放大"><a href="#总结缩放放大" class="headerlink" title="总结缩放放大"></a>总结缩放放大</h4><p><strong>pc端页面的缩放和放大视口的变化情况</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231558268.gif" alt="pc端页面的缩放和放大视口的变化情况"></p><p>手机端的不好录,具体你们可以自己体验下~</p><h3 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h3><p>meta-viewport 标签是苹果公司在 2007 年引进的，用于移动端布局视口的控制。</p><p>使用示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>viewport 相关选项</p><ol><li>width  布局视口的宽度</li><li>initial-scale  【系统】初始缩放比例</li><li>maximum-scale 允许【用户】缩放的最大比例</li><li>minimum-scale  允许【用户】缩放的最小比例</li><li>user-scalable  是否允许用户缩放</li><li>viewport-fit 设置为cover值可以解决刘海屏的留白问题</li></ol><h4 id="1-width"><a href="#1-width" class="headerlink" title="1.width"></a>1.width</h4><p><span style="color:#ee0b41">width值可以是设备宽度标识 device-width，也可以是具体值，但有些安卓手机是不支持具体值，IOS全系列都支持。</span></p><h4 id="2-initial-scale"><a href="#2-initial-scale" class="headerlink" title="2.initial-scale"></a>2.initial-scale</h4><ol><li><p>initial-scale 为页面初始化时的显示比例。  </p></li><li><p>initial-scale &#x3D; 屏幕宽度(设备独立像素)  &#x2F;  布局视口宽度。</p><ol><li>但是设备独立像素是固定的,并且initial-scale也被修改为了一个固定值,所以可以变化的,就是布局视口宽度了~</li></ol></li><li><p>只写initial-scale &#x3D; 1.0 也可以实现完美视口，但为了良好的兼容性，width&#x3D;device-width, initial-scale&#x3D;1.0一般一起写。</p></li></ol><h4 id="3-maximum-scale"><a href="#3-maximum-scale" class="headerlink" title="3.maximum-scale"></a>3.maximum-scale</h4><ol><li><p>设置允许用户最大缩放比例，<strong>苹果浏览器 safari 不认识该属性</strong></p></li><li><p>maximum-scale &#x3D; 屏幕宽度(设备独立像素) &#x2F; 视觉视口宽度值</p></li></ol><h4 id="4-minimum-scale"><a href="#4-minimum-scale" class="headerlink" title="4.minimum-scale"></a>4.minimum-scale</h4><ol><li><p>设置允许用户最小缩放比例。</p></li><li><p>minimum-scale &#x3D; 屏幕宽度(设备独立像素) &#x2F; 视觉视口宽度值</p></li></ol><h4 id="5-user-scalable"><a href="#5-user-scalable" class="headerlink" title="5.user-scalable"></a>5.user-scalable</h4><p>​是否允许用户通过手指缩放页面。<strong>苹果浏览器 safari 不认识该属性</strong></p><h4 id="6-viewport-fit"><a href="#6-viewport-fit" class="headerlink" title="6.viewport-fit"></a>6.viewport-fit</h4><p>设置为 cover 可以解决『刘海屏』的留白问题</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231604789.jpg" alt="解决『刘海屏』的留白问题"></p><h3 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h3><h4 id="1-viewport适配"><a href="#1-viewport适配" class="headerlink" title="1.viewport适配"></a>1.viewport适配</h4><ul><li>方法：拿到设计稿之后，设置布局视口宽度为设计稿宽度，然后直接按照设计稿给宽高进行布局即可。</li><li>优点：不用复杂的计算，直接使用图稿上标注的px值</li><li>缺点：<ul><li><strong>不能使用完整的meta标签，会导致在某些安卓手机上有兼容性问题。</strong></li><li>不希望适配的东西，例如边框，也强制参与了适配</li><li>图片会失真</li></ul></li></ul><p>相当于设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=&quot;</span>设计稿要求的宽度&quot; /&gt;</span><br>//比如设计稿是在375px下设计的,那么就将width=&quot;375&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=&quot;</span><span class="hljs-attr">375</span>&quot; /&gt;</span><br>                                    <br></code></pre></td></tr></table></figure><h4 id="2-rem适配"><a href="#2-rem适配" class="headerlink" title="2.rem适配"></a>2.rem适配</h4><h5 id="em和rem"><a href="#em和rem" class="headerlink" title="em和rem"></a>em和rem</h5><p>em 和 rem 都是 css 中的长度单位。而且两个都是相对长度单位，不过两个有点区别</p><ul><li>em 相对的是<strong>父级元素</strong>的字体大小</li><li>rem 相对的是<strong>根元素</strong>的字体大小<ul><li>比如html,body</li></ul></li></ul><p>rem适配的原理：编写样式时统一使用rem为单位，在不同设备上动态调整根字体大小</p><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>淘宝、百度的移动端页面用的此方案</p><ol><li>设置完美视口</li><li><span style="color:#ee0b41">通过js设置根字体大小 &#x3D; **( 当前设备横向独立像素值 <em>100) &#x2F; 设计稿宽度</em>*</span></li><li><span style="color:#ee0b41">编写样式时，直接以rem为单位，值为：<strong>设计值 &#x2F; 100</strong> </span></li><li>增加 JS 代码进行实时适配</li></ol><p>优势：编写样式时直接挪动小数点即可。</p><p><strong>例子:</strong></p><p>比如有一个设计稿是,可以看到是在iponhe6(**设备独立像素宽度为375px)**的条件下设计的</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231706200.png" alt="设计稿"></p><p>那么如果我们需要使得这张设计稿设计的<code>345px</code> * <code>150px</code>的div容器在iPhone6-plus上(设备独立像素宽度为414px)显示正常要怎么做呢?(肯定是按照比例缩放对吧) </p><p>经过人们发现,就会发现<strong>设备物理像素宽度大小和根字体的大小会成比例(当然你也可以参照别的,这里用根字体是因为有一个单位rem直接参照了根元素)</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231717364.png"></p><p>发现的比例关系就是这样(当然,字体大小可以随意设置,都取100只是为了方便计算!)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231715409.png" alt="image-20220523171544365"></p><p>求出<strong>x</strong>(也就是<strong>在iPhone6-plus的根字体大小应该设计为110.4比例才正确</strong>)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231719255.png" alt="image-20220523171901209"></p><p>所以这里换算出来的关系就是这样子</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231723426.png" alt="计算结果"></p><p>375px设备分辨率下的345px在其他设备的适配代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#one</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="language-css">            <span class="hljs-comment">/* width: 345px; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* height: 150px; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* margin: 15px; */</span></span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-comment">/* 345/100 = 3.45 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">3.45rem</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 150/100 = 1.5 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">1.5rem</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 15/100 = 0.15 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.15rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//初次调入</span></span><br><span class="language-javascript">        <span class="hljs-title function_">changeFontSizeHTML</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//窗口发生改变再次调用</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = changeFontSizeHTML;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeFontSizeHTML</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取设备独立像素(因为设置了width=device-width),所以布局视口会等于独立像素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> buju = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//计算字体大小</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> fontSizeHTML = (buju * <span class="hljs-number">100</span>) / <span class="hljs-number">375</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//设置字体大小</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = fontSizeHTML + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果:</p><p>这样子在不同设备下的根字体大小就不同,显示的效果也是一样的</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231738074.png"></p><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p>搜狐、唯品会的移动端页面用的此方案</p><ol><li>设置完美视口</li><li><span style="color:#ee0b41">通过js设置根字体大小  &#x3D; <strong>当前设备横向独立像素值 &#x2F; 10</strong> </span></li><li><span style="color:#ee0b41">编写样式时，直接以rem为单位，值为：<strong>设计值 &#x2F; (设计稿宽度 &#x2F; 10)</strong></span></li><li>增加 JS 代码进行实时适配</li></ol><ul><li>搜狐,唯品会就是发现这样一个规律</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231845858.png" alt="要求的根字体大小"></p><ul><li>计算出来的根字体大小为 <strong>41.4</strong>,会发现<strong>根字体的大小恰巧是当前设备横向独立像素值 &#x2F; 10</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231846312.png" alt="计算出的根字体大小"></p><p>所以换算出来的关系如图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231850107.png" alt="方案2换算关系"></p><p>可以看到,我们算根字体的大小到底是多少十分简单,但是换算rem的时候就会十分麻烦</p><p>示例代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span>,</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#one</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="language-css">            <span class="hljs-comment">/* width: 345px; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* height: 150px; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* margin: 15px; */</span></span><br><span class="language-css">            <span class="hljs-comment">/* 345 / 37.5 = 9.2 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">9.2rem</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 150 / 37.5 = 4 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">4rem</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 15 / 37.5 = 0.4 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0.4rem</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//初次调入</span></span><br><span class="language-javascript">        <span class="hljs-title function_">changeFontSizeHTML</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//窗口发生改变再次调用</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = changeFontSizeHTML;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeFontSizeHTML</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取设备独立像素(因为设置了width=device-width),所以布局视口会等于独立像素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> buju = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//计算字体大小</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> fontSizeHTML = buju / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//设置字体大小</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = fontSizeHTML + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231855800.png" alt="唯品会官网使用"></p><p><strong>less写法</strong></p><p>html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/index.css&quot;&gt; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//初次调入</span></span><br><span class="language-javascript">        <span class="hljs-title function_">changeFontSizeHTML</span>();</span><br><span class="language-javascript">        <span class="hljs-comment">//窗口发生改变再次调用</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onresize</span> = changeFontSizeHTML;</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">changeFontSizeHTML</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//获取设备独立像素(因为设置了width=device-width),所以布局视口会等于独立像素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> buju = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//计算字体大小</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> fontSizeHTML = buju / <span class="hljs-number">10</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//设置字体大小</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = fontSizeHTML + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>less内容(注意,注意加上括号!)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">// 定义变量<br><span class="hljs-keyword">@fontSize</span>:375/10rem;<br><br>* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#one</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: hotpink;<br>    <span class="hljs-attribute">width</span>:(<span class="hljs-number">345</span>/@fontSize);<br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">150</span>/@fontSize);<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">15</span>/@fontSize);<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-vw适配"><a href="#3-vw适配" class="headerlink" title="3.vw适配"></a>3.vw适配</h4><ul><li><p>有人就会想,既然我是找比例关系,那么肯定会有这样子关系</p></li><li><p>设计图上的屏幕宽度是375px,设计图上一个div的宽度为345px,那么345px占了375px的<strong>0.92(92%)</strong>,那么我到别的屏幕宽度去,我就想办法让这个div也占当前屏幕宽度的92%就可以完成适配了对吧,</p></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205231931065.png" alt="占比关系"></p><p>所以<code>vw ,vh</code>就出来了</p><ul><li>1vw(视图宽度)  &#x3D; 等于布局视口宽度的1%</li><li>1vh(视图高度) &#x3D; 等于布局视口高度的1%</li></ul><p>不过vw和vh有一定的兼容性问题：详见：<a href="https://www.caniuse.com/#search=vw">这里</a></p><p>所以我们可以代码大概可以怎么写?</p><ul><li>按照当前设计图给出的屏幕宽度(布局视口宽度)算出每一个容器所占据的百分比后用vw来替换(注意,是<strong>vw!vw!vw!</strong>)</li><li>为什么要强调是<code>vw</code>呢? 因为假如你使用<code>vh</code>,1vh是布局视口高度的1%,可是!不管是哪一个网页,屏幕的高度都不是固定的吧?只有宽度是固定的</li></ul><p>普通写法代码实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#one</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: hotpink;</span><br><span class="language-css">            <span class="hljs-comment">/* width: 345px; </span></span><br><span class="hljs-comment"><span class="language-css">            height: 150px;</span></span><br><span class="hljs-comment"><span class="language-css">            margin: 15px;  */</span></span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/* 345/375 *100 = 92 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">92vw</span>; </span><br><span class="language-css"></span><br><span class="language-css">            <span class="hljs-comment">/* 150/375 *100 = 40 */</span></span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40vw</span>;</span><br><span class="language-css"></span><br><span class="language-css">             <span class="hljs-comment">/* 15/375 *100 = 4 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">4vw</span>; </span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>less的写法</strong></p><p>html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/index.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>less内容(依旧注意括号问题)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@vwSize</span>: <span class="hljs-number">375</span>/<span class="hljs-number">100vw</span>;<br>* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-id">#one</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: hotpink;<br>    <span class="hljs-comment">/* width: 345px; </span><br><span class="hljs-comment">    height: 150px;</span><br><span class="hljs-comment">    margin: 15px;  */</span><br>    <span class="hljs-attribute">width</span>:(<span class="hljs-number">345</span>/@vwSize); <br>    <span class="hljs-attribute">height</span>: (<span class="hljs-number">150</span>/@vwSize);<br>    <span class="hljs-attribute">margin</span>: (<span class="hljs-number">15</span>/@vwSize); <br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1物理像素边框"><a href="#4-1物理像素边框" class="headerlink" title="4.1物理像素边框"></a>4.1物理像素边框</h4><p>在dpr为2或者3以上的情况下,1css像素对应2个或者3个物理像素(说通俗点就是高dpr下,1px的css像素所显示的效果并没是我们想象的1px效果)</p><p>默认情况下的<code>1px</code>css像素的显示效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205232015172.png" alt="默认情况下的1px css像素的显示效果"></p><p>放大后的<code>1px</code> css像素的显示效果,可以明显看到边框肯定不是1px</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205232016341.png" alt="放大后的1px css像素的显示效果"></p><p>设置物理像素边框适配后的效果,可以看到,即使在搞dpr下,边框也依旧为<code>1px</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205232017793.png" alt="设置物理像素边框适配后的效果"></p><p>代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css">//关键代码就是媒体查询<br>//dpr为<span class="hljs-number">2</span>的情况下,就将<span class="hljs-attribute">border</span>从<span class="hljs-number">1px</span>设置为<span class="hljs-number">0.5px</span><br>//这样子<span class="hljs-number">0.5px</span>的css像素 只能点亮<span class="hljs-number">1px</span>物理像素(<span class="hljs-number">0.5</span>*<span class="hljs-number">2</span>)<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio</span>:<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-selector-id">#app</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0.5px</span> solid black;<br>    &#125;<br>&#125;<br><br>//dpr为<span class="hljs-number">3</span>的情况下,就将<span class="hljs-attribute">border</span>从<span class="hljs-number">1px</span>设置为<span class="hljs-number">0.33px</span><br>//这样子<span class="hljs-number">0.33px</span>的css像素 只能点亮<span class="hljs-number">1px</span>物理像素(<span class="hljs-number">0.33</span>*<span class="hljs-number">3</span>)<br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">-webkit-min-device-pixel-ratio</span>:<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-selector-id">#app</span>&#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">0.33px</span> solid black;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h3><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p>移动端事件列表</p><ul><li>touchstart 元素上触摸开始时触发</li><li>touchmove 元素上触摸移动的时候触发</li><li>touchend 手指从触摸元素上离开时候触发</li><li>touchcancel 触摸被打断时触发<ul><li>比如说来了一个电话或者网页有一个弹窗</li></ul></li><li>每一个事件都会传入一个默认的参数,也就是事件回调对象</li></ul><p>这几个事件最早出现于IOS safari中，为了向开发人员转达一些特殊的信息。</p><h4 id="事件回调"><a href="#事件回调" class="headerlink" title="事件回调"></a>事件回调</h4><p>如图,输出事件回调对象</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205240825053.png" alt="事件回调对象"></p><p>我们使用的比较多的图片圈圈出来了</p><h5 id="1-touches-伪数组"><a href="#1-touches-伪数组" class="headerlink" title="1.touches(伪数组)"></a>1.touches(伪数组)</h5><p>屏幕上的触点数(屏幕上总共的手指头,当然,也不一定要手指头)</p><h5 id="2-targetToches-伪数组"><a href="#2-targetToches-伪数组" class="headerlink" title="2.targetToches(伪数组)"></a>2.targetToches(伪数组)</h5><p>被触摸元素的触点数(就是有多少个手指头在这个元素上,当然,也不一定要手指头)</p><h5 id="3-changedTouches-伪数组"><a href="#3-changedTouches-伪数组" class="headerlink" title="3.changedTouches(伪数组)"></a>3.changedTouches(伪数组)</h5><p>屏幕上改变的触点数(就是手指头变化的数量),当然,也可以应用于屏幕上同时按下几个手指头的判断</p><p>比如一封婚礼请帖,需要嘴唇亲吻才可以进入下一步领取红包,就可以使用<code>changedTouches</code>来判断</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p>touchstart 事件可用于元素触摸的交互，比如页面跳转，标签页切换</p></li><li><p>touchmove 事件可用于页面的滑动特效，网页游戏，画板</p></li><li><p>touchend 事件主要跟 touchmove 事件结合使用</p></li><li><p>touchcancel 使用率不高</p></li></ul><p>注意：</p><ul><li><strong>touchmove 事件触发后，即使手指离开了元素，touchmove 事件也会持续触发</strong></li></ul><p>如图,手指头移出了粉红区域后依旧触发了<code>touchmove</code>事件</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205232114513.gif" alt="手指头移出了粉红区域后依旧触发了touchmove事件"></p><ul><li>触发 touchmove 与 touchend 事件，一定要先触发 touchstart </li><li><span style="color:#ee0b41">事件的作用在于实现移动端的界面交互</span></li></ul><h4 id="点击穿透"><a href="#点击穿透" class="headerlink" title="点击穿透"></a>点击穿透</h4><p><span style="color:#ee0b41">        touch 事件结束后会默认触发元素的 click 事件</span>，如没有设置完美视口，则事件触发的时间间隔为 300ms 左右，如设置完美视口则时间间隔为 30ms 左右（备注：具体的时间也看设备的特性）。</p><ul><li>点击穿透条件<ul><li>被touch的元素,触发了事件后将自己隐藏了(比如display:none)</li><li>被touch的元素下面有<code>click</code>事件</li></ul></li><li>想更详细的可以看看<a href="https://blog.csdn.net/weixin_47450807/article/details/122958492">这位博主写的</a></li></ul><p>​也可以这样子说:如果 touch 事件隐藏了元素，则 click 动作将作用到新的元素上，触发新元素的 click 事件或页面跳转，此现象称为点击穿透</p><p>触发蒙层下的<code>touchstart</code>方法，蒙层消失，触发该元素位置下的<code>click</code>事件。</p><p><strong>代码示例:(单击关闭后会穿透到click)</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>点击穿透<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">*&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#app</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.banner</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: orange;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.shade</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">h1</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:white;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">button</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;banner&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>点我去百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shade&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>恭喜一等奖<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>关闭<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> shade = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.shade&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>)</span><br><span class="language-javascript">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;</span><br><span class="language-javascript">shade.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span></span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a>解决方法一</h5><p>阻止默认行为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//阻止默认行为</span><br>node.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>e.<span class="hljs-title function_">preventDefault</span>(); <br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a>解决方法二</h5><p>使背后元素不具备click特性，用touchXxxx代替click</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">banner_img.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="解决方法三"><a href="#解决方法三" class="headerlink" title="解决方法三"></a>解决方法三</h5><p>让背后的元素暂时失去click事件，300毫秒左右再复原</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#anode</span>&#123;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>    shade.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> =  <span class="hljs-string">&#x27;none&#x27;</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        anode.<span class="hljs-property">style</span>.<span class="hljs-property">pointerEvents</span> = <span class="hljs-string">&#x27;auto&#x27;</span><br>    &#125;,<span class="hljs-number">500</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="解决方法四"><a href="#解决方法四" class="headerlink" title="解决方法四"></a>解决方法四</h5><p>让隐藏的元素延迟300毫秒左右再隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;touchstart&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    shade.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> =  <span class="hljs-string">&#x27;none&#x27;</span><br>    &#125;,<span class="hljs-number">300</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue一些比较重要知识点的复习</title>
    <link href="/2022/05/22/%E5%89%8D%E7%AB%AF/vue%E4%B8%80%E4%BA%9B%E6%AF%94%E8%BE%83%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E5%A4%8D%E4%B9%A0/"/>
    <url>/2022/05/22/%E5%89%8D%E7%AB%AF/vue%E4%B8%80%E4%BA%9B%E6%AF%94%E8%BE%83%E9%87%8D%E8%A6%81%E7%9F%A5%E8%AF%86%E7%82%B9%E7%9A%84%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="Vue的MVVM模型"><a href="#Vue的MVVM模型" class="headerlink" title="Vue的MVVM模型"></a>Vue的MVVM模型</h3><h4 id="知道什么是MVVM"><a href="#知道什么是MVVM" class="headerlink" title="知道什么是MVVM"></a>知道什么是MVVM</h4><ul><li>M: (Model 模型)  即后端传递过来或者自己定义的数据(对应vue组件当中的data,props,computed等)</li><li>V: (View 视图) 即用户看到的界面UI (也就是我们组件当中的template部分)</li><li>VM: ViewModel,负责实现View和Model之间数据状态同步的中间对象</li></ul><h4 id="MVVM的关系"><a href="#MVVM的关系" class="headerlink" title="MVVM的关系"></a>MVVM的关系</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171055780.png" alt="MVVM关系"></p><h4 id="MVVM优点"><a href="#MVVM优点" class="headerlink" title="MVVM优点"></a>MVVM优点</h4><blockquote><p>在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互，<br>Model 和 ViewModel 之间的交互是双向的，<br>因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到View 上。<br>ViewModel 通过双向数据绑定把 View 和 Model 连接了起来，而 View 和 Model 之间的同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM， 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。</p></blockquote><h3 id="Vue的绑定键盘鼠标操作和在组件使用上的要点官网API"><a href="#Vue的绑定键盘鼠标操作和在组件使用上的要点官网API" class="headerlink" title="Vue的绑定键盘鼠标操作和在组件使用上的要点官网API"></a>Vue的绑定键盘鼠标操作和在组件使用上的要点<a href="https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">官网API</a></h3><h4 id="Vue的事件操作-v-on-click-x3D-”xxx”或-click"><a href="#Vue的事件操作-v-on-click-x3D-”xxx”或-click" class="headerlink" title="Vue的事件操作(v-on:click&#x3D;”xxx”或@click)"></a>Vue的事件操作(v-on:click&#x3D;”xxx”或@click)</h4><ul><li>基本使用: <code>&lt;div @click=&quot;事件&quot;&gt;&lt;/div&gt;</code> 或者<code>&lt;div @click.xxxx=&quot;事件&quot;&gt;&lt;/div&gt;</code> 或者<code>&lt;div v-on.click=&quot;事件&quot;&gt;&lt;/div&gt;</code> 或者<code>&lt;div v-on.click.xxx=&quot;事件&quot;&gt;&lt;/div&gt;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//除了@click=&quot;鼠标单击事件外&quot;</span><br><span class="hljs-comment">//还有@click.xxx=&quot;经过修饰符指定的类型的事件&quot;</span><br>.<span class="hljs-property">stop</span>    <span class="hljs-comment">//停止事件冒泡(等同于event.stopPropagination())</span><br>.<span class="hljs-property">prevent</span> <span class="hljs-comment">//阻止默认行为(比如单击一个按钮莫名其妙提交了表单,等用于event.preventDefault())</span><br>.<span class="hljs-property">capture</span><br>.<span class="hljs-property">self</span> <br>.<span class="hljs-property">once</span> <span class="hljs-comment">//只执行一次</span><br>.<span class="hljs-property">passive</span><br><br>&lt;!-- 阻止单击事件继续传播 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>&lt;!-- 提交事件不再重载页面 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;onSubmit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><br>&lt;!-- 修饰符可以串联 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-on:click.stop.prevent</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br>&lt;!-- 只有修饰符 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><br>&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;<br>&lt;!-- 即内部元素触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.capture</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>&lt;!-- 只当在 event.<span class="hljs-property">target</span> 是当前元素自身时触发处理函数 --&gt;<br>&lt;!-- 即事件不是从内部元素触发的 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-on:click.self</span>=<span class="hljs-string">&quot;doThat&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="Vue的按键操作的别名-这样子就不用通过判断键代码来获取用户是哪一个操作了"><a href="#Vue的按键操作的别名-这样子就不用通过判断键代码来获取用户是哪一个操作了" class="headerlink" title="Vue的按键操作的别名(这样子就不用通过判断键代码来获取用户是哪一个操作了)"></a>Vue的按键操作的别名(这样子就不用通过判断键代码来获取用户是哪一个操作了)</h4><ul><li>基本使用: <code>&lt;div @keyup.xxxx=&quot;事件&quot;&gt;&lt;/div&gt;</code> 或者<code>&lt;div v-on.keyup.xxx=&quot;事件&quot;&gt;&lt;/div&gt;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-property">enter</span><br>.<span class="hljs-property">tab</span><br>.<span class="hljs-property">delete</span> (捕获“删除”和“退格”键)<br>.<span class="hljs-property">esc</span><br>.<span class="hljs-property">space</span><br>.<span class="hljs-property">up</span><br>.<span class="hljs-property">down</span><br>.<span class="hljs-property">left</span><br>.<span class="hljs-property">right</span><br></code></pre></td></tr></table></figure><h4 id="组件使用操作按钮注意点"><a href="#组件使用操作按钮注意点" class="headerlink" title="组件使用操作按钮注意点"></a>组件使用操作按钮注意点</h4><ul><li><strong>不管是什么,在组件上传递的事件,都是自定义事件!在HTML标签上添加就是原生DOM事件,比如说@click,@mousemove这些系统自带的原生事件在组件上直接使用的话都是自定义事件,组件内部需要对其进行处理才可以使用!</strong> <a href="https://dreamlove.top/2022/05/06/%E5%89%8D%E7%AB%AF/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E5%86%8D%E6%AC%A1(%E6%B7%B1%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8E%9F%E7%94%9FDOM%E4%BA%8B%E4%BB%B6)/">具体可以看看这博客</a></li><li>所以如果组件上想使用原生事件,需要添加<code>.native</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">比如有一个自定义组件<span class="hljs-title class_">MyButton</span><br><br><span class="hljs-comment">//这里的@click即为自定义事件(因为是绑定在组件上的!)</span><br><span class="hljs-comment">//如果MyButton组件没有对这个自定义事件进行处理,那么这个事件是没有用的</span><br>&lt;<span class="hljs-title class_">MyButton</span> @click=<span class="hljs-string">&quot;事件&quot;</span>&gt;&lt;/<span class="hljs-title class_">MyButton</span>&gt;<br><br><span class="hljs-comment">//这里的@click即为原生事件(因为使用了.native)</span><br><span class="hljs-comment">//即使MyButton组件没有对这个事件进行处理,这个事件依旧会触发(因为是原生的,vue帮我们处理好了)</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> @<span class="hljs-attr">click.native</span>=<span class="hljs-string">&quot;事件&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyButton</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="Vue的数据绑定响应式官网API"><a href="#Vue的数据绑定响应式官网API" class="headerlink" title="Vue的数据绑定响应式官网API"></a>Vue的数据绑定响应式<a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96">官网API</a></h3><blockquote><p>vue当中,除了<code>data</code>当中的数据会被vue转化为响应式数据以外,其他地方添加的数据均不是响应式,如果需要,必须要使用$set或者set方法官方是这样子说的,但是好像<code>computed</code>其实也是响应式</p></blockquote><h4 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h4><p>简单一句就是setter和getter方式,这里就不多说了,感兴趣的可以看看官方,<strong>这里记录下官方的话语</strong></p><ul><li>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 <code>data</code> 选项，Vue 将遍历此对象所有的 property，并使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"><code>Object.defineProperty</code></a> 把这些 property 全部转为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects#%E5%AE%9A%E4%B9%89_getters_%E4%B8%8E_setters">getter&#x2F;setter</a>。<code>Object.defineProperty</code> 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。</li><li>这些 getter&#x2F;setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。这里需要注意的是不同浏览器在控制台打印数据对象时对 getter&#x2F;setter 的格式化并不同，所以建议安装 <a href="https://github.com/vuejs/vue-devtools">vue-devtools</a> 来获取对检查数据更加友好的用户界面。</li><li>每个组件实例都对应一个 <strong>watcher</strong> 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171000744.png" alt="图片"></p><h4 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h4><h5 id="对于对象"><a href="#对于对象" class="headerlink" title="对于对象"></a>对于对象</h5><ul><li>data当中<strong>初始化的数据为响应式</strong>(也就是数据变了,视图也会发生变化!)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">1</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// `vm.a` 是响应式的</span><br><br>vm.<span class="hljs-property">b</span> = <span class="hljs-number">2</span><br><span class="hljs-comment">// `vm.b` 是非响应式的</span><br>(数据发生变化,依据这个数据绑定的标签之类的不会发生变化)<br></code></pre></td></tr></table></figure><ul><li>非响应式数据变成响应式数据<code>$set</code>或者<code>set</code>(使得数据发送变化,视图也会发生变化)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//以myObj当中新添加的属性 b ,并设置为响应式数据 为例子</span><br><span class="hljs-comment">//myObj.b = 2;//直接添加-非响应式</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(myObj,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//set添加-响应式</span><br><br><span class="hljs-comment">//或者 this为Vue的实例化对象</span><br><span class="hljs-variable language_">this</span>.$set(myObj,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//$set添加-响应式</span><br><br></code></pre></td></tr></table></figure><ul><li>为<strong>多个属性设置为响应式数据</strong><code>Object.assign</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">someObject</span>:&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br><span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><br>&#125;);<br><span class="hljs-comment">//这样子myObj就成为了一个响应式对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>);<br><span class="hljs-comment">//&#123; name: &#x27;李白&#x27;, sex: &#x27;男&#x27;, a: 1, b: 2 &#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意,不可以<code>this.someObject = Object.assign(this.someObject, &#123; a: 1,b: 2 &#125;);</code>因为这依旧是对原来的数据进行添加删除,而不是进行了替换!</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//证明</span><br><span class="hljs-comment">//有效(数据变化,视图也变换!)</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;);<br><span class="hljs-comment">//无效(数据变化了,视图没有变化!)</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;);<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addProperty&quot;</span>&gt;</span>单击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; someObject.a &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Home&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">someObject</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李白&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;男&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">addProperty</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 单击后视图没有出现 新添加的数字1,既然是响应式数据,数据变化了,视图也会发生变化,这里却没有</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 所以代码1 的写法是错误的!</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 代码1 : this.someObject = Object.assign(this.someObject, &#123; a: 1,b: 2 &#125;);</span></span></span><br><span class="language-javascript"><span class="language-xml">      </span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//单击后视图出现了 新添加的数字1</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//数据变化,视图变化,响应式数据</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">someObject</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);<span class="hljs-comment">//出现了1</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h5 id="对于数组-官网API"><a href="#对于数组-官网API" class="headerlink" title="对于数组 官网API"></a>对于数组 <a href="https://cn.vuejs.org/v2/guide/reactivity.html#%E5%AF%B9%E4%BA%8E%E6%95%B0%E7%BB%84">官网API</a></h5><blockquote><p>由于对象当中有setter和getters,数组没有,所以数组的所有操作并不像对象那样容易引起数据改变,视图改变的状况</p></blockquote><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">items</span>: [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>]<br>  &#125;<br>&#125;)<br>vm.<span class="hljs-property">items</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;x&#x27;</span> <span class="hljs-comment">// 不是响应性的</span><br>vm.<span class="hljs-property">items</span>.<span class="hljs-property">length</span> = <span class="hljs-number">2</span> <span class="hljs-comment">// 不是响应性的</span><br></code></pre></td></tr></table></figure><p><strong>解决</strong></p><ol><li>使用<strong>Vue.set或者$set</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Vue.set</span><br><span class="hljs-comment">// 参数1为要设置的数组items</span><br><span class="hljs-comment">// 参数2为设置的索引</span><br><span class="hljs-comment">// 参数3为新添加的值</span><br><span class="hljs-comment">// 这样子新添加的newValue即为响应式数据了</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(vm.<span class="hljs-property">items</span>, indexOfItem, newValue)<br></code></pre></td></tr></table></figure><ol start="2"><li>使用<strong>Vue当中重写的几个数组的方法</strong>,这样子操作就不会影响数据响应式效果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Array.prototype.splice</span><br>vm.<span class="hljs-property">items</span>.<span class="hljs-title function_">splice</span>(indexOfItem, <span class="hljs-number">1</span>, newValue)<br></code></pre></td></tr></table></figure><ol start="3"><li>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：**(大白话就是Vue重写了这些方法,通过这些方法修改的数组也会触发视图的更新)**</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">push</span>()<br><span class="hljs-title function_">pop</span>()<br><span class="hljs-title function_">shift</span>()<br><span class="hljs-title function_">unshift</span>()<br><span class="hljs-title function_">splice</span>()<br><span class="hljs-title function_">sort</span>()<br><span class="hljs-title function_">reverse</span>()<br></code></pre></td></tr></table></figure><ol start="4"><li>也可以<strong>替换数组</strong>来达到修改后依旧是响应式效果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//example1.items 本身为一个响应式数组</span><br><span class="hljs-comment">//这里进行了替换操作</span><br>example1.<span class="hljs-property">items</span> = example1.<span class="hljs-property">items</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> item.<span class="hljs-property">message</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Foo/</span>)<br>&#125;)<br><br><span class="hljs-comment">//filter()、concat() 和 slice()等返回新数组的操作都可以~</span><br></code></pre></td></tr></table></figure><blockquote><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。Vue 为了使得 DOM 元素得到最大范围的重用而实现了一些智能的启发式方法，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p></blockquote><h3 id="Vue组件通信的六种方式"><a href="#Vue组件通信的六种方式" class="headerlink" title="Vue组件通信的六种方式"></a>Vue组件通信的六种方式</h3><h4 id="Props通信"><a href="#Props通信" class="headerlink" title="Props通信"></a>Props通信</h4><ul><li>主要用于父子间的通信,不仅仅是普通的子,也可以是孙子之类的之间的通信),</li><li>为了方便,这里就不区分什么孙子,曾孙子了,统一以父亲和儿子来说</li></ul><h5 id="props通信主要有"><a href="#props通信主要有" class="headerlink" title="props通信主要有"></a>props通信主要有</h5><ul><li>传递非函数数据——-适用于父亲向儿子传递数据<ul><li>如果是<strong>普通数据</strong>-则是父亲想给儿子东东</li><li>如果是<strong>传递的是函数</strong>,则是儿子想传递某些东东给父亲</li></ul></li></ul><p>例子1: <strong>父亲向儿子传递普通数据</strong></p><p>父亲</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父亲</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>props通信<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 传递title属性给儿子,告诉儿子title信息 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;标题设置为动感超人&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./son.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Father&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">Son</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>儿子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//儿子</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//儿子接收父亲传递过来的props</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 父亲刚刚传递了一个 title,这里就添加一个title</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;title&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171502361.png" alt="props-子向父传递非函数数据"></p><p>传递函数数据——儿子想告诉父亲什么东西(也就是想传递数据给父亲)</p><p>例子2 : 父亲传递一个函数给儿子</p><p>父亲</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父亲</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>props通信<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 传递getInfo属性给儿子,告诉儿子老爸想要你的信息 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span> <span class="hljs-attr">:getInfo</span>=<span class="hljs-string">&quot;returnInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./son.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Father&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Son</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//获取儿子的信息</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">returnInfo</span>(<span class="hljs-params">info</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;儿子传递给我的信息是&quot;</span>, info);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>儿子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//儿子</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;tellFather&quot;</span>&gt;</span>单击这个按钮告诉爸爸信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 或者简单点 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;getInfo(&#x27;儿子很好,爸爸放心1&#x27;)&quot;</span>&gt;</span>简单调用写法<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Son&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//儿子接收父亲传递过来的props</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 父亲刚刚传递了一个 getInfo,这里就添加一个getInfo</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;getInfo&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//告诉爸爸</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">tellFather</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getInfo</span>(<span class="hljs-string">&quot;儿子很好,爸爸放心2&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>效果图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171508329.png" alt="props-父亲向儿子传递函数数据"></p><h5 id="props的类型"><a href="#props的类型" class="headerlink" title="props的类型"></a>props的类型</h5><ul><li><p>数组</p><ul><li>props:[“title” , “name” , “say”]; 儿子接收父亲传递过来的数据,都是写在数组里面的,并且是以字符串形式组成的数组(如上面二个案例就是用数组接收传递的)</li></ul></li><li><p>对象(普通key,value) — 可<strong>用于指明props的值类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: &#123;<br>  <span class="hljs-comment">//指明title只能是字符串类型</span><br>  <span class="hljs-attr">title</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-comment">//指明likes只能是数值类型 </span><br>  <span class="hljs-attr">likes</span>: <span class="hljs-title class_">Number</span>,<br>  <span class="hljs-comment">//指明isPublished只能是布尔值类型</span><br>  <span class="hljs-attr">isPublished</span>: <span class="hljs-title class_">Boolean</span>,<br>  <span class="hljs-comment">//指明commentIds只能是数组类型</span><br>  <span class="hljs-attr">commentIds</span>: <span class="hljs-title class_">Array</span>,<br>  <span class="hljs-comment">//指明author只能是对象类型</span><br>  <span class="hljs-attr">author</span>: <span class="hljs-title class_">Object</span>,<br>  <span class="hljs-comment">//指明callback只能是函数类型</span><br>  <span class="hljs-attr">callback</span>: <span class="hljs-title class_">Function</span>,<br>  <span class="hljs-comment">//指明contactsPromise只能是Promise类型</span><br>  <span class="hljs-attr">contactsPromise</span>: <span class="hljs-title class_">Promise</span> <span class="hljs-comment">// or any other constructor</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对象里面又有配置对象</p><ul><li><p>配置对象参数</p><ul><li><p><strong>type:</strong>(指明props的值的类型)</p></li><li><p><strong>required</strong>:(布尔值,代表是否必填,和default冲突)</p></li><li><p><strong>default</strong>:(默认值参数)</p></li><li><p><strong>validator</strong>:(验证参数)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171519418.png" alt="验证不通过报错"></p></li></ul></li></ul></li><li><p>配置对象代码示例</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="自定义事件通信-官网API"><a href="#自定义事件通信-官网API" class="headerlink" title="自定义事件通信(官网API)"></a>自定义事件通信(<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html">官网API</a>)</h4><h5 id="知道自定义事件和系统事件-原生事件-的区别"><a href="#知道自定义事件和系统事件-原生事件-的区别" class="headerlink" title="知道自定义事件和系统事件(原生事件)的区别"></a>知道自定义事件和系统事件(原生事件)的区别</h5><ul><li>自定义事件(<strong>事件类型自己定义</strong>,回调函数自己定义)</li><li>系统事件(原生事件) (<strong>事件类型系统定义</strong>,回调函数自己定义)</li></ul><h5 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h5><ul><li>关键用法是<code>$on</code> 和<code>$emit</code><ul><li><code>$on(参数1,参数2)</code><ul><li>参数1为绑定的事件名称(用于后面$emit触发)</li><li>参数2为绑定的回调函数</li></ul></li><li><code>$emit(参数1,参数2)</code><ul><li>参数1为要触发的事件名称(和<code>$on</code>的第一个参数要对得上)</li><li>参数2为给事件名称对应的回调函数传递的参数值</li></ul></li></ul></li><li>注意,如果<code>$emit</code>需要<strong>传递多个参数</strong>,要使用对象,比如说<code>$emit(xxxx,&#123;参数1:value,参数2,value2&#125;)</code></li></ul><h6 id="复杂写法"><a href="#复杂写法" class="headerlink" title="复杂写法"></a>复杂写法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父亲</span><br>&lt;<span class="hljs-title class_">Son</span> ref=<span class="hljs-string">&quot;erzi&quot;</span>&gt;&lt;/<span class="hljs-title class_">Son</span>&gt;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//注意,第一个complex为自己定义的,用于后面$emit触发</span><br>        <span class="hljs-comment">//第二个complex为绑定的回调函数!</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">erzi</span>.$on(<span class="hljs-string">&quot;complex&quot;</span>,complex);<br>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-title function_">complex</span>(<span class="hljs-params">content</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//儿子</span><br>&lt;span&gt;我是儿子&lt;/span&gt;<br><span class="hljs-comment">//单击按钮,调用$emit触发自定义事件,并传递数据&#x27;爸爸,我很好&#x27;给父亲</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;this.$emit(&#x27;complex&#x27;,&#x27;爸爸,我很好&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h6 id="简单写法"><a href="#简单写法" class="headerlink" title="简单写法"></a>简单写法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父亲</span><br><span class="hljs-comment">//第一个complex为自己定义的,用于后面$emit触发</span><br><span class="hljs-comment">//第二个complex为绑定的回调函数!</span><br>&lt;<span class="hljs-title class_">Son</span> @complex=<span class="hljs-string">&quot;complex&quot;</span>&gt;&lt;/<span class="hljs-title class_">Son</span>&gt;<br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">methods</span>:&#123;<br><span class="hljs-title function_">complex</span>(<span class="hljs-params">content</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content)<br>&#125;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//儿子</span><br>&lt;span&gt;我是儿子&lt;/span&gt;<br><span class="hljs-comment">//单击按钮,调用$emit触发自定义事件,并传递数据&#x27;爸爸,我很好&#x27;给父亲</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;this.$emit(&#x27;complex&#x27;,&#x27;爸爸,我很好&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h6 id="顺带一提"><a href="#顺带一提" class="headerlink" title="顺带一提"></a>顺带一提</h6><ul><li>组件配置中<ul><li>data函数,methods的函数,watch的函数,computed中的函数,他们的<strong>this均是[VueComponent实例对象]</strong></li></ul></li><li>new Vue(options)配置中<ul><li>data函数,methods函数,watch的函数,computed的函数,他们的<strong>this均是[Vue实例对象]</strong></li></ul></li></ul><h4 id="全局事件总线通信"><a href="#全局事件总线通信" class="headerlink" title="全局事件总线通信"></a>全局事件总线通信</h4><p>程度全局事件总线通信任务的东东具备的条件</p><ol><li>要是一个对象</li><li>这个对象可以被所有组件所访问</li><li>这个对象可以调用<code>$emit</code>和<code>$on</code>方法</li></ol><p>所以<strong>选取vm</strong>作为全局事件总线通信任务人~</p><p>至于为什么是vm,可以看看Vue和VueComponent的关系</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171611346.png" alt="Vue和VueComponent的关系"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171613995.png" alt="Vue和VueComponent的关系"></p><h5 id="全局事件总线使用"><a href="#全局事件总线使用" class="headerlink" title="全局事件总线使用"></a>全局事件总线使用</h5><ol><li><p>在主入口文件的main.js当中添加<code>beforeCreate</code>对象,并在里面添加代码(<strong>注意绑定位置!</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//正确的</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span>;<br>&#125;<br>&#125;)<br><span class="hljs-comment">//错误的</span><br><span class="hljs-comment">//注意</span><br><span class="hljs-comment">//这个是不可以的!!!</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>&#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = vm;<br>因为<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>的那一刻,其他组件也会创建!创建好后才会执行这一行代码<br></code></pre></td></tr></table></figure></li><li><p>在A组件(负责接受B组件或其他组件的数据)配置对象mounted当中<strong>添加$on</strong>,回调函数留在A组件当中(这里<strong>以Index.vue组件为例</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Index组件</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">One</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">One</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Two</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Two</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Two</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/allBus/two.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">One</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/allBus/one.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Index&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Two</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">One</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//绑定tellText事件,回调函数为tellText</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$on(<span class="hljs-string">&quot;tellText&quot;</span>,<span class="hljs-variable language_">this</span>.<span class="hljs-property">tellText</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">tellText</span>(<span class="hljs-params">content</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;有人说:&#x27;</span>,content);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li><li><p>在B组件或其他组件(负责发送A组件数据)<strong>当中添加$emit</strong>(以One.vue  和 Two.vue组件为例)</p><p>&#x2F;&#x2F;One.vue组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid red&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是One<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;saySome&quot;</span>&gt;</span>我来说句话<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;One&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">saySome</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">//触发全局事件总线上的tellText事件,并向回调函数传递&#x27;我是One,我说话完毕&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&quot;tellText&quot;</span>,<span class="hljs-string">&quot;我是One,我说话完毕&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;Two.vue组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid blue&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Two<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;saySome&quot;</span>&gt;</span>我来说句话<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Two&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">saySome</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">//触发全局事件总线上的tellText事件,并向回调函数传递&#x27;我是One,我说话完毕&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$bus</span>.$emit(<span class="hljs-string">&quot;tellText&quot;</span>,<span class="hljs-string">&quot;我是Two,我说话完毕&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ol><h5 id="Vue-prototype-bus-x3D-vm-为什么不能用-为什么一定要用beforeCreate钩子实现-可能有误"><a href="#Vue-prototype-bus-x3D-vm-为什么不能用-为什么一定要用beforeCreate钩子实现-可能有误" class="headerlink" title="Vue.prototype.$bus &#x3D; vm;为什么不能用,为什么一定要用beforeCreate钩子实现?(可能有误~)"></a>Vue.prototype.$bus &#x3D; vm;为什么不能用,为什么一定要用beforeCreate钩子实现?(可能有误~)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//正确的</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span>;<br>&#125;<br>&#125;)<br><span class="hljs-comment">//错误的</span><br><span class="hljs-comment">//注意</span><br><span class="hljs-comment">//这个是不可以的!!!</span><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>&#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = vm;<span class="hljs-comment">//下面就来解释为什么这样子不可以</span><br></code></pre></td></tr></table></figure><h6 id="首先了解下Vue与VueComponent的关系"><a href="#首先了解下Vue与VueComponent的关系" class="headerlink" title="首先了解下Vue与VueComponent的关系"></a>首先了解下Vue与VueComponent的关系</h6><ul><li><a href="https://blog.csdn.net/qq_40837310/article/details/122914597">这位博主更加详细的介绍了下Vue组件化之VueComponent介绍</a></li><li>组件都是通过一个交VueComponent的构造函数创建的,<strong>并且这个VueComponent不是我们写的,而是Vue.extend函数生成的</strong>,并且每次生成的都是不一样的VueComponent的构造函数。</li><li>每当我们使用组件标签时（比如说有一个<strong>School的自定义组件</strong>）使用VueComponent构造函数创建一个VueComponent对象，帮我们执行 new VueComponent(options)</li><li><strong>this的指向</strong>：<ul><li><strong>在组件配置中</strong>：data函数，methods中配置的函数，watch中配置的函数，computed中配置的函数的this指向的都是VueComponent组件对象。</li><li><strong>在vue实例配置中</strong>：data函数，methods中配置的函数，watch中配置的函数，computed中配置的函数的this指向的都是vue对象。</li></ul></li></ul><h6 id="原因解释"><a href="#原因解释" class="headerlink" title="原因解释"></a>原因解释</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//正确的</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//在这里挂载到了Vue的原型上,后期通过Vue.extend函数生成的均可以获取到</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = <span class="hljs-variable language_">this</span>;<br>&#125;<br>&#125;)<br><br><span class="hljs-comment">//错误的</span><br><br><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>&#125;)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$bus</span> = vm;<span class="hljs-comment">//执行到这里组件已经创建完成,没有用了</span><br></code></pre></td></tr></table></figure><p>正确绑定总线流程图执行过程</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171751272.png" alt="正确绑定总线流程图执行过程"></p><p>错误绑定总线流程图执行过程</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171752355.png" alt="错误绑定总线流程图执行过程"></p><h6 id="至于为什么控制台console-log-可以输出查看到"><a href="#至于为什么控制台console-log-可以输出查看到" class="headerlink" title="至于为什么控制台console.log(可以输出查看到)"></a>至于为什么控制台console.log(可以输出查看到)</h6><p>因为控制台展开会再次去读取最新的代码,所以你可以控制台看到~</p><h4 id="pubsub-js通信"><a href="#pubsub-js通信" class="headerlink" title="pubsub-js通信"></a>pubsub-js通信</h4><h5 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h5><ul><li>首先要安装<code>npm install pubsub-js</code></li><li>然后用到的地方都导入<code>import PubSub from &quot;pubsub-js&quot;</code>,当然,你也可以全局使用捆绑在原型上,比如<code>import PubSub from &#39;pubsub-js&#39;; Vue.prototype.PubSub = PubSub;</code></li></ul><h5 id="添加订阅-类似于-on"><a href="#添加订阅-类似于-on" class="headerlink" title="添加订阅(类似于$on)"></a>添加订阅(类似于$on)</h5><p>PubSub.subscribe(“发布消息的名称”,回调函数)</p><p><strong>注意</strong>: 回调函数会传入二个参数,第一个参数为发布消息的名称(不管用不用,都必须接收并占位!否者收不到第二个参数),第二个参数即为发布订阅传递过来的消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Two.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid blue&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Two-测试pubsub-js<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    &#123;&#123; content &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PubSub</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//添加订阅(类似于$on),消息名称为&#x27;tellMeSome&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">subscribe</span>(<span class="hljs-string">&quot;tellMeSome&quot;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">tell</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//回调函数,第一个参数必须要写,否者第二个传递过来的参数接收不到</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">tell</span>(<span class="hljs-params">msg, content</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg); <span class="hljs-comment">//输出tellMeSome</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;有人告诉了我&quot;</span>, content);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span> = content;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h5 id="发布订阅-类似于-emit"><a href="#发布订阅-类似于-emit" class="headerlink" title="发布订阅(类似于$emit)"></a>发布订阅(类似于$emit)</h5><p>PubSub.publish(“发布消息的名称”,传递的参数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//One.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid red&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>One-测试pubsub-js<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;itellyou&quot;</span>&gt;</span>单击我告诉Two<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PubSub</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pubsub-js&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;One&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">itellyou</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">       <span class="hljs-comment">//发布订阅,并传入数据&#x27;Two你好,我是One,来测试pubsub的&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">PubSub</span>.<span class="hljs-title function_">publish</span>(<span class="hljs-string">&quot;tellMeSome&quot;</span>, <span class="hljs-string">&quot;Two你好,我是One,来测试pubsub的&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p>单击后显示文字,传递信息成功</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171921133.png" alt="单击后显示文字,传递信息成功"></p><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>作用: 让父组件可以向子组件指定位置插入html结构,适用于父组件 到 子组件</p><p>适合在多个组件当中,有一部分内容相同,部分内容不同的情况下使用,如下面这种情况就很适合,<strong>3个组件都有按钮,但是按钮下方的内容是不同的</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205171925975.png" alt="3个组件都有按钮,但是按钮下方的内容是不同的"></p><h5 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h5><p>关键: slot什么都没有的,就一个纯标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">父组件<br>&lt;<span class="hljs-title class_">Son</span>&gt;<br>    &lt;!--使用默认插槽--&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    我是html结构</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br>&lt;/<span class="hljs-title class_">Son</span>&gt;<br><br>子组件<br>&lt;template&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--定义插槽--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>插槽默认内容(没有被使用默认显示)<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p>理解: <code>slot</code>是含有<code>name</code>属性的标签</p><p>关键: 父组件使用具名插槽是关键是添加属性<code>slot=&quot;插槽名称(对应插槽slot的name属性值)&quot;</code></p><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是父亲<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- slot=&quot;xxx&quot;使用具名插槽 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span></span><br><span class="language-xml">            我会更换具名插槽的内容</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Son.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">Son</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;one&quot;</span>&gt;</span></span><br><span class="language-xml">          我是具名插槽的默认内容</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>理解: </p><ul><li>slot是含有绑定数据的标签,并且父组件可以拿到子组件的数据(通过slot给父亲)</li><li>数据在组件的自身,但根据数据生成的结构需要组件的使用者来决定<ul><li>像element-ui当的<code>&lt;el-table-column&gt;&lt;/el-table-column&gt;</code>就需要我们使用作用域插槽来决定结构</li></ul></li></ul><p>关键: 父组件使用具名插槽是关键是添加属性<code>slot-scope=&quot;&quot;</code> 或者 <code>slot=&quot;&quot;</code></p><p><strong>父组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是父亲<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 使用作用域插槽 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123;games&#125;&quot;</span>&gt;</span></span><br><span class="language-xml">            &#123;&#123;games&#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Son</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Son.vue&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">Son</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><p><strong>子组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 作用域插槽 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:games</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span> 我是作用域插槽默认内容 <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">games</span>: [<span class="hljs-string">&quot;穿越火线&quot;</span>, <span class="hljs-string">&quot;英雄联盟&quot;</span>, <span class="hljs-string">&quot;王者荣耀&quot;</span>, <span class="hljs-string">&quot;战地之王&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>输出示例</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172027146.png" alt="作用域插槽"></p><h4 id="vuex-不使用模块化"><a href="#vuex-不使用模块化" class="headerlink" title="vuex(不使用模块化)"></a>vuex(不使用模块化)</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><ul><li><p>对于vue2: <code>npm install vuex@3 --save</code></p></li><li><p>对于vue3: <code>npm install vuex --save</code></p></li><li><p>查看vue版本</p><ul><li><p>打开你的package.json文件夹就可以看到</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172032563.png" alt="查看vue是2.x还是3.x"></p></li></ul></li><li><p>查看npm当中vuex的所有版本 <code>npm view vuex versions</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172031131.png" alt="查看vuex所有版本"></p></li></ul><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><ol><li><p>添加store文件夹并在里面建立<code>index.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><span class="hljs-keyword">const</span> state = &#123; ... &#125;<br><span class="hljs-keyword">const</span> mutations = &#123; ... &#125;<br><span class="hljs-keyword">const</span> actions = &#123; ... &#125;<br><span class="hljs-keyword">const</span> getters = &#123; ... &#125;<br><span class="hljs-comment">//别忘记new Vuex.Store(配置对象)了!</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><strong>主入口</strong>文件<code>main.js</code>引入store文件夹的<code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store&quot;</span><br>或者<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/store/index.js&quot;</span><br><br>添加到vue的配置对象当中<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br>    store,<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>其他组件可以通过<code>this.$store.dispatch(actions的方法名,传递的参数)</code>来进行调用并存储数据(如果需要传递多个参数,请封装成为对象后传递)</p></li></ol><h5 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h5><ul><li><p>new Vuex.Store(配置对象),配置对象当中的含义</p><ul><li><p><strong>state</strong>: 是一个<strong>包含多个属性</strong>(不包含方法)的对象,用来存储数据</p></li><li><p><strong>mutations:</strong> 是一个<strong>包含多个方法</strong>的对象,用这些方法去操作state当中的对象(也就是操作数据)</p><ul><li><strong>只接收普通的函数,不接受任何if ,for,异步函数</strong></li><li>里面的方法<strong>第一个参数</strong>为<code>state</code>(名字可以随意),为当前配置对象当中state</li><li>里面的方法<strong>第二个参数</strong>为通过<code>commit</code>方法传递过来的参数</li></ul></li><li><p><strong>actions</strong>:是一个<strong>包含多个方法</strong>的对象,这个对象里面的方法用于给其他组件去调用</p><ul><li><p><strong>可以包含if ,for , 异步函数</strong></p></li><li><p>里面的方法传入的<strong>第一个为参数</strong>content(名字可以随意),即为当前的store对象</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172109261.png" alt="输出查看第一个参数"></p></li><li><p>里面的方法传入的<strong>第二个参数</strong>为通过dispatch传递过来的参数</p></li></ul></li><li><p><strong>getters:</strong> (类似于computed),是一个<strong>包含多个方法</strong>的对象,通过计算返回数据</p><ul><li><strong>里面的方法传入的第一个参数为state(参数名称随意)</strong>,也就是当前<code>state</code>对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> state = &#123;...&#125;;<br><span class="hljs-keyword">var</span> mutations = &#123;...&#125;;<br><span class="hljs-keyword">var</span> actions = &#123;...&#125;;<br><span class="hljs-keyword">var</span> getters = &#123;<br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>方法<span class="hljs-number">1</span>:<span class="hljs-function">(<span class="hljs-params">state</span>)=&gt;</span>&#123;<br><br>&#125;,<br>方法<span class="hljs-number">2</span>(state)&#123;<br><br>&#125;,<br><span class="hljs-comment">//方法2写法等同于</span><br>    <span class="hljs-comment">//只不过看你是否用到了this</span><br>    <span class="hljs-comment">//方法2:function(state)&#123;</span><br>    <span class="hljs-comment">//    </span><br>    <span class="hljs-comment">//&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="使用示例1-不使用模块化"><a href="#使用示例1-不使用模块化" class="headerlink" title="使用示例1(不使用模块化)"></a>使用示例1(不使用模块化)</h5><p><strong>单击按钮后</strong>vuex的name由”李白” 变成了”动感超人”</p><p>普通组件One.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是One<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;gaibian&quot;</span>&gt;</span>单击我改变store当中名字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;One&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">gaibian</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">//调用vuex当中的dispatch</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;changName&quot;</span>,<span class="hljs-string">&quot;动感超人&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>store文件夹当中的index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;<br>    <span class="hljs-comment">//用于改变state当中的name</span><br>    <span class="hljs-title function_">SET_NEW_NAME</span>(<span class="hljs-params">state,newValue</span>)&#123;<br>        state.<span class="hljs-property">name</span> = newValue;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//用户使用this.$store.dispatch()调用的正是actions当中的方法</span><br><span class="hljs-keyword">var</span> actions = &#123;<br>    <span class="hljs-comment">//用于调用mutations当中的方法去改变name值</span><br>    <span class="hljs-comment">//使用解构赋值解构出commit</span><br>    <span class="hljs-title function_">changName</span>(<span class="hljs-params">&#123;commit&#125;,value</span>)&#123;<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;SET_NEW_NAME&quot;</span>,value)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getters = &#123;<br><br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="vuex-使用模块化"><a href="#vuex-使用模块化" class="headerlink" title="vuex(使用模块化)"></a>vuex(使用模块化)</h4><ul><li><p>其他什么都不需要改变,只需要改变下store文件夹下的index.js(主入口文件)</p></li><li><p>文件目录结构如下</p><ul><li>store<ul><li>shop(文件夹)<ul><li>address1.js</li><li>address2.js</li></ul></li><li>food(文件夹)<ul><li>vegetable.js</li><li>meat.js</li></ul></li><li>user(文件夹)<ul><li>vipuser.js</li><li>user.js</li></ul></li><li><strong>index.js(主入口文件)</strong></li></ul></li></ul></li><li><p>以后的主入口文件<code>index.js</code>只需要写成下面就可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><span class="hljs-comment">// 模块用法</span><br><br><span class="hljs-comment">//引入One.js模块</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">One</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./One.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-comment">//可以用自己的下面四大类,这里没有显示而已</span><br>    <span class="hljs-comment">// state:&#123;&#125;</span><br>    <span class="hljs-comment">// mutations:&#123;&#125;,</span><br>    <span class="hljs-comment">// actions:&#123;&#125;,</span><br>    <span class="hljs-comment">// getters:&#123;&#125;,</span><br>    <span class="hljs-attr">state</span>:&#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span><br>    &#125;,<br>    <span class="hljs-comment">//使用模块化</span><br>    <span class="hljs-attr">modules</span>:&#123;<br>        <span class="hljs-title class_">One</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>One.js模块内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;<br>    <span class="hljs-comment">//用于改变自己state当中的name</span><br>    <span class="hljs-title function_">SET_NEW_NAME</span>(<span class="hljs-params">state,newValue</span>)&#123;<br>        state.<span class="hljs-property">name</span> = newValue;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> actions = &#123;<br>    <span class="hljs-comment">//用于调用mutations当中的方法去改变name值</span><br>    <span class="hljs-title function_">changName</span>(<span class="hljs-params">&#123;commit&#125;,value</span>)&#123;<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;SET_NEW_NAME&quot;</span>,value)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getters = &#123;<br><br>&#125;<br><span class="hljs-comment">//别忘记暴露出现</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181050351.png" alt="模块化后this.$store.state内容"></p><h6 id="模块化之前输出this-store"><a href="#模块化之前输出this-store" class="headerlink" title="模块化之前输出this.$store"></a>模块化之前输出this.$store</h6><ul><li>可以看到,state当中没有嵌套什么</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205180934024.png" alt="模块化之前输出this.$store"></p><h6 id="模块化之后输出this-store"><a href="#模块化之后输出this-store" class="headerlink" title="模块化之后输出this.$store"></a>模块化之后输出this.$store</h6><ul><li><p>可以看到,state当中嵌套了另外一个对象</p></li><li><p>可以看到,One.js暴露的内容当中的state部分成为了this.$store.state里面的对象并且One为key值,value为One.js当中的state对象的值</p></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205180938055.png" alt="模块化之后输出this.$store"></p><h6 id="模块化需要注意的点"><a href="#模块化需要注意的点" class="headerlink" title="模块化需要注意的点"></a>模块化需要注意的点</h6><ul><li><p><strong>默认情况下</strong>，模块内部的<code>action</code> 和 <code>mutation</code> (官网是这样子说的,但是我测试后发现<code>getters</code>也是注册在全局下的)  是<strong>注册在全局命名空间的</strong>(也就是会放在this.$store对应的actions,mutations,getters对象上)(<strong>所以如果不使用命名空间的话,不管有没有模块化,想调用里面的方法只需要</strong><code>this.$store.dispatch(actions当中的名称,传递的参数)</code><strong>即可调用</strong>)</p></li><li><p>如果没有使用命名空间,那么外界想调用模块当中的<code>actions</code>里面的方法,都是可以直接调用的,比如<code>One.js</code>,已经使用了模块化,但是外面想要调用actions当中的方法依旧只需要<code>this.$store.dispatch(actions当中的名称,传递的参数)</code>就可以调用!但是如果想要获取<code>One.js</code>当中<code>state</code>里面的数据,就需要多调用一层,即:<code>this.$store.One.属性名</code>才可以</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">One</span>.<span class="hljs-property">js</span>并且使用了模块化<br><br><span class="hljs-comment">//想获取One.js里面的age属性,模块化后要怎么获取?</span><br><span class="hljs-comment">//其他组件调用 this.$store.state.One.age即可</span><br><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">2000</span><br>&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;...&#125;<br><span class="hljs-comment">//想调用actions当中的&#x27;changeName&#x27;</span><br><span class="hljs-comment">//在其他组件调用 this.$store.diaptch(&quot;changeName&quot;,&quot;李黑&quot;);</span><br><span class="hljs-comment">//即可调用One.js当中actions里面的changName方法</span><br><span class="hljs-keyword">var</span> actions = &#123;<br>    <span class="hljs-title function_">changName</span>(<span class="hljs-params">content,value</span>)&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getters = &#123;...&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="使用命名空间-针对模块化"><a href="#使用命名空间-针对模块化" class="headerlink" title="使用命名空间(针对模块化)"></a><strong>使用命名空间(针对模块化)</strong></h6><ul><li><p>影响到<code>actions</code>和<code>getters</code>方法使用,其他<code>state,mutation</code>不受影响(因为如果不使用命名空间,后面组件调用<code>dispatch</code>方法,只要模块的actions里面有这个被调用的函数名称,就会被调用,不管你有几个重复的,都会被触发)</p></li><li><p>模块配置对象当中添加<code>namespaced:true</code>即可使用命名空间</p></li><li><p>One.js当中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;100&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;<br>    <span class="hljs-comment">//用于改变state当中的name</span><br>    <span class="hljs-title function_">SET_NEW_NAME</span>(<span class="hljs-params">state,newValue</span>)&#123;<br>        state.<span class="hljs-property">name</span> = newValue;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> actions = &#123;<br>    <span class="hljs-comment">//用于调用mutations当中的方法去改变name值</span><br>    <span class="hljs-title function_">changName</span>(<span class="hljs-params">&#123;commit&#125;,value</span>)&#123;<br>        <span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;SET_NEW_NAME&quot;</span>,value)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getters = &#123;<br>    <span class="hljs-title function_">allInfo</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">name</span>+state.<span class="hljs-property">age</span>;<br>    &#125;,<br>    <span class="hljs-title function_">getOther</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;啊啊&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-comment">//使用命名空间</span><br>    <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>未使用命名空间如何调用actions里面方法和getters里面的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//调用actions当中的changName,如果有多个changName,也会被调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;changName&quot;</span>);<br><br><span class="hljs-comment">//调用getters当中的allInfo来获取值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">allInfo</span><br><span class="hljs-comment">//放置在标签上</span><br>&lt;span&gt;&#123;&#123;$store.<span class="hljs-property">getters</span>.<span class="hljs-property">allInfo</span>&#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181159839.png" alt="没有使用命名空间之后输出this.$store从而查看getters和actions等其他"></p></li><li><p><strong>使用命名空间后如何调用actions里面方法和getters里面的方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//只会调用One.js文件下的actions里面的changName方法</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;One/changName&quot;</span>);<br><br><span class="hljs-comment">//调用getters当中的allInfo来获取值</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;One/allInfo&#x27;</span>]<br><span class="hljs-comment">//放置在标签上</span><br>&lt;span&gt;&#123;&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>[<span class="hljs-string">&#x27;One/allInfo&#x27;</span>]&#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181158326.png" alt="使用命名空间之后输出this.$store从而查看getters和actions等其他"></p><p>  前缀名字会和modules的key对应</p><p>  <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181130507.png" alt="前缀名字会和modules的key对应"></p><p>  如果key改为了OneE</p><p>  <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181131416.png" alt="改为了OneE"></p><p>  那么命名空间当中的名字也会改变</p><p>  <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205181202431.png" alt="  前缀名字会和modules的key对应"></p><h4 id="vuex使用mapState和mapGetters"><a href="#vuex使用mapState和mapGetters" class="headerlink" title="vuex使用mapState和mapGetters"></a>vuex使用mapState和mapGetters</h4><ul><li><p>为什么要mapState和其他的mapXXXXX(这里<strong>以不使用模块化为例</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">假设store文件夹下方的入口文件index.<span class="hljs-property">js</span>含有下方内容<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;100&quot;</span>,<br>    <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;地球&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;...&#125;<br><span class="hljs-keyword">var</span> actions = &#123;...&#125;<br><span class="hljs-keyword">var</span> getters = &#123;...&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>那么我有一个组件叫<code>One.vue</code>,我想<strong>获取到vuex里面的数据放在我这里组件上使用</strong>,那么要怎么使用?</p><ul><li>那么平时,我们必须要写n多个 <code>this.$store.state.xxxxx</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">One</span>.<span class="hljs-property">vue</span><br>那么我们就必须要写n多个 <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">xxxxx</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  <span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-title class_">One</span>,<br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">name</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">name</span>;<br>    &#125;,<br>    <span class="hljs-title function_">age</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">age</span>;<br>    &#125;,<br>    <span class="hljs-title function_">address</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">age</span>;<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h5 id="使用mapState-不使用模块化下"><a href="#使用mapState-不使用模块化下" class="headerlink" title="使用mapState(不使用模块化下)"></a>使用mapState(不使用模块化下)</h5><ul><li><p>先引入 <code>import &#123;mapState&#125; from &quot;vuex&quot;</code>; 别忘记了花括号!</p></li><li><p>使用(<strong>对象的写法</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">// 每次会传入一个参数,这个参数一般命名为state</span><br><span class="hljs-comment">//state等同于this.$store.state的内容!!!</span><br><span class="hljs-keyword">var</span> obb = <span class="hljs-title function_">mapState</span>(&#123;<br>自定义名称:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state === <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>);<span class="hljs-comment">//输出为true</span><br><span class="hljs-keyword">return</span> state.要获取的属性<br>&#125;,<br>    <span class="hljs-comment">//也可以简写</span><br>自定义名称:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.要获取的属性<br>&#125;)<br><br><span class="hljs-comment">//返回值为一个对象</span><br><br>比如下方代码<br><span class="hljs-keyword">var</span> myObj = <span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">sex</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj);<span class="hljs-comment">//&#123;sex: ƒ&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>使用(<strong>数组的写法</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapState</span>([<br>      <span class="hljs-string">&#x27;sex&#x27;</span>,<br>      <span class="hljs-string">&#x27;age&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br><span class="hljs-comment">//代码等同于</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapState</span>(&#123;<br>        <span class="hljs-attr">sex</span>:<span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.<span class="hljs-property">sex</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-function"><span class="hljs-params">state</span>=&gt;</span>state.<span class="hljs-property">age</span>,<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>有了上面的代码例子,这里做一个小结</p><ul><li><code>mapState</code>一般这样子使用,传入一个对象,里面对象的<code>key</code>为自定义名称,<code>value</code>值为一个函数(因为要通过函数当中的参数获取值),并且这个<strong>函数默认</strong>有一个参数(一般取名state),<strong>并且这个参数会等于</strong><code>this.$store.state</code></li></ul></li></ul><h6 id="结合对象展开符-不使用模块化下-常用"><a href="#结合对象展开符-不使用模块化下-常用" class="headerlink" title="结合对象展开符-不使用模块化下(常用)"></a>结合对象展开符-不使用模块化下(常用)</h6><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？通常，我们需要使用一个工具函数将多个对象合并为一个，以使我们可以将最终对象传给 computed 属性。但是自从有了对象展开运算符，我们可以极大地简化写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//简写</span><br><span class="hljs-attr">computed</span>: &#123;<br>  ...<br>  <span class="hljs-comment">// 使用对象展开运算符将此对象混入到外部对象中</span><br>  ...<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">sex</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">address</span><br>  &#125;);<br>  ...<br>&#125;<br>  <br><span class="hljs-comment">//复杂写</span><br><span class="hljs-attr">computed</span>: &#123;<br>  ...<br>  <span class="hljs-comment">// 使用对象展开运算符将此对象混入到外部对象中</span><br>  ...<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">sex</span>;  <br>    &#125;,<br>    <span class="hljs-attr">address</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">address</span>;<br>    &#125;<br>  &#125;);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用mapState-使用模块化下"><a href="#使用mapState-使用模块化下" class="headerlink" title="使用mapState(使用模块化下)"></a>使用mapState(使用模块化下)</h5><ul><li><p>先引入 <code>import &#123;mapState&#125; from &quot;vuex&quot;</code>; 别忘记了花括号!</p></li><li><p>和没有使用模块化相比,对象当中多了一层寻找,也就是<code>对应的模块</code></p><ul><li><p>比如之前要寻找One.js当中的<code>sex</code>属性,我们只需要<code>this.$store.sex</code></p></li><li><p>而模块化后,我们要<code>this.$store.One.sex</code></p><ul><li>(注意,对应的模块的名称要和store文件夹下的index.js下书写的models对应)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">One</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./One.js&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>    <span class="hljs-attr">modules</span>:&#123;<br>        <span class="hljs-title class_">One</span><br>    &#125;<br>&#125;)<br><span class="hljs-comment">//获取One.js当中的sex属性</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">One</span>.<span class="hljs-property">sex</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 每次会传入一个参数,这个参数一般命名为state</span><br><span class="hljs-comment">//state等同于this.$store.state的内容!!!!!!!</span><br><span class="hljs-keyword">var</span> obb = <span class="hljs-title function_">mapState</span>(&#123;<br>自定义名称:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state === <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>);<span class="hljs-comment">//输出为true</span><br><span class="hljs-keyword">return</span> state.对应的模块.要获取的属性<br>&#125;,<br>    <span class="hljs-comment">//也可以简写</span><br>自定义名称:<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.对应的模块.要获取的属性<br>&#125;)<br><br><span class="hljs-comment">//返回值为一个对象</span><br><br>比如下方代码<br><span class="hljs-keyword">var</span> myObj = <span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-comment">//注意这里多了一层</span><br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">One</span>.<span class="hljs-property">sex</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myObj);<span class="hljs-comment">//&#123;sex: ƒ&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="结合对象展开符-使用模块化下-常用"><a href="#结合对象展开符-使用模块化下-常用" class="headerlink" title="结合对象展开符-使用模块化下(常用)"></a>结合对象展开符-使用模块化下(常用)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//简写</span><br><span class="hljs-attr">computed</span>: &#123;<br>  ...<br>  <span class="hljs-comment">// 使用对象展开运算符将此对象混入到外部对象中</span><br>  ...<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">One</span>.<span class="hljs-property">sex</span>,<br>    <span class="hljs-attr">address</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">One</span>.<span class="hljs-property">address</span><br>  &#125;);<br>  ...<br>&#125;<br>  <br><span class="hljs-comment">//复杂写</span><br><span class="hljs-attr">computed</span>: &#123;<br>  ...<br>  <span class="hljs-comment">// 使用对象展开运算符将此对象混入到外部对象中</span><br>  ...<span class="hljs-title function_">mapState</span>(&#123;<br>    <span class="hljs-attr">sex</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">One</span>.<span class="hljs-property">sex</span>;  <br>    &#125;,<br>    <span class="hljs-attr">address</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">One</span>.<span class="hljs-property">address</span>;<br>    &#125;<br>  &#125;);<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="使用mapGetters"><a href="#使用mapGetters" class="headerlink" title="使用mapGetters"></a>使用mapGetters</h5><h6 id="先来了解下getters"><a href="#先来了解下getters" class="headerlink" title="先来了解下getters"></a>先来了解下getters</h6><p>getters和state也是一样,getters读取如果是模块化了就要多嵌套一层,其他的使用都和state一样,只不过state字换成了</p><ul><li>先来看看<strong>getters当中的使用</strong>(可以看到,getters当中的方法会默认传入参数<code>state</code>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> state = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;100&quot;</span><br>&#125;<br><span class="hljs-keyword">var</span> getters = &#123;<br>    <span class="hljs-title function_">allInfo</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-comment">//返回值会作为allInfo的值,类似于computed的用法</span><br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">name</span>+state.<span class="hljs-property">age</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其他对象使用getters</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//未模块化</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">allInfo</span><br><span class="hljs-comment">//模块化后</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">getters</span>.<span class="hljs-property">One</span>.<span class="hljs-property">allInfo</span>;<span class="hljs-comment">//多了一层</span><br></code></pre></td></tr></table></figure><h6 id="使用mapGetters-用不用模块都是这个"><a href="#使用mapGetters-用不用模块都是这个" class="headerlink" title="使用mapGetters(用不用模块都是这个)"></a>使用mapGetters(用不用模块都是这个)</h6><ul><li><p>数组写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>([<br>      <span class="hljs-comment">// ...</span><br>      <span class="hljs-string">&#x27;allInfo&#x27;</span>,<br>      <span class="hljs-comment">// ...</span><br>    ])<br>  &#125;<br>&#125;<br><br>!!!!!!!!!代码等同于(注意,只是理解上的效果,实际在这getters写是错误的是不行的!)!!!!!!!!!!!!!!<br><span class="hljs-comment">// 注意,只是理解上的效果,实际在这getters写是错误的是不行的!</span><br><span class="hljs-comment">//注意,只是理解上的效果,实际在这getters写是错误的是不行的!</span><br><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>        <span class="hljs-attr">allInfo</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">getters</span>)&#123;<br>            <span class="hljs-keyword">return</span> getters.<span class="hljs-property">allInfo</span><br>        &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对象写法(<strong>如果你想将一个 getter 属性另取一个名字，使用对象形式</strong>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>        <span class="hljs-attr">allName</span>:<span class="hljs-string">&quot;allInfo&quot;</span><br>    &#125;)<br>  &#125;<br>&#125;<br>!!!!!!!!!代码等同于(注意,只是理解上的效果,实际在这getters写是错误的是不行的!)!!!!!!!!!!!!!!<br><span class="hljs-comment">// 注意,只是理解上的效果,实际在这getters写是错误的是不行的!</span><br><span class="hljs-comment">//注意,只是理解上的效果,实际在这getters写是错误的是不行的!</span><br><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-comment">// 使用对象展开运算符将 getter 混入 computed 对象中</span><br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>        <span class="hljs-attr">allName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">getters</span>)&#123;<br>            <span class="hljs-keyword">return</span> getters.<span class="hljs-property">allInfo</span><br>        &#125;<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="使用mapGetters如果在命名空间下要怎么使用mapGetters"><a href="#使用mapGetters如果在命名空间下要怎么使用mapGetters" class="headerlink" title="使用mapGetters如果在命名空间下要怎么使用mapGetters"></a>使用mapGetters如果在命名空间下要怎么使用mapGetters</h6><ul><li>只可以使用<code>mapGetters</code>对象的形式!</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">其他组件<span class="hljs-title class_">Index</span>.<span class="hljs-property">vue</span>内容<br><span class="hljs-comment">//使用mapGetters调用命名空间下的getters</span><br><span class="hljs-keyword">import</span> &#123; mapGetters &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>(&#123;<br>      <span class="hljs-attr">allInfo</span>:<span class="hljs-string">&quot;One/allInfo&quot;</span><br>    &#125;)<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">One</span>.<span class="hljs-property">js</span>内容<br><span class="hljs-keyword">var</span> state = &#123;...&#125;<br><span class="hljs-keyword">var</span> mutations = &#123;...&#125;<br><span class="hljs-keyword">var</span> actions = &#123;...&#125;<br><span class="hljs-keyword">var</span> getters = &#123;<br>    <span class="hljs-title function_">allInfo</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">name</span>+state.<span class="hljs-property">age</span>;<br>    &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">namespaced</span>:<span class="hljs-literal">true</span>,<br>    state,<br>    mutations,<br>    actions,<br>    getters<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="vue-admin-template当中明明使用了mapGetters-为什么不是对象的写法-而依旧是数组的写法"><a href="#vue-admin-template当中明明使用了mapGetters-为什么不是对象的写法-而依旧是数组的写法" class="headerlink" title="vue-admin-template当中明明使用了mapGetters,为什么不是对象的写法,而依旧是数组的写法"></a>vue-admin-template当中明明使用了mapGetters,为什么不是对象的写法,而依旧是数组的写法</h6><p>正常来说,你肯定会以为自vue-admin-template的getters是写在对应的模块上的,比如<code>One.js</code>的<code>getters</code>就写在<code>One.js</code>里面,<code>Two.js</code>的<code>getters</code>就写在<code>Two.js</code>里面,那你就错了~</p><p>vue-admin-template模板作者是将**每一个模块的getters都写在了主入口文件src\index.js当中!**其他模板根本就没有getters这个配置对象!</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205190844298.png" alt="每一个模块的getters都写在了主入口文件src\index.js当中!"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//getters.js内容</span><br><span class="hljs-keyword">const</span> getters = &#123;<br>  <span class="hljs-attr">sidebar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">app</span>.<span class="hljs-property">sidebar</span>,<br>  <span class="hljs-attr">device</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">app</span>.<span class="hljs-property">device</span>,<br>  <span class="hljs-attr">token</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">token</span>,<br>  <span class="hljs-attr">avatar</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">avatar</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">name</span>,<br>  <span class="hljs-comment">//用户角色</span><br>  <span class="hljs-attr">roles</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">roles</span>,<br>  <span class="hljs-comment">//最终用户可拥有的路由</span><br>  <span class="hljs-attr">currentAsyncRoutes</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">user</span>.<span class="hljs-property">currentAsyncRoutes</span>,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getters<br></code></pre></td></tr></table></figure><p>所以为什么vue-admin-template依旧可以使用mapGetters的数组写法而使用对象写法,<strong>因为人家getters绑定在了主入口文件index.js里面,并且这个index.js是没有开启命名空间的~</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">vue-admin-template其他文件组件使用mapGetters的方法<br><span class="hljs-attr">computed</span>: &#123;<br>    ...<span class="hljs-title function_">mapGetters</span>([<br>    <span class="hljs-string">&#x27;sidebar&#x27;</span>,<br>    <span class="hljs-string">&#x27;currentAsyncRoutes&#x27;</span><br>    ])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="路由组件和非路由组件"><a href="#路由组件和非路由组件" class="headerlink" title="路由组件和非路由组件"></a>路由组件和非路由组件</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><strong>非路由组件</strong>:定义在其他组件当中的,就叫非路由组件(不一定要注册在App.vue当中)</li><li>**路由组件:**定义,注册在路由当中的,就叫路由组件(路由组件的创建和其他非路由组件一样,只不过最后注册的时候不一样)</li><li>一般情况下<ul><li>非路由组件放在components文件夹当中</li><li>路由组件放在views或者pages文件夹当中</li></ul></li><li><strong>路由组件在切换的时候会被销毁,显示的时候重新创建(所以路由组件的生命周期会被重新执行)</strong></li></ul><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><ul><li>安装<ul><li><strong>vue2</strong>: npm install vue-router@3</li><li><strong>vue3</strong>: npm install vue-router</li></ul></li><li>src当中建立router文件夹,里面含有<strong>主入口</strong>文件<code>index.js</code></li></ul><p>index.js内容(src&#x2F;router&#x2F;index.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/src/views/Home&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        ...<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/home&quot;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>        &#125;,<br>        ....<br>        <span class="hljs-comment">//重定向</span><br>        <span class="hljs-comment">//浏览器输入http://localhost/就会自动跳转到http://localhost/home</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//   path:&quot;/&quot;,</span><br>        <span class="hljs-comment">//    redirect:&quot;/home&quot;</span><br>        <span class="hljs-comment">//&#125;</span><br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><code>main.js</code>当中配置对象添加index.js暴露出的内容</li></ul><p>main.js内容(项目主入口文件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/router&quot;</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>  router,<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><ul><li><strong>别忘记了在<code>App.vue</code>添加<code>&lt;router-view&gt;&lt;/router-view&gt;</code>哦,不然你就算创建了路由没有设置这个也没有用~</strong></li></ul><p>App.vue内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>Home.vue内容(src&#x2F;views&#x2F;Home.vue)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是Home<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Home&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><br></code></pre></td></tr></table></figure><p>地址栏输入<code>xxxx/home就会显示</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182100618.png"></p><h4 id="二级路由-三级路由-四级路由-n级路由"><a href="#二级路由-三级路由-四级路由-n级路由" class="headerlink" title="二级路由,三级路由,四级路由,,,n级路由"></a>二级路由,三级路由,四级路由,,,n级路由</h4><p>关键在于配置对象当中<code>children:[]</code>,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">routes</span>:[<br><span class="hljs-comment">//一级路由</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/home&quot;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span>,<br><span class="hljs-comment">//二级路由</span><br><span class="hljs-attr">children</span>:[<br>&#123;<br><span class="hljs-comment">// path:&quot;/home/messsage&quot;或者下面这一行</span><br><span class="hljs-attr">path</span>:<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-comment">//注意: 不需要在写 &#x27;/&#x27;,</span><br>                <span class="hljs-attr">component</span>:<span class="hljs-title class_">Message</span>,<br>                <span class="hljs-comment">//三级路由</span><br>                <span class="hljs-attr">children</span>:[<br>                    &#123;<br>                        <span class="hljs-comment">// path:&quot;/home/messsage/info&quot;或者下面这一行</span><br>                        <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;info&quot;</span>,<br>                        <span class="hljs-attr">component</span>:<span class="hljs-title class_">Info</span><br>                    &#125;<br>                ]<br>&#125;<br>]<br>&#125;,<br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/about&quot;</span>,<br><span class="hljs-attr">component</span>:<span class="hljs-title class_">About</span><br>&#125;,<br><br><span class="hljs-comment">//重定向,默认路由</span><br>&#123;<br><span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/&quot;</span>,<br><span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;/home&quot;</span><br>&#125;<br>]<br></code></pre></td></tr></table></figure><h4 id="路由链接和路由切换标签-就是单击后切换组件-要实现这个效果必须要用这个功能"><a href="#路由链接和路由切换标签-就是单击后切换组件-要实现这个效果必须要用这个功能" class="headerlink" title="路由链接和路由切换标签(就是单击后切换组件,要实现这个效果必须要用这个功能)"></a>路由链接和路由切换标签(就是单击后切换组件,要实现这个效果必须要用这个功能)</h4><p><code>&lt;router-link to=&quot;切换的路由路径&quot;&gt;文本&lt;/router-link&gt; </code>用户点击的链接,经过vue编译后会生成一个超链接,会跳转到<code>to</code>内容</p><p><strong>例子:</strong> 单击标签就会跳转到<code>/food</code>路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//路由表</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/home&quot;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-attr">redirect</span>:<span class="hljs-string">&quot;/home&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/food&quot;</span>,<br>            <span class="hljs-comment">// component:() =&gt; import(&quot;@/views/Food&quot;),</span><br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Food</span><br>        &#125;<br>    ]<br>&#125;)<br><br><br><span class="hljs-comment">//Home.vue</span><br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/food&quot;</span>&gt;</span>用户点击的链接 <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span> </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <br>&lt;/template&gt;<br><br><span class="hljs-comment">//Food.vue</span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Food<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Food&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="声明式导航和编程式导航"><a href="#声明式导航和编程式导航" class="headerlink" title="声明式导航和编程式导航"></a>声明式导航和编程式导航</h4><ul><li><p><strong>声明式导航:</strong> <code>&lt;router-link to=&quot;路径&quot;&gt;&lt;/router-link&gt;</code></p></li><li><p><strong>编程式导航:</strong> 运用<code>this.$router.push</code> 或者 <code>this.$router.replace</code>等实现跳转</p></li><li><p>声明式导航占用资源多,编程式导航占用资源少,所以推荐使用编程式导航</p></li><li><p><strong>this.$router代表路由器</strong></p><ul><li><p>router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，他包含了所有的路由包含了许多关键的对象和属性。</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182130028.png" alt="输出this.$router"></p></li><li><p>this.$router一些常见的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(path): 相当于点击路由链接(可以返回到当前路由界面)<br><span class="hljs-number">2.</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">replace</span>(path): 用新路由替换当前路由(不可以返回到当前路由界面)<br><span class="hljs-number">3.</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">back</span>(): 请求(返回)上一个记录路由<br><span class="hljs-number">4.</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>): 请求(返回)上一个记录路由<br><span class="hljs-number">5.</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>): 请求下一个记录路由<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>this.$route代表当前路由对象</strong></p><ul><li><p>$route是当前激活的路由,包含了当前激活的路由状态信息,它包含了当前URL解析得到的信息.</p></li><li><p>在<code>http://localhost/home</code>下输出<code>this.$route</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182131472.png" alt="输出this.$route"></p></li></ul></li></ul><h5 id="使用编程式导航"><a href="#使用编程式导航" class="headerlink" title="使用编程式导航"></a>使用编程式导航</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$router.push(&#x27;/food&#x27;)&quot;</span>&gt;</span>跳转到food<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/div&gt;<br><br><span class="hljs-comment">//等同于</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Home<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/food&quot;</span>&gt;</span>跳转到food<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="路由传参props和query和params"><a href="#路由传参props和query和params" class="headerlink" title="路由传参props和query和params"></a>路由传参props和query和params</h4><ul><li>在不同路由当中,可以存储一定的参数信息,比如下面这张图,就可以看到<code>/home</code>这个路由对象里面有很多参数,我们这里关注<code>query</code>和<code>params</code></li><li><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182131472.png" alt="输出this.$route"></li></ul><h5 id="query方式传参"><a href="#query方式传参" class="headerlink" title="query方式传参"></a>query方式传参</h5><ol><li><p>直接在路径后面接上去,就如同发送ajax请求的时候后面携带的?aa&#x3D;bb&amp;cc&#x3D;dd一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//比如声明式导航跳转到/home的时候带了参数</span><br>&lt;router-link :to=<span class="hljs-string">&quot;`/home/message/msgdetail?id=$&#123;ms.id&#125;&amp;msg=$&#123;ms.msg&#125;`&quot;</span>&gt;&#123;&#123;ms.<span class="hljs-property">msg</span>&#125;&#125;&lt;/router-link&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/food?name=茄子&amp;weight=1&quot;</span>&gt;</span>跳转到food并且携带query参数<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span></span><br><span class="hljs-comment">//编程式导航</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$router.push(&#x27;/food?name=茄子&amp;weight=1&#x27;)&quot;</span>&gt;</span>跳转到food并且携带query参<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>使用对象的形式传递query参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明式导航</span><br>&lt;router-link :to=<span class="hljs-string">&quot;&#123;path:&#x27;/food&#x27;,query:&#123;name:&#x27;茄子&#x27;,weight:1&#125;&#125;&quot;</span>&gt;跳转到food并且携带query参数&lt;/router-link&gt;<br><span class="hljs-comment">//编程式导航</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$router.push(&#123;path:&#x27;/food&#x27;,query:&#123;name:&#x27;茄子&#x27;,weight:1&#125;&#125;)&quot;</span>&gt;</span>跳转到food并且携带query参数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><p>携带query参数后打印输出<code>food</code>的<code>this.$route</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182149645.png" alt="携带query参数后打印输出`food`的`this.$route`"></p><h5 id="params方式传参"><a href="#params方式传参" class="headerlink" title="params方式传参"></a>params方式传参</h5><p><strong>重要,重要!很重要!</strong></p><blockquote><p>必须要在路由当中提前占位,否者就是跳转到别的路由了!!!!!!!!!!!!!!!!!!!!!!!!!!!</p></blockquote><blockquote><p>特别注意：路由携带<a href="https://so.csdn.net/so/search?q=params&spm=1001.2101.3001.7020">params</a>参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote><blockquote><p>path: “&#x2F;food&#x2F;:foodname&#x2F;:foodweight”,如果这样子填写了,后面访问这个路由就必须要添加这二个参数,比如&#x2F;food&#x2F;vegetable&#x2F;1</p><p>不可以少写也不可以漏写,否者访问不了参数</p><p>如果需要想写想不写,就可以在占位后面添加一个”?”,比如path: “&#x2F;food&#x2F;:foodname?&#x2F;:foodweight?”就代表这二个参数可写可不写,输入&#x2F;food&#x2F;vegetable或者&#x2F;food或者&#x2F;food&#x2F;vegetable&#x2F;1都可以跳转到指定路由</p></blockquote><p><strong>路由占位和name配置</strong></p><p>占位格式: <code>:key值</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        ...<br>        &#123;<br>            <span class="hljs-comment">//使用params参数必须要写name,不可以使用path了!!!!</span><br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-comment">//路由占位</span><br>            <span class="hljs-comment">//对应路由组件的this.$route当中params对象的key值</span><br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/food/:foodname/:foodweight&quot;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Food</span>,<br>        &#125;<br>        ...<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li><p>格式就类似于<code>/food/茄子/1</code>这种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 声明式导航</span><br>&lt;router-link to=<span class="hljs-string">&quot;/food/qiezi/1/&quot;</span>&gt;跳转到food并且携带params参数&lt;/router-link&gt;<br><br><span class="hljs-comment">// 编程式导航  注意这里是name</span><br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$router.push(&#123;name:&#x27;food&#x27;,params:&#123;foodname:&#x27;qiezi&#x27;,foodweight:1&#125;&#125;)&quot;</span>&gt;</span>跳转到food并且携带params参数<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182206798.png" alt="携带params参数后打印输出`food`的`this.$route`"></p><h5 id="路由当中的meta"><a href="#路由当中的meta" class="headerlink" title="路由当中的meta"></a>路由当中的meta</h5><p>我们可以看到,输出<code>this.$route</code>的时候,除了可以看到<code>query</code> <code>params</code>,还可以看到<code>meta</code></p><blockquote><p>给每个路由添加一个自定义的meta对象，在meta对象中可以设置一些状态，来进行一些操作。经常用它来做登录校验</p></blockquote><p><strong>设置meta直接在注册路由组件的时候设置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Home&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>:[<br>        &#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/food/:foodname/:foodweight&quot;</span>,<br>            <span class="hljs-attr">component</span>:<span class="hljs-title class_">Food</span>,<br>            <span class="hljs-comment">//注册meta</span><br>            <span class="hljs-attr">meta</span>:&#123;<br>                <span class="hljs-attr">isShow</span>:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>后面想要读取也很简单,就在当前路由组件输出<code>this.$route.meta</code>即可获取</strong></p><h4 id="路由props配置对象配置"><a href="#路由props配置对象配置" class="headerlink" title="路由props配置对象配置"></a>路由props配置对象配置</h4><p>使用路由props配置对象,可以使得组件可以更加方便的接收参数</p><h5 id="props配置对象传入对象时-死数据"><a href="#props配置对象传入对象时-死数据" class="headerlink" title="props配置对象传入对象时(死数据)"></a>props配置对象传入对象时(死数据)</h5><p><strong>src\index.js配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/food&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Food</span>,<br>            <span class="hljs-comment">//props为一个对象</span><br>            <span class="hljs-attr">props</span>:&#123;<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>                <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>                <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;100&#x27;</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><strong>Food.vue接收</strong></p><p>对象当中有什么字段,Food.vue就使用props配置对象接收什么字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Food<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Food&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//接收路由src\index.js为food配置的props参数</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="props配置对象传入一个布尔值"><a href="#props配置对象传入一个布尔值" class="headerlink" title="props配置对象传入一个布尔值"></a>props配置对象传入一个布尔值</h5><p>布尔值为true，<strong>则把路由收到的所有params参数通过props传给对应组件</strong></p><p><strong>src\index.js配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/food/:foodname?/:foodweight?&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Food</span>,<br>            <span class="hljs-comment">//props为一个布尔值,且为true</span><br>            <span class="hljs-attr">props</span>:<span class="hljs-literal">true</span><br>        &#125;<br>    ]<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><strong>Food.vue接收</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Food<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Food&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//接收food当中的params参数</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//字段必须要为路由当中占位的字段一样!!!</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;foodname&quot;</span>,<span class="hljs-string">&quot;foodweight&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="props配置对象传入一个函数"><a href="#props配置对象传入一个函数" class="headerlink" title="props配置对象传入一个函数"></a>props配置对象传入一个函数</h5><p>该函数返回的对象中的每一组key-value都会通过props传给对应组件</p><p><strong>src\index.js配置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>);<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Food</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/views/Food&quot;</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/food/:foodname?/:foodweight?&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Food</span>,<br>            <span class="hljs-comment">//props为一个布尔值,且为true</span><br>            <span class="hljs-comment">//$router为默认传入的一个参数(名字随意)</span><br>            <span class="hljs-comment">//之所以取这个是因为这个参数代表着当前路由组件</span><br>            <span class="hljs-comment">//this.$route === $route</span><br>            <span class="hljs-attr">props</span>:($route)&#123;<br>            <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-string">&#x27;蔬菜名称&#x27;</span>:$route.<span class="hljs-property">params</span>.<span class="hljs-property">foodname</span>,<br>                    <span class="hljs-string">&#x27;蔬菜重量&#x27;</span>:$route.<span class="hljs-property">params</span>.<span class="hljs-property">foodweight</span>,<br>                    <span class="hljs-string">&#x27;谁吃&#x27;</span>:$route.<span class="hljs-property">query</span>.<span class="hljs-property">user</span><br>                &#125;<br>        &#125;<br>        &#125;<br>    ]<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><strong>Food.vue接收</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是Food<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Food&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//字段必须要为路由当中返回的字段名称一样!!!</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;蔬菜名称&quot;</span>,<span class="hljs-string">&quot;蔬菜重量&quot;</span>,<span class="hljs-string">&quot;谁吃&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>浏览器访问<a href="http://localhost:8080/#/food/vegetable/1005?user=%E6%9D%8E%E7%99%BD">http://localhost:8080/#/food/vegetable/1005?user=李白</a></p></blockquote><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205190939051.png" alt="浏览器访问后"></p><p>其他</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205190940088.png" alt="其他"></p><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><ul><li><strong>全局前置守卫</strong>: 进入任意一个路由前,必须要经过全局前置守卫(进入学校,需要经过保安审批~)</li><li><strong>全局解析守卫</strong>:</li><li><strong>全局后置钩子</strong>:</li><li><strong>路由独享守卫</strong>:</li><li><strong>组件内的守卫(不经常使用)</strong></li></ul><h5 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h5><p>要使用全局前置守卫,我们就需要使用到由VueRouter通过new生成的实例化对象,所以需要改改<code>store\index.js</code>,其他不用动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">store\index.<span class="hljs-property">js</span><br><span class="hljs-comment">//本来是</span><br><span class="hljs-comment">//export default new VueRouter(&#123;...&#125;);</span><br><br><span class="hljs-comment">//需要改为</span><br><span class="hljs-keyword">const</span> router =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;...&#125;);<br><span class="hljs-comment">//全局前置守卫</span><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br>    ...<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br></code></pre></td></tr></table></figure><p><strong>beforeEach回调参数</strong></p><ul><li><strong>to:</strong> 是要去的某一个路由对象信息</li><li>**from:**是来自的哪里的信息</li><li><strong>next</strong>控制跳转<ul><li>中断当前路由next(false); </li><li>跳转到指定路由next(“&#x2F;“) 或者 next({path:”&#x2F;“}),会导致再次执行beforeEach进行判断</li><li>next();放行,不会再次经过beforeEach</li><li><a href="https://dreamlove.top/2022/05/16/%E5%89%8D%E7%AB%AF/vue%E5%BD%93%E4%B8%ADaddRoutes%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E7%99%BD%E5%B1%8F%E8%A7%A3%E5%86%B3%E5%92%8Cnext(),next()%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/">next()和next(“&#x2F;“)等其他next的区别可以看看这个文章</a></li></ul></li></ul><p><strong>beforEach例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//从sessionStorage获取token</span><br>    <span class="hljs-keyword">let</span> token = sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>    <span class="hljs-comment">//如果目的地址不为&#x27;/login&#x27;并且token不存在</span><br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> != <span class="hljs-string">&#x27;/login&#x27;</span> &amp;&amp; !token) &#123;<br>        <span class="hljs-comment">//跳转到&#x27;/login&#x27;</span><br>        <span class="hljs-title function_">next</span>(&#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">//目的地址为&#x27;/login&#x27;并且token存在</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//如果目的地址为&#x27;/login&#x27;并且token存在</span><br>        <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> == <span class="hljs-string">&#x27;/login&#x27;</span> &amp;&amp; token) &#123;<br>            <span class="hljs-comment">//跳转到&#x27;/dashboard&#x27;</span><br>            <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/dashboard&#x27;</span>)<br>        &#125; <br>        <span class="hljs-comment">//目的地址不为为&#x27;/login&#x27;并且token存在</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_">next</span>()<br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h5><p>前面的是全局前置守卫(也就是大老板router),这个是路由独享守卫,也就是属性每一个路由组件的,在进入路由组件之前进行判断是否符合条件,符合条件才让你走</p><p><strong>注意:</strong></p><p>beforeEnter 守卫 只在进入路由时触发，不会在 params、query 或 hash 改变时触发。例如，从 <code>/users/2</code> 进入到 <code>/users/3</code> 或者从 <code>/users/2#info</code> 进入到 <code>/users/2#projects</code>是不会触发的,它们只有在 <strong>从一个不同的 路由导航时，才会被触发</strong>。</p><p><strong>基本使用</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">routes</span>: [<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/home/:id?&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;/home&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;food&quot;</span>,<br>            <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/food/:foodname?/:foodweight?&quot;</span>,<br>            <span class="hljs-attr">component</span>: <span class="hljs-title class_">Food</span>,<br>            <span class="hljs-attr">meta</span>: &#123;<br>                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-comment">//从http://localhost:8080/#/home?q=libai到http://localhost:8080/#/food</span><br>            <span class="hljs-comment">//会自动帮我们分离参数到对应的路由对象当中,比如这个携带了query,就帮我们把参数写到了query对象里面,并且to.path依旧为/home</span><br>            <span class="hljs-comment">//从http://localhost:8080/#/home/100到http://localhost:8080/#/food</span><br>            <span class="hljs-comment">//params依旧也会分离参数到params对象里面,不过to.path不会改变,依旧为/home/100</span><br>            <span class="hljs-attr">beforeEnter</span>:<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">from</span>.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/home&#x27;</span>)&#123;<br>                    <span class="hljs-title function_">next</span>();<span class="hljs-comment">//放行</span><br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-title function_">next</span>(<span class="hljs-string">&quot;/home&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    ]<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p><strong>query参数</strong>携带在路径后面不会影响到to.path或者from.path</p><p><strong>params参数</strong>携带在路径后面会影响到to.path或者from.path</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">从<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080/#/home?q=libai到http://localhost:8080/#/food</span><br>会自动帮我们分离参数到对应的路由对象当中,比如这个携带了query,就帮我们把参数写到了query对象里面,并且to.<span class="hljs-property">path</span>依旧为/home<br>从<span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080/#/home/100到http://localhost:8080/#/food</span><br>params依旧也会分离参数到params对象里面,不过to.<span class="hljs-property">path</span>不会改变,依旧为/home/<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>其他</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205182207217.png" alt="路由组件和非路由组件的最大区别"></p><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><p><a href="https://blog.csdn.net/weixin_42881768/article/details/105747563">这个大佬讲的太好了…看他就足够了</a></p><p>大佬绘制的图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205191017822.png" alt="大佬绘制的图"></p><h4 id="大佬说的太好了-我自己总结下自己"><a href="#大佬说的太好了-我自己总结下自己" class="headerlink" title="大佬说的太好了,我自己总结下自己~"></a>大佬说的太好了,我自己总结下自己~</h4><ul><li><p><code>data,methods,计算属性,event/watch事件回调</code>在created的时候就已经完成了初始化,但是dom树没有完成</p></li><li><p>然后到了<code>beforeMount</code> 这里的dom树并不是真实的dom,而是虚拟的(所以你获取节点返回的是undefined)</p><ul><li>比如this.$refs.a ;&#x2F;&#x2F;返回undefined</li></ul></li><li><p>然后到了<code>mounted</code>这里的dom已经生成,可以获取到dom节点了,可以对dom进行操作了</p><ul><li><strong>mounted 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 mounted 内部使用 vm.$nextTick</strong></li><li><del>发送请求获取数据在<code>mounted</code>生命周期当中发送,<a href="https://www.bilibili.com/read/cv14696847">具体可以看看这篇文章</a></del></li><li><del>理解可能有误,删除-至于为什么需要在<code>mounted</code>当中发送,而不再<code>created</code>发送,这个博主总结的很好,<code>created</code>的时候,虽然数据和事件依旧完成了初始化操作,但是假如因为网络延迟发送的数据直到<code>mounted</code>生命周期完成后(也就是DOM生成后)才获取到,那么有什么意义呢(<strong>相当于我建房子的时候你没给我砖块,我建完了你才给我砖块去填充,没意义啊</strong>)</del></li><li>到底在哪里发送请求获取数据看了很多,说应该放在created当中,因为此时dom还没有渲染完成,这个时候发送数据就可以获取到数据用于构建dom,而说应该放mounted的说放在created当中会造成数据没有放回造成白屏,然后created的人又反驳说请求是异步的,怎么会白屏…还有人说created会产生分支,而mounted不会</li></ul><p>分支</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">//放在created<br><span class="hljs-attribute">created</span> <span class="hljs-operator">=</span>&gt; API请求 <span class="hljs-operator">=</span>&gt; 获取数据 <span class="hljs-operator">=</span>&gt; 组件重新渲染<br><br>           <span class="hljs-operator">=</span>&gt; mounted <span class="hljs-operator">=</span>&gt; 组件首次渲染<br>//放在mounted<br><span class="hljs-attribute">created</span> <span class="hljs-operator">=</span>&gt; mounted <span class="hljs-operator">=</span>&gt;  组件首次渲染 <span class="hljs-operator">=</span>&gt; API请求 <span class="hljs-operator">=</span>&gt; 获取到数据 <span class="hljs-operator">=</span>&gt; 组件重新渲染<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="其他一些问题"><a href="#其他一些问题" class="headerlink" title="其他一些问题"></a>其他一些问题</h3><p><strong>v.for为什么要用key</strong></p><p>简单点说就是可以在后期dom发生变化的时候准确识别元素并更新,<a href="https://www.cnblogs.com/mmsmd/p/15214100.html">具体可以看看这位博主写的</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue后台的一个项目遇到的一些问题和解决办法的记录</title>
    <link href="/2022/05/21/%E5%89%8D%E7%AB%AF/vue%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/21/%E5%89%8D%E7%AB%AF/vue%E5%90%8E%E5%8F%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="vue使用echarts报错Error-in-mounted-hook-“TypeError-this-dom-getContext-is-not-a-function”"><a href="#vue使用echarts报错Error-in-mounted-hook-“TypeError-this-dom-getContext-is-not-a-function”" class="headerlink" title="vue使用echarts报错Error in mounted hook: “TypeError: this.dom.getContext is not a function”"></a>vue使用echarts报错Error in mounted hook: “TypeError: this.dom.getContext is not a function”</h4><ul><li>解决<ul><li>一开始是this.$refs.dom获取节点的,后面使用在<code>&lt;el-row&gt;</code>标签上就不可以,所以如果使用this.$refs进行echarts的初始化操作会报错,就<strong>使用原生dom获取节点后初始化</strong>即可</li></ul></li></ul><h4 id="elementUI-日期选择器在vue-admin中设置中文显示"><a href="#elementUI-日期选择器在vue-admin中设置中文显示" class="headerlink" title="elementUI 日期选择器在vue-admin中设置中文显示"></a>elementUI 日期选择器在vue-admin中设置中文显示</h4><ul><li><p><strong>方法</strong></p><ul><li><p>main.js文件当中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// import locale from &#x27;element-ui/lib/locale/lang/en&#x27; // lang i18n 注释掉</span><br><span class="hljs-keyword">import</span> locale <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span> <span class="hljs-comment">//添加</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>, &#123; locale &#125;);<span class="hljs-comment">//添加</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>设置前</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205142023476.png"></p></li><li><p>设置后</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205142025700.png"></p></li></ul><h4 id="moment日期插件输出格式错误"><a href="#moment日期插件输出格式错误" class="headerlink" title="moment日期插件输出格式错误"></a>moment日期插件输出格式错误</h4><ul><li>之前输出<code>console.log(moment().format(&quot;yyyy-MM-dd&quot;));</code></li><li>原来是字母问题,改为大写就可以了</li><li>之后改为<code>console.log(moment().format(&quot;YYYY-MM-DD&quot;));</code></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205142039084.png"></p><h4 id="moment获取本周-本月"><a href="#moment获取本周-本月" class="headerlink" title="moment获取本周-本月"></a>moment获取本周-本月</h4><ul><li>获取本周<ul><li><code>moment().day(1)</code>即可设置为星期一</li><li><code>moment().day(1).format(&#39;YYYY-MM-DD&#39;) </code>;&#x2F;&#x2F;输出本周星期一的日期也就是2022&#x2F;05&#x2F;09</li><li><code>moment().day(7)</code>即可设置为星期天</li><li><code>moment().day(7).format(&quot;YYYY-MM-DD&quot;)</code>;&#x2F;&#x2F;输出本周星期一的日期也就是2022&#x2F;05&#x2F;15</li></ul></li><li>获取本月1日<ul><li><code>moment().startOf(&#39;month&#39;)</code>即可获取本月一日</li><li><code>moment().startOf(&#39;month&#39;).format(&quot;YYYY-MM-DD&quot;)</code>&#x2F;&#x2F;输出本月1日也就是 2022-05-01</li></ul></li><li>获取本月结尾<ul><li><code>moment().endOf(&#39;month&#39;)</code>即可获取本月最后一天的日期</li><li><code>moment().endOf(&#39;month&#39;).format(&quot;YYYY-MM-DD&quot;)</code>&#x2F;&#x2F;输出本月最后一天,也就是 2022-05-31</li></ul></li><li>获取本日<ul><li><code>moment().startOf(&#39;day&#39;)</code></li></ul></li></ul><h4 id="明明组件是复用的-为什么echarts图表只显示一个"><a href="#明明组件是复用的-为什么echarts图表只显示一个" class="headerlink" title="明明组件是复用的,为什么echarts图表只显示一个?"></a>明明组件是复用的,为什么echarts图表只显示一个?</h4><ul><li>如图,只有左边有,为什么会这样子?</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151026036.png"></p><ul><li><p><strong>解决</strong></p><ul><li>原来初始化的时候获取dom是<code>document.querySelector(xxxx)</code>改为<code>this.$refs.xxxx</code>即可</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151028728.png" alt="如图"></p><ul><li><p>成功解决</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151028128.png" alt="成功解决"></p></li></ul></li></ul><h4 id="支付的轮询"><a href="#支付的轮询" class="headerlink" title="支付的轮询"></a>支付的轮询</h4><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//开始轮询</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">async</span> () =&gt; &#123;<br><span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$API</span>.<span class="hljs-title function_">queryPayStatus</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">orderNo</span>)<br><span class="hljs-keyword">if</span>(result.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>)&#123;<br>  <span class="hljs-comment">//说明支付成功了</span><br>  <span class="hljs-comment">//清除定时器</span><br>  <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>);<br>  <span class="hljs-comment">//置空timer</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">//更改支付状态记录表  </span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">payStatu</span> = result.<span class="hljs-property">code</span>;<br>  <span class="hljs-comment">//关闭信息弹窗</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$msgbox</span>.<span class="hljs-title function_">close</span>();<br>  <span class="hljs-comment">//跳转路由</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;/paysuccess&quot;</span>);<br>&#125;<br>&#125;, <span class="hljs-number">2000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>流程图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205170917227.png" alt="轮询支付流程图"></p><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><ul><li>set构造函数去重</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-keyword">var</span> tempArray = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>];<br><span class="hljs-comment">//转化为set</span><br><span class="hljs-keyword">var</span> tempSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(tempArray);<br><span class="hljs-comment">//set转换回来数组 - 方法1</span><br><span class="hljs-keyword">var</span> tempAfterArray1 = [...tempSet];<br><span class="hljs-comment">///set转换回来数组 - 方法2</span><br><span class="hljs-keyword">var</span> tempAfterArray2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(tempSet);<br><span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tempAfterArray1);<br><span class="hljs-comment">//[1, 2, 3, 4, 5, 6, 7]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tempAfterArray2);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ul><li>普通方法(这里就说一个~)</li></ul><p><code>filter</code>和<code>indexOf</code>结合,filter为真的时候才会返回,indexOf如果找到第一个会停止寻找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tempArray = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><br><span class="hljs-comment">//item为当前遍历的项</span><br><span class="hljs-comment">//index为当前遍历项的索引</span><br><span class="hljs-keyword">var</span> a = tempArray.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> tempArray.<span class="hljs-title function_">indexOf</span>(item) == index;<br>&#125;)<br><span class="hljs-comment">//[1, 2, 5, 6, 7]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br><span class="hljs-comment">//遍历过程</span><br>item = <span class="hljs-number">1</span>,index=<span class="hljs-number">0</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">0</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> == <span class="hljs-number">0</span> ;<span class="hljs-comment">//为true,存储&#x27;1&#x27;</span><br><br>item = <span class="hljs-number">2</span>,index=<span class="hljs-number">1</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span> == <span class="hljs-number">1</span> ;<span class="hljs-comment">//为true,存储&#x27;2&#x27;</span><br><br><br>item = <span class="hljs-number">5</span>,index=<span class="hljs-number">2</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> == <span class="hljs-number">2</span> ;<span class="hljs-comment">//为true,存储&#x27;5&#x27;</span><br><br>item = <span class="hljs-number">5</span>,index=<span class="hljs-number">3</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">2</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> == <span class="hljs-number">3</span> ;<span class="hljs-comment">//为false,不存储</span><br><br><br>item = <span class="hljs-number">6</span>,index=<span class="hljs-number">4</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">4</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span> == <span class="hljs-number">4</span> ;<span class="hljs-comment">//为true,存储&#x27;6&#x27;</span><br><br>item = <span class="hljs-number">6</span>,index=<span class="hljs-number">5</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">4</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span> == <span class="hljs-number">5</span> ;<span class="hljs-comment">//为false,不存储</span><br><br>item = <span class="hljs-number">7</span>,index=<span class="hljs-number">6</span><br>tempArray.<span class="hljs-title function_">indexOf</span>(item) 返回 <span class="hljs-number">6</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">6</span> == <span class="hljs-number">6</span> ;<span class="hljs-comment">//为true,存储&#x27;7&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="element-ui当中-lt-el-table-gt-lt-x2F-el-table-gt-索引自定义"><a href="#element-ui当中-lt-el-table-gt-lt-x2F-el-table-gt-索引自定义" class="headerlink" title="element-ui当中&lt;el-table&gt;&lt;&#x2F;el-table&gt;索引自定义"></a>element-ui当中&lt;el-table&gt;&lt;&#x2F;el-table&gt;索引自定义</h4><p>关键在于为<code>type=&#39;index&#39;</code>的绑定<code>:index=&quot;自定义函数&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;objects&quot;</span> <span class="hljs-attr">border</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;80&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;index&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">:index</span>=<span class="hljs-string">&quot;indexMethod&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;索引&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;prop&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;工作地址&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">objects</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">ID</span>: <span class="hljs-string">&quot;1&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">JobTitle</span>: <span class="hljs-string">&quot;Front Desk Coordinator&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">EmailAddress</span>: <span class="hljs-string">&quot;Sofie_Jennson149@deons.tech&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">FirstNameLastName</span>: <span class="hljs-string">&quot;Sofie Jennson&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">ID</span>: <span class="hljs-string">&quot;2&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">JobTitle</span>: <span class="hljs-string">&quot;Global Logistics Supervisor&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">EmailAddress</span>: <span class="hljs-string">&quot;Wade_Gallacher1821@elnee.tech&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">FirstNameLastName</span>: <span class="hljs-string">&quot;Wade Gallacher&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      ],</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//自定义索引,转化为0001,0002,0003的这种</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">indexMethod</span>(<span class="hljs-params">index</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//转字符串</span></span></span><br><span class="language-javascript"><span class="language-xml">      index = index.<span class="hljs-title function_">toString</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">while</span> (index.<span class="hljs-property">length</span> &lt; <span class="hljs-number">4</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        index = <span class="hljs-string">&quot;0&quot;</span> + index;</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> index;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205210926510.png" alt="element-ui当中&lt;el-table&gt;&lt;/el-table&gt;索引自定义"></p><h4 id="el-table-column使用插槽并将数据绑定在v-model为什么可以实现双向绑定影响到原来数据"><a href="#el-table-column使用插槽并将数据绑定在v-model为什么可以实现双向绑定影响到原来数据" class="headerlink" title="el-table-column使用插槽并将数据绑定在v-model为什么可以实现双向绑定影响到原来数据"></a>el-table-column使用插槽并将数据绑定在v-model为什么可以实现双向绑定影响到原来数据</h4><p><strong>当初学的时候很懵懵懂懂,觉得既然把数据传递给了组件去显示,那应该影响不到原来的数据呢,为什么还会影响到原来数据</strong></p><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;attrForm&quot;</span> <span class="hljs-attr">border</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">&quot;EmailAddress&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;邮箱地址&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-comment">&lt;!-- 为什么可以实现用户输入后data当中的数据也改变? --&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;row.EmailAddress&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">attrForm</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">ID</span>: <span class="hljs-string">&quot;1&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">JobTitle</span>: <span class="hljs-string">&quot;Front Desk Coordinator&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">EmailAddress</span>: <span class="hljs-string">&quot;Sofie_Jennson149@deons.tech&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">FirstNameLastName</span>: <span class="hljs-string">&quot;Sofie Jennson&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">ID</span>: <span class="hljs-string">&quot;2&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">JobTitle</span>: <span class="hljs-string">&quot;Global Logistics Supervisor&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">EmailAddress</span>: <span class="hljs-string">&quot;Wade_Gallacher1821@elnee.tech&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-title class_">FirstNameLastName</span>: <span class="hljs-string">&quot;Wade Gallacher&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      ],</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205210940806.png" alt="当初的疑问"></p><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><p>因为element-ui当中,是按照列来传递数据的,也就是当<code>element-ui</code>遍历<code>attrForm</code>的时候,会将当前遍历项目传递给每一个<code>&lt;el-table-column&gt;</code>,所以为什么输入框当中输入的数据会影响到data</p><ul><li>首先是v-model的原因</li><li>其次就是传递的是引用数据类型<del>使用指向同一个数据</del></li></ul><p>差不多这样子图过程吧</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205071135167.png"></p><h4 id="数组哪些方法的使用不会影响数组的响应式"><a href="#数组哪些方法的使用不会影响数组的响应式" class="headerlink" title="数组哪些方法的使用不会影响数组的响应式?"></a>数组哪些方法的使用不会影响数组的响应式?</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">push</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">pop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">shift</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">unshift</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">splice</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">sort</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">reverse</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>再加上一个整体替换也不会</p><p>比如<code>data</code>当中的<code>a</code>数组是响应式的,整体替换,<code>this.a</code> &#x3D; b;(b也为一个数组),也不会影响数组的响应式</p><h4 id="获取输入框的焦点"><a href="#获取输入框的焦点" class="headerlink" title="获取输入框的焦点"></a>获取输入框的焦点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">xxx</span>.<span class="hljs-title function_">focus</span>();获取焦点<br></code></pre></td></tr></table></figure><h4 id="el-dialog的显示隐藏的控制"><a href="#el-dialog的显示隐藏的控制" class="headerlink" title="el-dialog的显示隐藏的控制"></a>el-dialog的显示隐藏的控制</h4><p><code>&lt;el-dialog&gt;&lt;/el-dialog&gt;</code>是支持.sync的写法的,比如<code>&lt;el-dialog :visible.sync=&quot;xxxx&quot;&gt;&lt;/el-dialog&gt;</code><br>    由这个<code>xxx</code>来决定这个<code>dialog</code>是否是显示还是隐藏</p><h4 id="el-form当中的el-form-item占据一行问题"><a href="#el-form当中的el-form-item占据一行问题" class="headerlink" title="el-form当中的el-form-item占据一行问题"></a>el-form当中的el-form-item占据一行问题</h4><p><code>el-form-item</code>添加下属性<code>label-width:&quot;80px&quot;</code>或者80px自己改为其他的即可</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211003513.png" alt="前后效果"></p><p>顺带一提</p><p><code>&lt;el-input&gt;</code>改为输入框设置<code>type=&quot;textarea&quot;</code>再添加下<code>row=&quot;4&quot;即可多行输入</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211004107.png" alt="type=&quot;textarea&quot;"></p><h4 id="可以使用混入mixin解决export-default过长"><a href="#可以使用混入mixin解决export-default过长" class="headerlink" title="可以使用混入mixin解决export default过长"></a>可以使用混入mixin解决export default过长</h4><p>混入,说简单就是将一个东西和另外一个东西混合在一起,注意是混合,不是替换!,比如我在一个文件里面有方法A,我混入在另外一个文件夹里面,那么另外一个文件夹就可以使用A了</p><p><strong>使用:</strong>  </p><ul><li>引入要混入的对象</li><li>配置对象添加<code>mixins:[],</code>数组当中填写引入的混入对象的名称即可</li></ul><p><strong>例子:</strong></p><p><strong>com.js</strong>(可以看到,和组件传入的配置对象基本一样)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">address</span>:<span class="hljs-string">&quot;地球村&quot;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">sayOther</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;回收装备,没区别&quot;</span>);<br>        &#125;<br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Home.vue</strong>(混入使用com.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> com <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/other/com.js&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">mixins</span>:[com],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李白&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//调用自己的方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">show</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//调用混入其中的方法</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sayOther</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<span class="hljs-comment">//李白</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">address</span>);<span class="hljs-comment">//地球村</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;大家好,我叫&quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="watch和-nextTick结合使用"><a href="#watch和-nextTick结合使用" class="headerlink" title="watch和$nextTick结合使用"></a>watch和$nextTick结合使用</h4><ul><li><strong>watch</strong>只能监视数据的变化,而因为数据变化导致的dom更新是否已经完成watch并不知道(相当于你数据一发生变化,我就执行你设置的回调函数)</li><li>而如果我们希望等待dom更新完成后在执行回调,我们就需要结合<code>$nextTick</code>使用</li><li><strong>$nextTick</strong>意思是等待下一次DOM更新后在执行回调</li><li>比如说轮播图,如果我们轮播图数据发生了变化,<code>watch</code>监视到了,如果我们立马执行操作使得轮播图重新绘制生成,<strong>那么肯定是不行的,因为dom都没有生成,轮播图怎么重新获取dom进行生成</strong>,所以我们就可以在里面添加<code>$nextTick</code>等下次DOM更新完成后执行即可</li><li><strong>顺带一提:</strong> watch支持异步请求,并且支持深度监视,computed不支持</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;tom&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">vm.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;汤姆&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//设置新名字后立马输出里面的文本,发现输出的依旧是&#x27;tom&#x27;,而不是&#x27;汤姆&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//因为dom还没有更新完成</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$refs</span>.<span class="hljs-property">title</span>.<span class="hljs-property">textContent</span>); <span class="hljs-comment">// tom</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//下一次dom更新完成后输出,发送输出的是&#x27;汤姆&#x27;了</span></span></span><br><span class="language-javascript"><span class="language-xml">vm.$nextTick(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-property">$refs</span>.<span class="hljs-property">title</span>.<span class="hljs-property">textContent</span>); <span class="hljs-comment">// tom</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="解构赋值-和"><a href="#解构赋值-和" class="headerlink" title="解构赋值 { } 和 [ ]"></a>解构赋值 { } 和 [ ]</h4><ul><li><p><code>&#123;  &#125; </code>不多说</p></li><li><p><code>[ ]</code> 按顺序解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>[,attr] = <span class="hljs-string">&quot;v-on:text&quot;</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(attr);<span class="hljs-comment">//输出text</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="vue-router配置对象当中的scrollBehavior"><a href="#vue-router配置对象当中的scrollBehavior" class="headerlink" title="vue-router配置对象当中的scrollBehavior"></a>vue-router配置对象当中的scrollBehavior</h4><p>可以使得切换路由的时候,路由滚动条可以滚动到我们想滚动的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;history&quot;</span>,<br>    routes,<br>    <span class="hljs-comment">//每次路由切换的时候,就将滚动条滚动到最顶端</span><br>    <span class="hljs-title function_">scrollBehavior</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, savedPosition</span>)&#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">0</span>&#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="getters当中要用一个-的用处"><a href="#getters当中要用一个-的用处" class="headerlink" title="getters当中要用一个||[]  ||{} 的用处"></a>getters当中要用一个||[]  ||{} 的用处</h4><ul><li>因为有些项目需要从后台发送请求来渲染页面,但是这些数据因为网络延迟的问题肯定不能及时到达,所以就需要在到达之前使用<code>[]</code>或者<code>&#123;&#125;</code>(依据返回数据是数组还是对象来选择),来进行填充,不然你一个空字符串去参与遍历(比如<code>v-for</code>)那肯定会报错的</li><li>再者,有人会说getters的事情和我组件有什么关系,一个是仓库,一个是组件,还是有关系的,(因为组件调用了<code>mapGetters</code>来获取仓库的数据),当数据不存在的时候或者遍历一个不可以遍历的数据的时候,就会报错(虽然报错后数据显示依旧正常,是因为后期数据返回,重新渲染了~)(这叫<strong>假报错</strong>)</li><li>所以有时候为了避免假报错,就需要使用<code>||[]  ||&#123;&#125; </code></li></ul><p>比如这个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> getters = &#123;<br>    <span class="hljs-comment">// 面包屑</span><br>    <span class="hljs-title function_">categoryView</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">skuDetailInfo</span>.<span class="hljs-property">categoryView</span>||&#123;&#125;;<br>    &#125;,<br>    <span class="hljs-comment">// 商品详情</span><br>    <span class="hljs-title function_">skuInfo</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">skuDetailInfo</span>.<span class="hljs-property">skuInfo</span>||&#123;&#125;;<br>    &#125;,<br>    <span class="hljs-comment">// 商品售卖属性</span><br>    <span class="hljs-title function_">spuSaleAttrList</span>(<span class="hljs-params">state</span>)&#123;<br>        <span class="hljs-keyword">return</span> state.<span class="hljs-property">skuDetailInfo</span>.<span class="hljs-property">spuSaleAttrList</span>||[]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>还有就是有时候我们多层嵌套读取数据,比如<code>a.b.c</code>通过a读取b,又通过b读取c,假如读取到b的时候,b是<code>undefined</code>,那么在读取c就会报错,所以这个时候就可以考虑使用<code>||[] 或者 ||&#123;&#125;</code>了</li></ul><h4 id="localStorage-getItem-如果获取不到指定的key-返回的是null不是返回undefined"><a href="#localStorage-getItem-如果获取不到指定的key-返回的是null不是返回undefined" class="headerlink" title="localStorage.getItem();如果获取不到指定的key,返回的是null不是返回undefined"></a>localStorage.getItem();如果获取不到指定的key,返回的是null不是返回undefined</h4><h4 id="axios的请求头-Content-Type"><a href="#axios的请求头-Content-Type" class="headerlink" title="axios的请求头(Content-Type)"></a>axios的请求头(Content-Type)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1 默认的格式请求体中的数据会以json字符串的形式发送到后端(默认)</span><br>  <span class="hljs-string">&#x27;Content-Type: application/json &#x27;</span><br><br><span class="hljs-comment">// 2 请求体中的数据会以普通表单形式（键值对）发送到后端</span><br>  <span class="hljs-string">&#x27;Content-Type: application/x-www-form-urlencoded&#x27;</span><br><br><span class="hljs-comment">// 3 它会将请求体的数据处理为一条消息，以标签为单元，用分隔符分开。既可以上传键值对，也可以上传文件</span><br>  <span class="hljs-string">&#x27;Content-Type: multipart/form-data&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>注意:</strong></p><p>jQuery当中的<code>$.post</code>默认请求头(<code>Content-Type</code>)为 <code>application/x-www-form-urlencoded; charset=UTF-8</code></p><h4 id="当不使用vuex的时候-我们可以把接口请求函数全部封装在对象当中并挂载Vue原型上"><a href="#当不使用vuex的时候-我们可以把接口请求函数全部封装在对象当中并挂载Vue原型上" class="headerlink" title="当不使用vuex的时候,我们可以把接口请求函数全部封装在对象当中并挂载Vue原型上"></a>当不使用vuex的时候,我们可以把接口请求函数全部封装在对象当中并挂载Vue原型上</h4><p>如:在main.js当中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 也就是先导入封装所有ajax请求的api.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-variable constant_">API</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api.js&quot;</span><br><span class="hljs-comment">// 挂载到vue原型上,和全局事件总线挂载一样</span><br><span class="hljs-comment">// 都是在vue生命周期的beforeCreate挂载</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    ...<br><span class="hljs-title function_">beforeCreate</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//全局事件总线</span><br>    <span class="hljs-comment">//Vue.prototype.$bus = this;</span><br>    <span class="hljs-comment">//ajax请求</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$API</span> = <span class="hljs-variable constant_">API</span>;<br>&#125;,<br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Vue注册全局注册的二种方式"><a href="#Vue注册全局注册的二种方式" class="headerlink" title="Vue注册全局注册的二种方式"></a>Vue注册全局注册的二种方式</h4><ul><li><code>Vue.use()</code></li></ul><p><strong>main.js文件(主入口文件)使用Vue.use方法全局注册</strong></p><p>其实element-ui官方也是使用Vue.use()来注册全局组件的~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//引入element-ui组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;element-ui&quot;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;element-ui/lib/theme-chalk/index.css&quot;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><ul><li><code>Vue.component()</code></li></ul><p>一般我们用<code>Vue.componet()</code>比较多,因为使用<code>Vue.use()</code>注册全局组件使用起来麻烦点,element-ui看起来使用简单是因为内部封装好了</p><ul><li>Vue.componet(参数1,参数2)<ul><li>参数1:注册的组件名</li><li>参数2:注册的组件</li></ul></li></ul><p><strong>main.js文件(主入口文件)使用Vue.component方法全局注册</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><span class="hljs-comment">//引入自定义组件</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/MyButton&#x27;</span><br><br><span class="hljs-comment">//全局组成element-ui组件</span><br><span class="hljs-comment">//参数1: 注册的组件名字为 &#x27;MyButton&#x27;</span><br><span class="hljs-comment">//参数2: 注册的组件为 MyButton</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyButton&#x27;</span>,<span class="hljs-title class_">MyButton</span>);<br><br><span class="hljs-comment">//或者如果组件配置了name属性,可以直接使用组件的name当中的值</span><br><span class="hljs-comment">//Vue.component(MyButton.name,MyButton);</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>),<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="Vue当中的watch"><a href="#Vue当中的watch" class="headerlink" title="Vue当中的watch"></a>Vue当中的watch</h4><h5 id="直接就一个监视回调函数"><a href="#直接就一个监视回调函数" class="headerlink" title="直接就一个监视回调函数"></a>直接就一个监视回调函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;name = &#x27;我是渣渣辉&#x27;&quot;</span>&gt;</span>这是按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyButton&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;李白&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 监视name值的变化</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">name</span>(<span class="hljs-params">newValue, oldValue</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;值发生了变化&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//代码等同于</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// name: &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   handler(newValue, oldValue) &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//     console.log(&quot;值发生了变化&quot;);</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><p><strong>如果需要监视对象当中某一个值的变化的话,就需要用到这种形式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">eat</span>:&#123;<br>        <span class="hljs-attr">vegetable</span>:<span class="hljs-string">&quot;西红柿&quot;</span>,<br>        <span class="hljs-attr">meat</span>:<span class="hljs-string">&quot;牛肉&quot;</span><br>    &#125;<br>  &#125;;<br>&#125;,<br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-comment">// 监视eat对象当中meat值的变化</span><br>  <span class="hljs-string">&#x27;eat.meat&#x27;</span>(newValue, oldValue) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;值发生了变化&quot;</span>);<br>  &#125;,<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="书写配置项-比如是否深度监视"><a href="#书写配置项-比如是否深度监视" class="headerlink" title="书写配置项(比如是否深度监视)"></a>书写配置项(比如是否深度监视)</h5><p>如果我们想监视一个对象当中所有值的变化,包括内部对象的值的变化,我们不可以一个个去书写监听回调吧?我们可以使用配置项当中的<code>deep</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;eat.meat = &#x27;和牛&#x27;&quot;</span>&gt;</span>改变肉类<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;eat.vegetable = &#x27;青菜&#x27;&quot;</span>&gt;</span>改变蔬菜<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;eat.other.fruit = &#x27;苹果&#x27;&quot;</span>&gt;</span>改变水果<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; eat.meat &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; eat.vegetable &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; eat.other.fruit &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;MyButton&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">eat</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">vegetable</span>: <span class="hljs-string">&quot;西红柿&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">meat</span>: <span class="hljs-string">&quot;牛肉&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">other</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">fruit</span>: <span class="hljs-string">&quot;草莓&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">watch</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//深度监听eat当中值的变化,嵌套多少层都会监听到</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">eat</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">handler</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;值发生了变化&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;less&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="npm-run-build-prod-或者-npm-run-build-stage"><a href="#npm-run-build-prod-或者-npm-run-build-stage" class="headerlink" title="npm run build:prod 或者 npm run build:stage"></a>npm run build:prod 或者 npm run build:stage</h4><ul><li><strong>npm run build:prod:</strong> 构建生产环境<ul><li>打包的时候会读取<code>.env.development</code>文件的,所以不需要前缀可以编辑下这个文件</li></ul></li><li><strong>npm run build:stage:</strong> 构建测试环境<ul><li>打包的时候会读取<code>.env.production</code>文件的,所以不需要前缀可以编辑下这个文件</li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211140036.png" alt="npm run build:prod 或者 npm run build:stage"></p><h4 id="Navigation-aborted-from-“-x2F-center“-to-“-x2F-login“-via-a-navigation-guard"><a href="#Navigation-aborted-from-“-x2F-center“-to-“-x2F-login“-via-a-navigation-guard" class="headerlink" title="Navigation aborted from “&#x2F;center“ to “&#x2F;login“ via a navigation guard"></a>Navigation aborted from “&#x2F;center“ to “&#x2F;login“ via a navigation guard</h4><p><strong>解决:</strong></p><p>vue_project\src\router\index.js 路由主入口文件当中添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">const</span> originalPush = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span><br><span class="hljs-comment">//解决重复提交相同链接报错</span><br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">location, onResolve, onReject</span>) &#123;<br>    <span class="hljs-keyword">if</span> (onResolve || onReject)<br>        <span class="hljs-keyword">return</span> originalPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, onResolve, onReject)<br>    <span class="hljs-keyword">return</span> originalPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">isNavigationFailure</span>(err)) &#123;<br>            <span class="hljs-comment">// resolve err</span><br>            <span class="hljs-keyword">return</span> err<br>        &#125;<br>        <span class="hljs-comment">// rethrow error</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">const</span> originalReplace = <span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">replace</span><br><span class="hljs-title class_">VueRouter</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">replace</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">replace</span>(<span class="hljs-params">location, onResolve, onReject</span>) &#123;<br>    <span class="hljs-keyword">if</span> (onResolve || onReject)&#123;<br>        <span class="hljs-comment">//回调函数里面会用到this的指向,所以就要使用call</span><br>        <span class="hljs-keyword">return</span> originalReplace.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location, onResolve, onReject)<br>    &#125;<br>    <span class="hljs-keyword">return</span> originalReplace.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, location).<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">VueRouter</span>.<span class="hljs-title function_">isNavigationFailure</span>(err)) &#123;<br>            <span class="hljs-comment">//如果为相同链接引发的错误,返回错误原因,promise状态为resolve</span><br>            <span class="hljs-comment">// resolve err</span><br>            <span class="hljs-keyword">return</span> err<br>        &#125;<br>        <span class="hljs-comment">// rethrow error</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盒子模型及块元素水平垂直定位和绝对元素的定位布局和弹性盒</title>
    <link href="/2022/05/21/%E5%89%8D%E7%AB%AF/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%9D%97%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%AE%9A%E4%BD%8D%E5%92%8C%E7%BB%9D%E5%AF%B9%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80%E5%92%8C%E5%BC%B9%E6%80%A7%E7%9B%92/"/>
    <url>/2022/05/21/%E5%89%8D%E7%AB%AF/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%8F%8A%E5%9D%97%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%AE%9A%E4%BD%8D%E5%92%8C%E7%BB%9D%E5%AF%B9%E5%85%83%E7%B4%A0%E7%9A%84%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80%E5%92%8C%E5%BC%B9%E6%80%A7%E7%9B%92/</url>
    
    <content type="html"><![CDATA[<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p><strong>组成:</strong></p><ul><li>content(内容区)</li><li>border(边框)</li><li>padding(内边距)</li><li>margin(外边距)</li></ul><h4 id="盒子大小"><a href="#盒子大小" class="headerlink" title="盒子大小"></a>盒子大小</h4><p>盒子的大小值得就是盒子在容器中实际所占据的高度和宽度(默认情况下我们通过css设置的<code>width</code>和<code>height</code>只是设置了<code>content</code>(内容区)的高度和宽度,实际上盒子模型所占据的高度和宽度是按照下面来计算的)</p><p><strong>实际的宽度:</strong></p><p>实际宽度 &#x3D; margin-left + border-left + padding-left + <strong>width(content-width)</strong> + padding-right + border-right + margin-right</p><p><strong>实际的高度:</strong></p><p>实际的高度 &#x3D; margin-top + border-top + padding-top + <strong>height(content-height)</strong>  + padding-bottom + border-bottom + margin-bottom</p><p>比如下面图片的实际宽度和实际高度是多少呢?</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211811610.png" alt="实际宽度和实际高度是多少呢"></p><p>使用上述公式，就能算出示例中的高宽值</p><p>实际宽度 &#x3D; 20+6+20+400+20+6+20 &#x3D; 492</p><p>实际的高度 &#x3D; 20+6+20+100+20+6+20 &#x3D; 192</p><h3 id="更改盒子模型的计算方式"><a href="#更改盒子模型的计算方式" class="headerlink" title="更改盒子模型的计算方式"></a>更改盒子模型的计算方式</h3><p>一般情况下,css设置的<code>width</code>,<code>height</code>设置的都是<code>content-width</code>,<code>content-height</code>,但是我们也可以通过css,改变css里面的width,和height设置的是什么</p><p><strong>box-sizing:content-box(默认情况)</strong></p><ul><li>一开始的css显示效果和代码,可以看到,<strong>Child container刚刚好等于父元素的宽度</strong><ul><li>也就是<strong>实际的宽度</strong> &#x3D; 父元素的宽度</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-sizing</span>: content-box;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211818257.png" alt="显示效果"></p><ul><li>添加了<code>border为10px</code>,并且设置了<code>padding:5px</code><ul><li>可以看到内容超过了父元素,溢出了</li><li><strong>实际的宽度</strong> &#x3D; 父元素的宽度 + border-left + border-right + padding-left + padding-right</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-sizing</span>: content-box;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">border</span>: solid <span class="hljs-number">#5B6DCD</span> <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211820703.png" alt="添加了border为10px,并且设置了padding:5px后的效果"></p><p><strong>box-sizing:border-box</strong></p><ul><li>只将<code>box-sizing</code>修改为<code>border-box</code>,效果就完全不同</li><li><strong>实际的宽度</strong> &#x3D; 父元素的宽度</li><li>因为<code>box-sizing</code>设置的为<code>border-box</code>所以css当中设置的<code>width</code>属性包括了<code>border</code>的宽度和<code>padding</code>的宽度(注意,不包括<code>margin</code>!)</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">box-sizing</span>: border-box;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br><span class="hljs-attribute">border</span>: solid <span class="hljs-number">#5B6DCD</span> <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211826744.png" alt="只将box-sizing修改为border-box"></p><h4 id="div-块元素-水平方向布局"><a href="#div-块元素-水平方向布局" class="headerlink" title="div(块元素)水平方向布局"></a>div(块元素)水平方向布局</h4><ul><li>看过上面,我们知道水平方向上的位置<strong>必须要满足</strong><ul><li>margin-left + border-left + padding-lef + <strong>width</strong> + padding-right + border-right + margin-right &#x3D; <strong>父元素内容区的宽度</strong></li></ul></li><li>如果不满足上方等式,<strong>等式就会自动去调整</strong></li></ul><p>这七个值中有三个值可以设置为auto</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">width</span><br><br><span class="hljs-attribute">margin-left</span><br><br><span class="hljs-attribute">margin-right</span><br></code></pre></td></tr></table></figure><ul><li>调整的情况 (等式当中<strong>含有auto值</strong>和<strong>没有auto的情况</strong>)</li></ul><table><thead><tr><th align="center">width</th><th align="center">margin-left</th><th align="center">margin-right</th><th>结果</th></tr></thead><tbody><tr><td align="center">auto</td><td align="center">&#x2F;</td><td align="center">auto</td><td>**宽度(width)自动调整为最大值,**选取的margin-right自动为0</td></tr><tr><td align="center">auto</td><td align="center">auto</td><td align="center">&#x2F;</td><td>**宽度(width)自动调整为最大值,**选取的margin-left自动为0</td></tr><tr><td align="center">auto</td><td align="center">auto</td><td align="center">auto</td><td>**宽度(width)自动调整为最大值,**二个外边距自动设置为0</td></tr><tr><td align="center">auto</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td>**宽度(width)自动调整为最大值,**二个外边距自动设置为0</td></tr><tr><td align="center">固定值</td><td align="center">auto</td><td align="center">auto</td><td><strong>宽度(width)不变</strong>,margin-left和margin-<strong>right</strong>自动调整(也就是水平居中)</td></tr><tr><td align="center">固定值</td><td align="center">auto</td><td align="center">&#x2F;</td><td><strong>宽度(width)不变</strong>,自动调整margin-<strong>left</strong>的值</td></tr><tr><td align="center">固定值</td><td align="center">&#x2F;</td><td align="center">auto</td><td><strong>宽度(width)不变</strong>,自动调整margin-<strong>right</strong>的值</td></tr><tr><td align="center">固定值</td><td align="center">&#x2F;</td><td align="center">&#x2F;</td><td><strong>宽度(width)不变</strong>,自动调整margin-<strong>right</strong>的值</td></tr></tbody></table><p>总结:</p><ul><li><p><strong>三者当中含有auto值的情况</strong></p><ul><li>当<code>width为auto</code>的时候,<strong>总是保证</strong><code>width</code>为最大值<strong>而其他设置为auto的自动设置为0</strong></li><li>当<code>width为固定值</code>的时候,自动调整<strong>已经设置为auto的值</strong>使其满足等式(margin-left + border-left + padding-lef + <strong>width</strong> + padding-right + border-right + margin-right &#x3D; <strong>父元素内容区的宽度</strong>)</li></ul></li><li><p><strong>三者当中没有auto的情况</strong></p><ul><li>当<code>width为固定值</code><strong>发现其他值都没有写</strong>,没有一个auto,那么就自动调整<code>margin-right</code>的值(见得最多的)</li></ul></li></ul><p>例如下方例子: </p><p>注意,没有写代表没有写,如果填写了0,或者auto,就代表在css里面设置了margin-left或者其他的为0或者auto!</p><table><thead><tr><th align="center">margin-left</th><th align="center">border-left</th><th align="center">padding-left</th><th align="center">width</th><th align="center">padding-right</th><th align="center">border-right</th><th align="center">margin-right</th><th align="center">父元素宽度</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">auto</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">800px</td><td align="center">width当中的auto设置为800px</td></tr><tr><td align="center">auto</td><td align="center">0</td><td align="center">0</td><td align="center">500px</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">800px</td><td align="center">margin-left的auto被设置为300px</td></tr><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">400px</td><td align="center">0</td><td align="center">0</td><td align="center">auto</td><td align="center">800px</td><td align="center">margin-right的auto被设置为500px</td></tr><tr><td align="center">没有写</td><td align="center">0</td><td align="center">0</td><td align="center">700px</td><td align="center">0</td><td align="center">0</td><td align="center">没有写</td><td align="center">800px</td><td align="center">margin-right的auto被设置为100px</td></tr><tr><td align="center">auto</td><td align="center">10</td><td align="center">5</td><td align="center">400px</td><td align="center">5</td><td align="center">10</td><td align="center">auto</td><td align="center">700px</td><td align="center">margin-left和margin-right的auto被设置为(700-(10+5+400+5+10))&#x2F;2&#x3D;135px</td></tr></tbody></table><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211918448.png" alt="宽度设置了下,其他都没有写"></p><ul><li>所以为什么你经常看到设置了宽度后,在设置<code>margin:0 auto</code>就可以实现水平居中,就是利用上述原理<ul><li>width固定,margin-left,margin-right为auto,那么浏览器会自动跳转auto的值,所以就实现了水平居中</li></ul></li></ul><h5 id="div-块元素-垂直方向布局"><a href="#div-块元素-垂直方向布局" class="headerlink" title="div(块元素)垂直方向布局"></a>div(块元素)垂直方向布局</h5><p>块元素7个值没有auto的话就会自动调整<code>margin-bottom</code>其他和水平基本一样的,也是下面三个值可以设置auto,这里就不多说了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span><br><br><span class="hljs-attribute">height</span><br><br><span class="hljs-attribute">margin-bottom</span><br></code></pre></td></tr></table></figure><h4 id="开启绝对定位元素的布局"><a href="#开启绝对定位元素的布局" class="headerlink" title="开启绝对定位元素的布局"></a>开启绝对定位元素的布局</h4><h5 id="先来大概了解下开启绝对定位后元素的参考父元素-也就是我们常说的包含块"><a href="#先来大概了解下开启绝对定位后元素的参考父元素-也就是我们常说的包含块" class="headerlink" title="先来大概了解下开启绝对定位后元素的参考父元素(也就是我们常说的包含块)"></a>先来大概了解下开启绝对定位后元素的参考父元素(也就是我们常说的包含块)</h5><ul><li><p>正常情况下,包含块就是<strong>最近的开启了相对定位的块元素</strong>(当然,如果都没有开启,则参考html)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    <span class="hljs-selector-class">.box3</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: blue;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205211948876.png" alt="可以看到,box3是参考box1的,因为box1开启了相对定位"></p></li></ul><h5 id="开启决定定位后-开启绝对定位后的元素也是需要满足一定条件约束的"><a href="#开启决定定位后-开启绝对定位后的元素也是需要满足一定条件约束的" class="headerlink" title="开启决定定位后,开启绝对定位后的元素也是需要满足一定条件约束的"></a>开启决定定位后,开启绝对定位后的元素也是需要满足一定条件约束的</h5><ul><li><strong>水平方向来说:</strong>(和平常没有开启定位的多了一个left,right)</li></ul><p><strong>left</strong> + margin-left + border-left + padding-left + <strong>width</strong> + padding-right + border-right + margin-right + <strong>right</strong>  &#x3D; <strong>包含块的宽度</strong></p><ul><li><strong>垂直方向来说:</strong>(和平常没有开启定位的多了一个top,bottom)</li></ul><p><strong>top</strong> + margin-top+ border-top+ padding-top+ <strong>height</strong>+ padding-bottom+ border-bottom+ margin-bottom+ <strong>bottom</strong>  &#x3D; <strong>包含块的宽度</strong></p><h5 id="水平方向布局"><a href="#水平方向布局" class="headerlink" title="水平方向布局"></a>水平方向布局</h5><p>可以调整为auto的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-left</span><br><span class="hljs-attribute">width</span><br><span class="hljs-attribute">left</span><br><span class="hljs-attribute">right</span><br><span class="hljs-attribute">margin-right</span><br></code></pre></td></tr></table></figure><p>需要满足</p><p><strong>left</strong> + margin-left + border-left + padding-left + <strong>width</strong> + padding-right + border-right + margin-right + <strong>right</strong>  &#x3D; <strong>包含块的宽度</strong></p><p>如果9个值当中没有设置auto,则会<strong>自动调整right的值来满足</strong>(有点像块元素的水平布局一样,块元素7个值没有auto的话就会自动调整margin-right)</p><p>所以如果等式不满足的时候,就会自动调整<code>left</code>和<code>right</code>这两个值。   </p><ul><li>例子:下面的例子就会自动调整<code>right为-200</code>,使得等式成立</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>:absolute;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>浏览器查看box2的computed</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212006015.png" alt="浏览器computed查看"></p><p>当然,你如果皮,把box2的<strong>right改为0</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span>&#123;<br>    <span class="hljs-attribute">position</span>:absolute;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">300px</span>;<br>    //新添加<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么效果依旧不会变化~不过浏览器查看box2的<code>computed</code>的时候变成了这样子</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212016542.png" alt="把box2的right改为0后浏览器查看"></p><ul><li>需要注意的是: 要设置<code> left = 0; right = 0;</code> 才能调整<code>margin-left和margin-right</code>，否则会自动调整left和right的值(不管<code>computed</code>有没有看到效果) 从而导致给<code>margin-left、margin-right</code>设置值会失效</li></ul><h5 id="垂直方向布局"><a href="#垂直方向布局" class="headerlink" title="垂直方向布局"></a>垂直方向布局</h5><p>可以调整为auto的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">margin-top</span><br><span class="hljs-attribute">height</span><br><span class="hljs-attribute">left</span><br><span class="hljs-attribute">right</span><br><span class="hljs-attribute">margin-bottom</span><br></code></pre></td></tr></table></figure><p>需要满足</p><p><strong>top</strong> + margin-top+ border-top+ padding-top+ <strong>height</strong> + padding-bottom+ border-bottom+ margin-bottom+ <strong>bottom</strong>  &#x3D; <strong>包含块的高度</strong></p><p>如果9个值当中没有设置auto,则会<strong>自动调整bottom的值来满足</strong>(有点像块元素的垂直布局一样,块元素7个值没有auto的话就会自动调整margin-bottom)</p><p>所以如果等式不满足的时候,就会自动调整<code>top</code>和<code>bottom</code>这两个值。 </p><h5 id="常用的一些效果"><a href="#常用的一些效果" class="headerlink" title="常用的一些效果"></a>常用的一些效果</h5><ul><li>开启定位后相对于包含块<strong>水平居中</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs css">//设置代码<br><span class="hljs-selector-class">.box2</span>&#123;<br>    ...<br>    <span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;<br>   <span class="hljs-comment">/* 或者 */</span><br>   <span class="hljs-comment">/* margin-left: auto; */</span><br>   <span class="hljs-comment">/* margin-right: auto; */</span><br>&#125;<br><br>//例子全部<br>&lt;style&gt;<br>    <span class="hljs-selector-class">.box1</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>        <span class="hljs-attribute">background-color</span>: red;<br>    &#125;<br><br>    <span class="hljs-selector-class">.box2</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">background-color</span>: green;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>        <span class="hljs-comment">/* 或者 */</span><br>        <span class="hljs-comment">/* margin-left: auto; */</span><br>        <span class="hljs-comment">/* margin-right: auto; */</span><br>    &#125;<br>&lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;<span class="hljs-selector-tag">body</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=&quot;box1&quot;&gt;<br>        &lt;<span class="hljs-selector-tag">div</span> class=&quot;box2&quot;&gt;&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &lt;/<span class="hljs-selector-tag">div</span>&gt;<br><br>&lt;/<span class="hljs-selector-tag">body</span>&gt;<br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212022797.png" alt="开启定位后相对于包含块水平居中"></p><p>浏览器computed效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212032355.png" alt="浏览器computed查看效果"></p><ul><li>开启定位后相对于包含块<strong>垂直居中</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html">.box2&#123;<br>    ...<br>    position:absolute;<br>top:0;<br>    top:0;<br>    margin:auto 0;<br>   /* 或者 */<br>   /* margin-top: auto; */<br>   /* margin-bottom: auto; */<br>&#125;<br><br>//完整代码<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: auto <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-comment">/* margin-top: auto;</span></span><br><span class="hljs-comment"><span class="language-css">        margin-bottom: auto; */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212029660.png" alt="开启定位后相对于包含块垂直居中"></p><p>浏览器computed查看</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212031145.png" alt="浏览器computed查看效果"></p><ul><li>开启定位后相对于包含块<strong>居中</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"> .box2 &#123;<br> ...<br>        position: absolute;<br>        left:0;<br>        right: 0;<br>        top: 0;<br>        bottom: 0;<br>        margin: auto;<br>        ...<br>    &#125;   <br><br>//完整代码<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box1</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-class">.box2</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">background-color</span>: green;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: auto;</span><br><span class="language-css">    &#125;   </span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212034149.png" alt="开启定位后相对于包含块居中"></p><p>浏览器computed查看效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212035643.png" alt="浏览器computed查看效果"></p><h3 id="弹性盒"><a href="#弹性盒" class="headerlink" title="弹性盒"></a>弹性盒</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li><p>想看看也可以,这里说的简单的,<a href="https://blog.csdn.net/qq_29689343/article/details/112556133">也可以看看这位博主写的</a></p></li><li><p>设置</p><ul><li><code>display:flex</code>开启弹性容器,将当前元素设置为<strong>块级的弹性容器</strong></li><li><code>display:inline-flex</code>开启弹性容器 设置为<strong>行内的弹性容器</strong></li></ul></li><li><p>基本概念</p><ul><li>主轴<ul><li>弹性元素的排列方向(默认水平方向为主轴)</li></ul></li><li>侧轴<ul><li>和主轴垂直的叫侧轴</li></ul></li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221010476.png" alt="默认情况下的主轴侧轴方向"></p><ul><li>特征<ul><li>弹性容器的子元素是弹性元素</li><li>弹性元素可以同时是弹性容器</li></ul></li></ul><p>如下代码开启了弹性布局,<code>div</code>即为<strong>弹性容器</strong>,<code>div</code>下方的<code>span</code> <code>em</code>等即为<strong>弹性元素</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:flex&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>听我说<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>动感超人<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="设置主轴"><a href="#设置主轴" class="headerlink" title="设置主轴"></a>设置主轴</h4><p>顺带一提记忆: 你知道display:flex是开启定位,那么就联想记忆,就认为flex就代表水平,然后flex-direction就是告诉容器水平是哪一个方向的 (<strong>row</strong>代表行,行当然是水平的,column代表列,列肯定是垂直的) <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Main_Axis">感兴趣的可以看看MDN的主轴API</a></p><h5 id="方向-flex-direction"><a href="#方向-flex-direction" class="headerlink" title="方向 flex-direction"></a>方向 flex-direction</h5><ul><li><code>flex-direction</code>:<strong>row(默认值)</strong>|row-reverse|column|column-reverse</li></ul><p><code>flex-direction:row</code>设置弹性容器当中的弹性元素在水平方向排列,并且弹性元素是从左到右排序(同时设置主轴的方向为水平方向) <strong>(默认值)</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220905282.png" alt="flex-direction:row"></p><p><code>flex-direction:row-reverse</code>设置弹性容器的弹性元素在水平方向排列并且是从右到左排列(同时设置主轴的方向为水平方向)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220907557.png" alt="flex-direction:row-reverse"></p><p><code>flex-direction:column</code>设置弹性容器的弹性元素在垂直方向,并且是从上到下依次排列(同时设置主轴的方向为垂直方向)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220909427.png" alt="flex-direction:column"></p><p><code>flex-direction:column-reverse</code>设置弹性容器的弹性元素在垂直方向,并且是从下到上排列(同时设置主轴的方向为垂直方向)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220911033.png" alt="flex-direction:column-reverse"></p><h5 id="设置弹性元素在弹性容器上是否自动换行-重要-flex-wrap"><a href="#设置弹性元素在弹性容器上是否自动换行-重要-flex-wrap" class="headerlink" title="设置弹性元素在弹性容器上是否自动换行(重要) flex-wrap"></a>设置弹性元素在弹性容器上是否自动换行(重要) flex-wrap</h5><ul><li><code>flex-wrap</code>:nowrap(默认值不换行) | wrap(换行) | wrap-reverse</li></ul><p><code>flex-wrap:nowrap</code>的情况</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220938202.png" alt="flex-wrap:nowrap"></p><p>如果没有设置弹性元素:<code>flex-shrink:0</code>的话,那么弹性元素如果超过了弹性容器的宽度,那么会自动跳转宽度使其等于弹性容器的宽度!</p><p><code>flex-wrap:wrap</code>换行</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220939849.png" alt="flex-wrap:wrap"></p><p><code>flex-wrap:wrap-reverse</code> <del>主轴相反的方向进行换行</del>  不太好描述,感觉像叠叠乐一样</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220943476.png" alt="flex-wrap:wrap-reverse-效果1"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220943615.png" alt="flex-wrap:wrap-reverse-效果2"></p><h5 id="对其方式-空隙排布-justify-content"><a href="#对其方式-空隙排布-justify-content" class="headerlink" title="对其方式(空隙排布) justify-content"></a>对其方式(空隙排布) justify-content</h5><p>大家都知道word当中有什么左对齐,居中对其,右对齐,二端对其,css也有~</p><ul><li><code>justify-content:</code>flex-start | flex-end | center | space-between | space-around </li><li>设置如何顺着弹性容器主轴的方向分配弹性元素之间及其周围的空间(大白话就是主轴在哪里,我就按照你方向来分配其他没有被占据的空间)</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content">justify-content说明文档</a></li><li><strong>特别注意</strong>,这里的弹性元素会出现放不下被换行和垂直方向排布端正是因为设置了<code>flex-wrap: wrap;</code>及 <code>align-content: flex-start;</code></li></ul><p><code>justify-content:flex-start</code>(可以说是默认值) 设置元素<strong>每一行</strong>在主轴开头(起始位置)开始排布</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220920496.png" alt="justify-content:flex-start"></p><p><code>justify-content:flex-end</code>设置元素沿着主轴终点开始排列</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205220945420.png" alt="justify-content:flex-end"></p><p><code>justify-content:space-between</code> 设置每一行的空白元素平均分配到元素中间</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221001231.png" alt="justify-content:space-between"></p><p><code>justify-content:space-around</code> 设置每一行的空白元素分配到元素四周(注意:二个元素之间分配到的空白间距并不会取消,而是会叠加在一起)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221004071.png" alt="justify-content:space-around"></p><h4 id="设置侧轴"><a href="#设置侧轴" class="headerlink" title="设置侧轴"></a>设置侧轴</h4><h5 id="元素对其方式-align-items"><a href="#元素对其方式-align-items" class="headerlink" title="元素对其方式 align-items"></a>元素对其方式 align-items</h5><ul><li><code>align-items:</code>stretch(默认) |center| flex-start | flex-end | baseline</li></ul><p><code>align-items:stretch</code> 元素在侧轴上拉伸(如果没有设置height属性或者设置为auto就会拉伸) ,<strong>如果设置了width为固定值,那么这个效果就不会生效</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221019930.png" alt="align-items:stretch并且不设置width"></p><p><code>align-items:center</code> 设置侧轴元素居中排列</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221021030.png" alt="align-items:center"></p><p><code>align-items:flex-start</code>元素向侧轴起点对齐(以每一行为参考,可以想象下每一行有自己的主轴侧轴)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221023912.png" alt="align-items:flex-start"></p><p><code>align-items:flex-end</code> 元素向侧轴终点对齐(以每一行为参考,可以想象下每一行有自己的主轴侧轴)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221025448.png" alt="align-items:flex-end"></p><h5 id="空隙排布-align-content"><a href="#空隙排布-align-content" class="headerlink" title="空隙排布 align-content"></a>空隙排布 align-content</h5><ul><li><code>align-content:</code> flex-start | flex-end | space-between | space-around | center</li></ul><p>图我就不自己截了,拿了其他的,原来作者找不到了..<a href="https://blog.csdn.net/liuyan19891230/article/details/122356044">只找到一个转载的</a></p><p><code>align-content:flex-start</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221033288.png" alt="align-content:flex-start"></p><p><code>align-content:flex-end</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221033886.png" alt="align-content:flex-end"></p><p><code>align-content:space-between</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221034997.png" alt="align-content:space-between"></p><p><code>align-content:space-around</code></p><p><img src="https://img-blog.csdnimg.cn/img_convert/e74286dedbbb0b230ad19f4454214780.png" alt="align-content:space-around"></p><p><code>align-content:center</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221034139.png" alt="align-content:center"></p><h4 id="一个小小的简写-一次性设置主轴方向和flex-wrap"><a href="#一个小小的简写-一次性设置主轴方向和flex-wrap" class="headerlink" title="一个小小的简写(一次性设置主轴方向和flex-wrap)"></a>一个小小的简写(一次性设置主轴方向和flex-wrap)</h4><ul><li><code>flex-flow</code>: flex-direction flex-wrap<ul><li>比如<code>flex-flow:row nowrap</code></li></ul></li></ul><h5 id="针对弹性元素的属性-注意区分弹性容器和弹性元素"><a href="#针对弹性元素的属性-注意区分弹性容器和弹性元素" class="headerlink" title="针对弹性元素的属性(注意区分弹性容器和弹性元素)"></a>针对弹性元素的属性(注意区分弹性容器和弹性元素)</h5><p>再次强调下,弹性容器是外壳,弹性元素是内部~</p><h6 id="flex-grow-number"><a href="#flex-grow-number" class="headerlink" title="flex-grow:number"></a>flex-grow:number</h6><ul><li>指定弹性元素的伸展系数,也就是当父元素(弹性容器)有空余的元素的时候如何分配(伸展)<ul><li>比如 flex-grow : 1 ; flex-grow : 2; flex-grow : 3 ;</li></ul></li></ul><p>原来的空隙</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221039034.png" alt="原来的空隙"></p><p>设置 <code>flex-grow : 1 ;  flex-grow : 2; flex-grow : 3 </code>; <strong>[这些数字就是所占据的比例,比如1,就占1&#x2F;(1+2+3)&#x3D;1&#x2F;6 也就是六分之一]</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221040443.png" alt="设置 `flex-grow : 1 ;  flex-grow : 2; flex-grow : 3 `"></p><h6 id="flex-shrink-number"><a href="#flex-shrink-number" class="headerlink" title="flex-shrink:number"></a>flex-shrink:number</h6><ul><li>指定弹性元素的收缩系数,也就是如果当父元素(弹性容器)容纳不下子元素(弹性元素)的时候,如何减少</li></ul><p>未设置flex-shrink,即为0</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221040738.png" alt="未设置flex-shrink,即为0"></p><p>设置flex-shrink : 1 ; flex-shrink : 2 ; flex-shrink : 3 ;后的效果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205221041232.png" alt="设置flex-shrink : 1 ; flex-shrink : 2 ; flex-shrink : 3"></p><h5 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h5><ul><li><code>flex-basis</code>具体长度|auto —-设置弹性元素在主轴上的基础长度</li><li>flex-basis:100px; <ul><li>如果<strong>主轴为横向</strong>的,则此元素设置宽度</li><li>如果<strong>主轴是纵向</strong>的,则此元素设置高度</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>css</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我来图书馆实现用云函数cfc进行自动化抢位置</title>
    <link href="/2022/05/21/%E5%B7%A5%E5%85%B7/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%AE%9E%E7%8E%B0%E7%94%A8%E4%BA%91%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A2%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/05/21/%E5%B7%A5%E5%85%B7/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%AE%9E%E7%8E%B0%E7%94%A8%E4%BA%91%E5%87%BD%E6%95%B0%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8A%A2%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li><p>抓包的话就不多说啦</p></li><li><p>只实现四楼自动抢,其他楼自己改改就可以</p></li><li><p>先下载下代码,<a href="https://github.com/superBiuBiuMan/library_position">单击我进入跳转下载</a></p></li><li><p>下载代码后的操作</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212200893.png" alt="下载zip格式"></p></li><li><p>下载完成后,将其解压后重新在目录内压缩</p></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212204778.png" alt="下载完成后,将其解压后重新在目录内压缩"></p><h4 id="具体操作步骤"><a href="#具体操作步骤" class="headerlink" title="具体操作步骤"></a>具体操作步骤</h4><ul><li>进入<a href="https://cloud.baidu.com/product/cfc.html">单击我进入官网</a>,登录注册实名就不多说了</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212130187.png" alt="单击体验"></p><ul><li>再单击创建函数</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212132269.png" alt="单击创建函数"></p><ul><li>选择空白函数后单击’下一步’</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212133464.png" alt="选择空白函数后单击&#39;下一步&#39;"></p><ul><li>按照如图选择</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212134491.png" alt="按照如图选择"></p><ul><li><strong>单击提交,创建完成</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212134445.png" alt="创建完成"></p><ul><li>单击**’进入函数详情页’**</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212137348.png" alt="单击进入函数详情页"></p><ul><li>单击’函数代码’</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212135973.png" alt="单击&#39;函数代码&#39;"></p><ul><li>下载刚刚下载的代码</li><li>单击’上传代码.zip’</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212138082.png" alt="单击&#39;上传代码.zip&#39;"></p><ul><li>选择刚刚下载的zip</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212205986.png" alt="选择自己重新压缩过的"></p><ul><li>选择好后单击开始上传</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212205747.png" alt="选择好后单击开始上传"></p><ul><li>切换回’在线编辑’</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212206008.png" alt="切换回&#39;在线编辑&#39;"></p><ul><li>单击编辑进入环境变量设置</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212206666.png" alt="单击编辑进入环境变量设置"></p><ul><li>添加这二个环境变量 ,单击保存</li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">runLibraryUser 自己抓包的用户代码<br>runLibraryUserSeatIdAndArea 座位号id<span class="hljs-meta">&amp;区域id 具体看github的文档</span><br><br>比如<br>runLibraryUser rjwiaorjawrijoawr<br>runLibraryUserSeatIdAndArea <span class="hljs-number">561</span><span class="hljs-meta">&amp;24</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212208903.png" alt="添加环境变量"></p><ul><li>单击’触发器’,增加触发器</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212209042.png" alt="单击&#39;触发器&#39;,增加触发器"></p><ul><li>添加完成<ul><li>cron(30 14 * * ?)</li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212210294.png" alt="添加完成"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212211234.png" alt="添加完成"></p><ul><li>后面就自动22:30预约了</li></ul><p>可以在这里看预约日志</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205212211395.png" alt="可以在这里看预约日志"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue源码分析-快速版(DMQ的MVVM为例)</title>
    <link href="/2022/05/20/%E5%89%8D%E7%AB%AF/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%BF%AB%E9%80%9F%E7%89%88/"/>
    <url>/2022/05/20/%E5%89%8D%E7%AB%AF/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-%E5%BF%AB%E9%80%9F%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h3 id="感兴趣的可以下载这位老师的例子"><a href="#感兴趣的可以下载这位老师的例子" class="headerlink" title="感兴趣的可以下载这位老师的例子"></a>感兴趣的可以下载这位老师的例子</h3><ul><li><strong>使用的DMQ的MVVM为例</strong></li><li><a href="https://github.com/superBiuBiuMan/vue-source-analysis">地址(单击我跳转)</a></li></ul><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="知道节点"><a href="#知道节点" class="headerlink" title="知道节点"></a>知道节点</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205201157179.png" alt="文档节点"></p><table><thead><tr><th align="center"></th><th align="center">nodeName</th><th align="center">nodeType</th><th align="center">nodeValue</th></tr></thead><tbody><tr><td align="center">文档节点</td><td align="center">#document</td><td align="center">9</td><td align="center">null</td></tr><tr><td align="center">元素节点</td><td align="center">标签名</td><td align="center">1</td><td align="center">null</td></tr><tr><td align="center">属性节点</td><td align="center">属性名</td><td align="center">2</td><td align="center">属性值</td></tr><tr><td align="center">文本节点</td><td align="center">#text</td><td align="center">3</td><td align="center">文本内容</td></tr></tbody></table><h4 id="知道一些方法或者属性"><a href="#知道一些方法或者属性" class="headerlink" title="知道一些方法或者属性"></a>知道一些方法或者属性</h4><ul><li><code>dom元素.childNodes</code>属性,获取dom元素下的所有节点(包括文本节点和其他(换行符也是文本节点))<ul><li>而<code>dom元素.children</code>是获取dom元素下的所有的元素节点</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;d&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>12<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>12345<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> d = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;d&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-property">childNodes</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-property">children</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用children输出结果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205201222982.png" alt="使用children输出结果"></p><p>使用childNodes输出结果</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205201222088.png" alt="使用childNodes输出结果"></p><ul><li><p><strong>特别注意,如果使用node.appendChild(被添加的节点) 如果被添加的节点存在于原有的文档上面,那么被添加的节点就会被移动到新的位置!</strong></p></li><li><p><code>node.attributes</code>获取元素节点身上的所有属性(返回一个对象)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div id=<span class="hljs-string">&quot;id&quot;</span> attr=<span class="hljs-string">&quot;123&quot;</span>&gt;&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><p>调用<code>attributes</code>返回截图</p></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205201914067.png" alt="调用attributes"></p><p>所以我们可以通过其里面的<code>name</code>,和<code>value</code>等获取属性名称和值</p><ul><li><code>node.removeAttribute()</code>从指定的元素中删除一个属性。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/removeAttribute">具体用法</a></li></ul><p></p><h3 id="数据代理理解与原理"><a href="#数据代理理解与原理" class="headerlink" title="数据代理理解与原理"></a>数据代理理解与原理</h3><h4 id="什么是数据代理"><a href="#什么是数据代理" class="headerlink" title="什么是数据代理"></a>什么是数据代理</h4><p>本来我们需要通过this._data.属性名才可以读取到data上的属性值的,但是我们通过数据代理,可以直接通过vm.属性名就可以读取到了</p><h4 id="数据代理干什么的-有什么用"><a href="#数据代理干什么的-有什么用" class="headerlink" title="数据代理干什么的,有什么用"></a>数据代理干什么的,有什么用</h4><p>简化了流程操作,可以看看vuex当中的mapGetters和mapState就是简化了我们的流程</p><h4 id="数据代理原理是什么"><a href="#数据代理原理是什么" class="headerlink" title="数据代理原理是什么"></a>数据代理原理是什么</h4><p>原理就是通过<code>defineProperty</code>给vm添加data当中所有的属性和属性值</p><p>并且通过<code>getter</code>返回所要读取的属性值,比如读取<code>this.msg</code>.那么就自动调用<code>getter</code>当中的方法</p><p>并且通过<code>setter</code>设置要设置的属性值,比如要设置<code>this.msg = &quot;新信息&quot;</code>,那么就会自动调用<code>setter</code>方法</p><h3 id="模板解析"><a href="#模板解析" class="headerlink" title="模板解析"></a>模板解析</h3><ul><li>模板解析只发生在初始化节点,当初始化完成后,模板代码就会被删除</li><li>解析二种模板语法<ul><li><strong>插值语法:</strong> (<code>&#123;&#123; xxx &#125;&#125;</code>) 操作的是文本节点,通过<code>textContent=动态值和正则来进行匹配</code></li><li><strong>指令语法:</strong> 操作元素节点<ul><li>事件指令(比如说v-on:xxx&#x3D;xxxx),给元素绑定直接的事件名和回调函数,(通过addEventListener(事件类型,<strong>事件回调.bind(vm)</strong>))来进行绑定(注意通过bind来改变this的指向了)</li><li>非事件指令<ul><li>v-text:  element.textContent &#x3D; 动态值</li><li>v-html: element.innerHTML &#x3D; 动态值</li><li>v-bind:class: element.className &#x3D; 动态值 + 静态class</li></ul></li></ul></li><li>除了事件指令外,解析其他模板语法的时候,都会创建一个对应的watcher对象,用于将来更新对应的节点</li></ul></li></ul><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205202135640.jpg" alt="数据绑定原理图-再次"></p><h3 id="数据双向绑定"><a href="#数据双向绑定" class="headerlink" title="数据双向绑定"></a>数据双向绑定</h3><ul><li><p>理解</p><ul><li>以input中的<code>v-model</code>来说,也就是&lt;input v-model&#x3D;”msg”&#x2F;&gt;</li><li><strong>从data到页面的绑定</strong>:输入框是根据<code>data</code>中的<code>msg</code>做初始化显示和更新显示</li><li><strong>从页面到data绑定</strong>:当输入发生改变时，会自动的将输入的最新值自动保存到<code>data</code>的<code>msg</code>上</li></ul></li><li><p>原理</p><ul><li><strong>从vm配置对象当中的<code>data</code>到页面的绑定</strong>:内部给<code>input</code>指定了动态<code>value</code>为<code>msg</code>的值，因为有单向数据绑定的存在，一旦更新msg, 输入框就会自动更新显示</li><li>**从页面到data绑定:**内部给input绑定了<code>input</code>事件监听(<code>input</code>事件监听是输入的内容和原来内容不同的时候才会执行,而<code>change</code>是改变就触发)，在回调函数中读取<code>input</code>最新的<code>value</code>值保存到<code>data</code>的<code>msg</code>属性上</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git添加代理下载速度蹭蹭上</title>
    <link href="/2022/05/19/%E5%B7%A5%E5%85%B7/git%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/"/>
    <url>/2022/05/19/%E5%B7%A5%E5%85%B7/git%E6%B7%BB%E5%8A%A0%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="clash的配置"><a href="#clash的配置" class="headerlink" title="clash的配置"></a>clash的配置</h4><p><strong>注意Allow LAN要打上勾</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172143514.png" alt="注意Allow LAN"></p><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><p>添加创建<code>.gitconfig</code>文件,内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">http</span>]<br><span class="hljs-string">proxy</span> <span class="hljs-string">=</span> <span class="hljs-string">http://127.0.0.1:7890</span><br>[<span class="hljs-string">https</span>]<br><span class="hljs-string">proxy</span> <span class="hljs-string">=</span> <span class="hljs-string">https://127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p>创建这个文件的目录到git里面看下</p><p>可以看到,我这里C:\Users\Administrator,说明我需要在这个文件下创建<code>.gitconfig</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172146336.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172147214.png" alt="创建的文件"></p><p>添加后的文件内容为</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172148586.png"></p><p>测试连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">curl -<span class="hljs-selector-tag">I</span> www<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172153230.png" alt="成功"></p><h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><p>找到git的安装路径,找到<code>\Git\etc\bash.bashrc</code>文件</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172149755.png" alt="每个人路径不同!"></p><p>添加如下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"># clash <br><span class="hljs-keyword">export</span> http_proxy=<span class="hljs-attr">http</span>:<span class="hljs-comment">//127.0.0.1:7890;export https_proxy=http://127.0.0.1:7890</span><br><br><span class="hljs-comment">//下面这里可以不用添加,这里做个记录~</span><br># V2rayN<br># <span class="hljs-keyword">export</span> http_proxy=<span class="hljs-string">&quot;socks5://127.0.0.1:7891&quot;</span> <span class="hljs-keyword">export</span>  https_proxy=<span class="hljs-attr">socks5</span>:<span class="hljs-comment">//127.0.0.1:7890</span><br></code></pre></td></tr></table></figure><p>添加完成</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172151141.png" alt="添加后"></p><p>测试连接</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">curl -<span class="hljs-selector-tag">I</span> www<span class="hljs-selector-class">.google</span><span class="hljs-selector-class">.com</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205172152855.png" alt="成功"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>git</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue当中addRoutes动态添加路由白屏解决和next(),next(&quot;/&quot;)的一些区别</title>
    <link href="/2022/05/16/%E5%89%8D%E7%AB%AF/vue%E5%BD%93%E4%B8%ADaddRoutes%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E7%99%BD%E5%B1%8F%E8%A7%A3%E5%86%B3%E5%92%8Cnext(),next()%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/16/%E5%89%8D%E7%AB%AF/vue%E5%BD%93%E4%B8%ADaddRoutes%E5%8A%A8%E6%80%81%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E7%99%BD%E5%B1%8F%E8%A7%A3%E5%86%B3%E5%92%8Cnext(),next()%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="问题产生前言"><a href="#问题产生前言" class="headerlink" title="问题产生前言"></a>问题产生前言</h3><ul><li><p>使用动态添加路由<code>router.addRoutes()</code>后进入一个页面,<strong>对着这一个页面刷新一下,然后页面就白屏了并且不管刷新多少次都没有用,依旧是白屏</strong>,只有重新进入页面才有效果</p><ul><li>比如对于网站<code>http://localhost:9528/#/product/attr/list</code>,现在显示是正常的,对着这一个页面刷新一下,页面就白屏了,刷新多少次都没有用,必须要重新访问一次路由才可以<del>必须要重新访问一次网站才可以(只要不再次刷新就可以</del>)</li></ul></li><li><p><a href="https://blog.csdn.net/qq_41912398/article/details/109231418">本文参考学习了该博主的文章</a></p></li></ul><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li><p>动态添加路由无非就是几个过程</p><ol><li>router.addRoutes();</li><li>页面访问动态生成的路由</li></ol></li><li><p><strong>步骤1没有问题,问题就出现在页面访问动态生成的路由上面</strong></p></li></ul><h4 id="我们再来分析下过程"><a href="#我们再来分析下过程" class="headerlink" title="我们再来分析下过程"></a>我们再来分析下过程</h4><ol><li>页面被刷新,路由信息被重新计算生成并通过<code>addRoutes</code>方法动态添加到了<code>router</code>当中</li><li><code>addRoutes</code>方法还没有完成,用户就已经在访问界面了(可以理解为<code>addRoutes</code>和访问路由同时进行)</li><li>用户一边访问界面,后面一边动态添加路由,<code>addRoutes</code>相当于还没有完成就被访问了路由(可以理解访问了一个此刻不存在的路由导致的白屏)</li><li>所以必须要必须要重新访问一次路由才可以解决白屏问题</li></ol><h4 id="要怎么解决这个问题"><a href="#要怎么解决这个问题" class="headerlink" title="要怎么解决这个问题?"></a>要怎么解决这个问题?</h4><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><ul><li><p>不应该使用<code>next()</code></p></li><li><p>全局前置守卫使用<code>next(&#123; ...to, replace: true &#125;)</code></p><ul><li><p><code>next(&#123; ...to&#125;);</code> 也是可以的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">next</span>(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)中的<span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span><br><br>只是一个设置信息，告诉<span class="hljs-variable constant_">VUE</span>本次操作后，不能通过浏览器后退按钮，返回前一个路由<br><span class="hljs-comment">//换句话说,你使用了replace:true后重新访问了网站</span><br><span class="hljs-comment">//就不可以通过浏览器来返回页面之前和之后的网站了</span><br><br>举例子: <br><br><span class="hljs-comment">//比如我刷新之前依次!依次!依次!访问了下面二个网站</span><br>网站<span class="hljs-number">1</span>: <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:9528/#/product/attr/list</span><br>网站<span class="hljs-number">2</span>: <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:9528/#/product/spu/list</span><br>那么按照平时的来说,我刷新页面依旧可以使用浏览器的前进后退按钮进行跳转了<br>后退按下,跳转到了网站<span class="hljs-number">1</span>,然后此时前进按下,跳转到网站<span class="hljs-number">2</span><br><br><span class="hljs-comment">//但是如果使用了replace:true</span><br>那么刷新网页后就不可以通过前进后退按钮来后退了,之前记录都无效了<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="动态添加路由-全局前置守卫应该修改成为如下代码-只是示例参考"><a href="#动态添加路由-全局前置守卫应该修改成为如下代码-只是示例参考" class="headerlink" title="动态添加路由,全局前置守卫应该修改成为如下代码(只是示例参考)"></a>动态添加路由,全局前置守卫应该修改成为如下代码(只是示例参考)</h5><ul><li>下面代码是来自vue-element-admin模板当中src\permission.js文件夹的~这里进行了修改举例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如果token存在</span><br><span class="hljs-keyword">if</span> (hasToken) &#123;<br>    <span class="hljs-comment">//token存在了还访问登录界面,就跳转到首页去</span><br>    <span class="hljs-keyword">if</span> (to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>        <span class="hljs-title function_">next</span>(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>&#125;);<br>        <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>();<br>    &#125;<br>    <span class="hljs-comment">//token存在并且访问的不是登录地址</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//获取用户名</span><br>        <span class="hljs-keyword">const</span> hasGetUserInfo = store.<span class="hljs-property">getters</span>.<span class="hljs-property">name</span>;<br>        <span class="hljs-comment">//用户名存在</span><br>        <span class="hljs-keyword">if</span> (hasGetUserInfo) &#123;<br>            <span class="hljs-comment">//放行</span><br>            <span class="hljs-title function_">next</span>()<br>        &#125;<br>        <span class="hljs-comment">//用户名不存在,说明token过期了或者被删除了</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//发送请求获取并存储用户信息</span><br>                <span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>)<br>                <span class="hljs-comment">//用于是动态添加的路由,所以这里应该修改</span><br>                <span class="hljs-comment">// next();</span><br>                <span class="hljs-comment">//改为这个</span><br>                <span class="hljs-title function_">next</span>(&#123;...to&#125;);<br>                <span class="hljs-comment">//或者</span><br>                <span class="hljs-comment">// next(&#123;...to,replace:true&#125;);</span><br>            &#125;<br>            <span class="hljs-comment">//发生错误</span><br>            <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-comment">//移除token信息(不移除这个全局前置守卫就是死循环!)</span><br>                <span class="hljs-keyword">await</span> store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;user/resetToken&#x27;</span>)<br>                <span class="hljs-comment">//弹出信息框</span><br>                <span class="hljs-title class_">Message</span>.<span class="hljs-title function_">error</span>(error || <span class="hljs-string">&#x27;Has Error&#x27;</span>)<br>                <span class="hljs-comment">//跳转到登录页面</span><br>                <span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>                <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//token不存在</span><br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//如果用户访问的是登录界面,放行</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;/login&#x27;</span> == to.<span class="hljs-property">path</span>) &#123;<br>        <span class="hljs-title function_">next</span>()<br>    &#125;<br>    <span class="hljs-comment">//用户访问的不是登录界面,跳转到登录界面并携带跳转之前的网址</span><br>    <span class="hljs-comment">//这样子当用户登录成功后就可以跳转到用户之前想去的网址</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-string">`/login?redirect=<span class="hljs-subst">$&#123;to.path&#125;</span>`</span>)<br>        <span class="hljs-title class_">NProgress</span>.<span class="hljs-title function_">done</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="为什么next-换为next-…to-或者next-…to-replace-true-就可以了-next和这二个区别在哪里"><a href="#为什么next-换为next-…to-或者next-…to-replace-true-就可以了-next和这二个区别在哪里" class="headerlink" title="为什么next()换为next({…to})(或者next({…to,replace:true}))就可以了,next和这二个区别在哪里"></a>为什么next()换为next({…to})(或者next({…to,replace:true}))就可以了,next和这二个区别在哪里</h3><h4 id="首先我们需要知道路由守卫-全局前置守卫为例子"><a href="#首先我们需要知道路由守卫-全局前置守卫为例子" class="headerlink" title="首先我们需要知道路由守卫(全局前置守卫为例子)"></a>首先我们需要知道路由守卫(全局前置守卫为例子)</h4><ul><li><p><strong>先上代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>to <span class="hljs-comment">// 要去的路由</span><br><span class="hljs-keyword">from</span> <span class="hljs-comment">// 当前路由</span><br><span class="hljs-title function_">next</span>() <span class="hljs-comment">// 放行的意思</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>代码很简单,但是除了<code>next()</code> 我们应该还见过<code>next(&quot;/&quot;)</code> <code>next(&quot;/login&quot;)</code> <code>next(&#123;...to&#125;)</code> <code>next(&#123;...to,replace:true&#125;)</code>等</p></li><li><p>在路由守卫当中,只有<code>next()</code>是放行(放你通过,不会在审核),而<code>next(&quot;/&quot;)</code> <code>next(&quot;/login&quot;)</code> <code>next(&#123;...to&#125;)</code> <code>next(&#123;...to,replace:true&#125;</code> 等,都是<strong>中断当中的全局前置守卫,执行新的全局前置守卫</strong></p><ul><li><p><strong>中断当中的全局前置守卫,执行新的全局前置守卫</strong>意思就是会<strong>再次调用beforeEach</strong></p></li><li><p>如下面代码例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//比如这个,你一定以为是跳转到&quot;/login&quot;就完事了</span><br><span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>&#125;<br><span class="hljs-comment">//实际上执行的过程代码</span><br><span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/logon&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>   <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/logon&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/logon&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    beforeEach...  <span class="hljs-comment">// 一直循环下去...... , 因为我们没有使用 next() 放行</span><br> &#125;<br>  &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>一直循环下去导致溢出</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205162316978.png" alt="Maximum call stack size exceeded"></p></li><li><p>再来看看这里例子 <strong>地址栏输入&#x2F;home</strong>(从哪里来的不重要,我们只需要关注到哪里去)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">//如果目的地址等于 &#x27;/home&#x27;</span><br>   <span class="hljs-comment">//就跳转到 登录地址 &#x27;/login&#x27;</span><br>    <span class="hljs-keyword">if</span>(to.<span class="hljs-property">path</span> === <span class="hljs-string">&#x27;/home&#x27;</span>) &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/login&#x27;</span>)<br>    &#125; <br>    <span class="hljs-comment">// 如果要去的地方不是 /home ,就放行</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>();<span class="hljs-comment">//放行</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//访问过程如下代码</span><br><span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">//进行了中断跳转,会再次调用beforeEach去判断,此时的目的地址是&#x27;login&#x27;了</span><br>   <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 现在要去的地方不是 /home ， 因此放行</span><br>     <span class="hljs-title function_">next</span>();<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看看这代码执行的流程图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205192128061.jpg" alt="执行的流程图"></p></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li><code>next()</code>是放行,不会引发beforeEach再次调用</li><li><code>next(&quot;/&quot;)</code> <code>next(&quot;/login&quot;)</code> <code>next(&#123;...to&#125;)</code> <code>next(&#123;...to,replace:true&#125;)</code>这些是中断(也就是会<strong>再次调用beforeEach</strong>),直到执行到了next()才会停止中断</li></ul><h4 id="大家可以看看这些全局前置守卫死循环的例子"><a href="#大家可以看看这些全局前置守卫死循环的例子" class="headerlink" title="大家可以看看这些全局前置守卫死循环的例子"></a>大家可以看看这些全局前置守卫死循环的例子</h4><p>这些都是死循环,使用就出现<code>Maximum call stack size exceeded</code></p><h5 id="死循环1"><a href="#死循环1" class="headerlink" title="死循环1"></a>死循环1</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;beforeEach&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-title function_">next</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="死循环2"><a href="#死循环2" class="headerlink" title="死循环2"></a>死循环2</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> user = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;user&#x27;</span>));<br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>       <span class="hljs-title function_">next</span>(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span> &#125;); <span class="hljs-comment">// 没有用户，就跳去登录</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="死循环3"><a href="#死循环3" class="headerlink" title="死循环3"></a>死循环3</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span>&#123;<br>  <span class="hljs-keyword">if</span> (sessionStorage.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>)) &#123;<br>     <span class="hljs-keyword">if</span>(to.<span class="hljs-property">path</span> === <span class="hljs-string">&quot;/login&quot;</span>)&#123;<br>       <span class="hljs-title function_">next</span>(&#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&quot;/dashboard&quot;</span>&#125;)<br>     &#125;<br>     <span class="hljs-keyword">else</span>&#123;<br>       <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;1&quot;</span>)<br>       <span class="hljs-title function_">next</span>()<br>     &#125;     <br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">next</span>(&#123;<span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/login&quot;</span>&#125;)   <span class="hljs-comment">// 会再次执行前置导航守卫，由于路径变化</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尚品汇Vue项目 前台+后台完成品源码(含在线演示)</title>
    <link href="/2022/05/16/%E5%89%8D%E7%AB%AF/%E5%B0%9A%E5%93%81%E6%B1%87Vue%E9%A1%B9%E7%9B%AE%20%E5%89%8D%E5%8F%B0+%E5%90%8E%E5%8F%B0%E5%AE%8C%E6%88%90%E5%93%81%E6%BA%90%E7%A0%81(%E5%90%AB%E5%9C%A8%E7%BA%BF%E6%BC%94%E7%A4%BA)/"/>
    <url>/2022/05/16/%E5%89%8D%E7%AB%AF/%E5%B0%9A%E5%93%81%E6%B1%87Vue%E9%A1%B9%E7%9B%AE%20%E5%89%8D%E5%8F%B0+%E5%90%8E%E5%8F%B0%E5%AE%8C%E6%88%90%E5%93%81%E6%BA%90%E7%A0%81(%E5%90%AB%E5%9C%A8%E7%BA%BF%E6%BC%94%E7%A4%BA)/</url>
    
    <content type="html"><![CDATA[<h2 id="尚品汇前台练习"><a href="#尚品汇前台练习" class="headerlink" title="尚品汇前台练习"></a>尚品汇前台练习</h2><ul><li>在线地址演示1(前台项目): <a href="http://82.156.205.62:8081/">http://82.156.205.62:8081/</a></li><li>在线地址演示2(前台项目): <a href="http://82.156.205.62:8083/">http://82.156.205.62:8083/</a></li></ul><h3 id="自己添加了下收货地址和删除收货地址-样式没有过多去处理"><a href="#自己添加了下收货地址和删除收货地址-样式没有过多去处理" class="headerlink" title="自己添加了下收货地址和删除收货地址(样式没有过多去处理~)"></a>自己添加了下收货地址和删除收货地址(样式没有过多去处理~)</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142230.png"></p><h3 id="有时候主页的一些数据老是获取不到-用了假数据-但是数据内容和接口地址是一样的"><a href="#有时候主页的一些数据老是获取不到-用了假数据-但是数据内容和接口地址是一样的" class="headerlink" title="有时候主页的一些数据老是获取不到,用了假数据(但是数据内容和接口地址是一样的)"></a>有时候主页的一些数据老是获取不到,用了假数据(但是数据内容和接口地址是一样的)</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142423.png"></p><h3 id="添加地址"><a href="#添加地址" class="headerlink" title="添加地址"></a>添加地址</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142718.png"></p><h3 id="信息弹窗全部改为element-ui的message提示"><a href="#信息弹窗全部改为element-ui的message提示" class="headerlink" title="信息弹窗全部改为element-ui的message提示"></a>信息弹窗全部改为element-ui的message提示</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142801.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142829.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220503142855.png"></p><h3 id="项目依赖安装"><a href="#项目依赖安装" class="headerlink" title="项目依赖安装"></a>项目依赖安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h3 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> serve<br></code></pre></td></tr></table></figure><h3 id="项目打包编译"><a href="#项目打包编译" class="headerlink" title="项目打包编译"></a>项目打包编译</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> build<br></code></pre></td></tr></table></figure><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><h4 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/superBiuBiuMan/g</span>shop_project<br></code></pre></td></tr></table></figure><h4 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/superBiuBiu/g</span>shop_project<br></code></pre></td></tr></table></figure><h2 id="尚品汇后台练习"><a href="#尚品汇后台练习" class="headerlink" title="尚品汇后台练习"></a>尚品汇后台练习</h2><ul><li>在线演示地址1(后台项目): <a href="http://82.156.205.62:9261/">http://82.156.205.62:9261</a></li><li>在线演示地址2(后台项目): <a href="http://82.156.205.62:9260/">http://82.156.205.62:9260</a></li></ul><h3 id="首页登录"><a href="#首页登录" class="headerlink" title="首页登录"></a>首页登录</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161600234.png" alt="登录界面"></p><h3 id="首页图表"><a href="#首页图表" class="headerlink" title="首页图表"></a>首页图表</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161601799.png" alt="首页图表"></p><h3 id="品牌管理"><a href="#品牌管理" class="headerlink" title="品牌管理"></a>品牌管理</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161601468.png" alt="品牌管理"></p><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161602080.png" alt="权限管理-用户管理"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161600121.png"></p><h3 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161601594.png" alt="商品管理"></p><h3 id="项目依赖安装-1"><a href="#项目依赖安装-1" class="headerlink" title="项目依赖安装"></a>项目依赖安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><h3 id="项目运行-1"><a href="#项目运行-1" class="headerlink" title="项目运行"></a>项目运行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><h3 id="项目打包编译-1"><a href="#项目打包编译-1" class="headerlink" title="项目打包编译"></a>项目打包编译</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//构建生产环境</span><br>npm run build:prod<br><span class="hljs-comment">//构成测试环境</span><br>npm run build:stage<br></code></pre></td></tr></table></figure><h4 id="如果想在nginx上线-注意配置转发和删除-env-production的里面的内容-以生产环境打包为例"><a href="#如果想在nginx上线-注意配置转发和删除-env-production的里面的内容-以生产环境打包为例" class="headerlink" title="如果想在nginx上线,注意配置转发和删除.env.production的里面的内容(以生产环境打包为例)"></a>如果想在nginx上线,注意配置转发和删除.env.production的里面的内容(以生产环境打包为例)</h4><ul><li>需要删除Vue_APP_BASE_API里面的内容~</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161644946.png" alt=".env.production文件"></p><ul><li><p>nginx转发设置</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161646156.png" alt="nginx转发设置"></p></li></ul><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><h4 id="国外-1"><a href="#国外-1" class="headerlink" title="国外"></a>国外</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/superBiuBiuMan/g</span>shop_project_after<br></code></pre></td></tr></table></figure><h4 id="国内-1"><a href="#国内-1" class="headerlink" title="国内"></a>国内</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/superBiuBiu/g</span>shop_project_after<br></code></pre></td></tr></table></figure><h4 id="如果角色权限不能正常赋予请看这里"><a href="#如果角色权限不能正常赋予请看这里" class="headerlink" title="如果角色权限不能正常赋予请看这里"></a>如果角色权限不能正常赋予请看这里</h4><ul><li>elementUI tree在收集数据的时候,并不会在上几级的数据放入,所以会导致用户权限不能正常赋予,这里给出了解决办法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">vue elementUI tree树形控件获取父节点<span class="hljs-variable constant_">ID</span>的实例<br><br>修改源码:<br>情况<span class="hljs-number">1</span>: element-ui没有实现按需引入打包<br>  node_modules\element-ui\lib\element-ui.<span class="hljs-property">common</span>.<span class="hljs-property">js</span>    <span class="hljs-number">25382</span>行修改源码  去掉 <span class="hljs-string">&#x27;includeHalfChecked &amp;&amp;&#x27;</span><br>  <span class="hljs-comment">// if ((child.checked || includeHalfChecked &amp;&amp; child.indeterminate) &amp;&amp; (!leafOnly || leafOnly &amp;&amp; child.isLeaf)) &#123;</span><br>  <span class="hljs-keyword">if</span> ((child.<span class="hljs-property">checked</span> || child.<span class="hljs-property">indeterminate</span>) &amp;&amp; (!leafOnly || leafOnly &amp;&amp; child.<span class="hljs-property">isLeaf</span>)) &#123;<br><br>      <br>情况<span class="hljs-number">2</span>: element-ui实现了按需引入打包<br>  node_modules\element-ui\lib\tree.<span class="hljs-property">js</span>    <span class="hljs-number">1051</span>行修改源码  去掉 <span class="hljs-string">&#x27;includeHalfChecked &amp;&amp;&#x27;</span><br>  <span class="hljs-comment">// if ((child.checked || includeHalfChecked &amp;&amp; child.indeterminate) &amp;&amp; (!leafOnly || leafOnly &amp;&amp; child.isLeaf)) &#123;</span><br>  <span class="hljs-keyword">if</span> ((child.<span class="hljs-property">checked</span> || child.<span class="hljs-property">indeterminate</span>) &amp;&amp; (!leafOnly || leafOnly &amp;&amp; child.<span class="hljs-property">isLeaf</span>)) &#123;<br><br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意!!!!!!!!!"></a>注意!!!!!!!!!</h2><ul><li><strong>vue-admin管理模板npm安装依赖后npm run de提示依赖core-js,@babel等报错的解决办法</strong></li></ul><h3 id="安装别人做好的后台管理项目-npm-run-dev后报错"><a href="#安装别人做好的后台管理项目-npm-run-dev后报错" class="headerlink" title="安装别人做好的后台管理项目,npm run dev后报错"></a>安装别人做好的后台管理项目,npm run dev后报错</h3><ul><li>都是这种<code>core-js/modules/es.array.concat.js </code>什么的错误</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151908067.png" alt="报错项"></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ol><li><p>找到项目下的babel.config.js <strong>原来的presets改为下面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">presets</span>: [ [ <span class="hljs-string">&quot;@vue/app&quot;</span>, &#123; <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&quot;entry&quot;</span> &#125; ] ],<br></code></pre></td></tr></table></figure></li><li><p>改好之后</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151909614.png" alt="原来的presets改为下面"></p><ol start="3"><li><p>重新运行<code>npm run dev</code> 成功!</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151910231.png" alt="成功"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Echarts图表的基本使用</title>
    <link href="/2022/05/16/%E5%89%8D%E7%AB%AF/Echarts%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/16/%E5%89%8D%E7%AB%AF/Echarts%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Echarts的初始化使用"><a href="#Echarts的初始化使用" class="headerlink" title="Echarts的初始化使用"></a>Echarts的初始化使用</h3><ul><li><p>引入什么的就不多说了,普通的js脚本怎么引入echarts就怎么引入</p></li><li><p>大概初始化的步骤</p><ul><li><ol><li>获取DOM(用于绘制表格)</li><li>依据获取的DOM对象初始化echarts(使得这个DOM对象用于展示图表数据)</li><li>书写echarts配置对象</li><li>第二步返回的echarts对象调用setOption方法并传入第三步书写的配置对象</li></ol></li></ul></li><li><p><strong>别忘记设置Dom容器的宽高了(css设置即可)</strong></p></li><li><p>好像如果是同一个echarts实例化对象,再次调用setOption方法,不会造成图表全部重新绘制,只会造成部分修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//重新设置图表的标题,在这之前已经调用过setOption了</span><br><span class="hljs-comment">//所以只会重新绘制图表标题</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">table1</span>.<span class="hljs-title function_">setOption</span>(&#123;<br>    <span class="hljs-attr">title</span>:&#123;<br>    <span class="hljs-attr">text</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">showTitle</span>+<span class="hljs-string">&quot;趋势&quot;</span><br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#table1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//1.获取DOM容器</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> dom1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#table1&quot;</span>)</span><br><span class="language-javascript">        <span class="hljs-comment">//2.根据DOM容器初始化echarts实例</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(dom1);</span><br><span class="language-javascript">        <span class="hljs-comment">//3.设置echarts展示的数据和设置图表</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> options1 = &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//设置图表标题</span></span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//主标题文本</span></span><br><span class="language-javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;数据可视化&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//副标题文本</span></span><br><span class="language-javascript">                <span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;echarts的基本使用&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//设置主标题样式</span></span><br><span class="language-javascript">                <span class="hljs-attr">textStyle</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;hotpink&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">fontStyle</span>: <span class="hljs-string">&#x27;italic&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//设置副标题样式</span></span><br><span class="language-javascript">                <span class="hljs-attr">subtextStyle</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;yellow&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//设置居中</span></span><br><span class="language-javascript">                <span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//设置x坐标</span></span><br><span class="language-javascript">            <span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;衣服&quot;</span>, <span class="hljs-string">&quot;直播&quot;</span>, <span class="hljs-string">&quot;游戏&quot;</span>, <span class="hljs-string">&quot;电影&quot;</span>],</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//设置y坐标</span></span><br><span class="language-javascript">            <span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="language-javascript">                </span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//系列的设置,绘制怎么样类型的图表,数据的展示在这里</span></span><br><span class="language-javascript">            <span class="hljs-attr">series</span>:[</span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>:[<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">26</span>,<span class="hljs-number">24</span>],</span><br><span class="language-javascript">                    <span class="hljs-comment">//设置颜色</span></span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        <span class="hljs-comment">//4.传入写好的配置项</span></span><br><span class="language-javascript">        table1.<span class="hljs-title function_">setOption</span>(options1);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131139048.png"></p><h4 id="Echarts的setOption配置对象"><a href="#Echarts的setOption配置对象" class="headerlink" title="Echarts的setOption配置对象"></a>Echarts的setOption配置对象</h4><ul><li><code>grid</code>设置echarts的对于容器的位置 <a href="https://echarts.apache.org/zh/option.html#grid">官网API</a><ul><li>left,right,top,bottom设置为0可以使得表格占满容器</li></ul></li></ul><h4 id="Echarts的series的配置对象"><a href="#Echarts的series的配置对象" class="headerlink" title="Echarts的series的配置对象"></a>Echarts的series的配置对象</h4><ul><li><p>设置渐变填充折线图</p><ul><li><p>关键配置参数<code>areaStyle</code> <a href="https://echarts.apache.org/zh/option.html#series-line.areaStyle">官方API</a></p></li><li><p><a href="https://echarts.apache.org/zh/option.html#color">官方渐变参考代码</a></p></li><li><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">series</span>:[<br>&#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>,<br>  <span class="hljs-attr">data</span>:[<span class="hljs-number">45</span>,<span class="hljs-number">35</span>,<span class="hljs-number">25</span>,<span class="hljs-number">87</span>,<span class="hljs-number">45</span>,<span class="hljs-number">89</span>],<br>  <span class="hljs-attr">itemStyle</span>:&#123;<br><span class="hljs-comment">//   图形透明度。支持从 0 到 1 的数字，为 0 时不绘制该图形。</span><br><span class="hljs-attr">opacity</span>:<span class="hljs-number">0</span>,<br><span class="hljs-comment">//颜色设置为紫色</span><br><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;purple&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">//areaStyle区域填充样式。设置后显示成区域面积图。</span><br><span class="hljs-comment">//https://echarts.apache.org/zh/option.html#series-line.areaStyle</span><br>  <span class="hljs-attr">areaStyle</span>:&#123;<br>  <span class="hljs-comment">//支持渐变 https://echarts.apache.org/zh/option.html#color</span><br>  <span class="hljs-attr">color</span>:&#123;<br>  <span class="hljs-comment">//线性渐变</span><br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;line&#x27;</span>,<br><span class="hljs-attr">x</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">y</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">r</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">colorStops</span>: [&#123;<br><span class="hljs-attr">offset</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#ce9dce&#x27;</span> <span class="hljs-comment">// 0% 处的颜色</span><br>&#125;, <br><br>&#123;<br><span class="hljs-attr">offset</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#dcb9dc&#x27;</span> <span class="hljs-comment">// 100% 处的颜色</span><br>&#125; <br>],<br><span class="hljs-attr">global</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 缺省为 false</span><br>  &#125;<br>  &#125;<br>&#125;<br>],<br></code></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205132032206.png"></p><h3 id="反向柱形图-也就是X轴和Y轴反过来显示"><a href="#反向柱形图-也就是X轴和Y轴反过来显示" class="headerlink" title="反向柱形图(也就是X轴和Y轴反过来显示)"></a>反向柱形图(也就是X轴和Y轴反过来显示)</h3><ul><li><p>原来的x轴变为了y轴,原来的y轴变为了x轴</p></li><li><p>只需要设置yAxis对象当中的<code>type:&quot;category&quot;</code>和x轴的数据放置在yAxis当中,然后把x部分删除<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205132058653.png"></p></li><li><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#table1</span>,<span class="hljs-selector-id">#table2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/echarts/5.3.2/echarts.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//1.获取DOM容器</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> dom1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#table1&quot;</span>)</span><br><span class="language-javascript"><span class="hljs-comment">//2.根据DOM容器初始化echarts实例</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(dom1);</span><br><span class="language-javascript"><span class="hljs-comment">//3.设置echarts展示的数据和设置图表</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> options1 = &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//设置图表标题</span></span><br><span class="language-javascript"><span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//主标题文本</span></span><br><span class="language-javascript"><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;数据可视化&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-comment">//副标题文本</span></span><br><span class="language-javascript"><span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;echarts的基本使用&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-comment">//设置主标题样式</span></span><br><span class="language-javascript"><span class="hljs-attr">textStyle</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;hotpink&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">fontStyle</span>: <span class="hljs-string">&#x27;italic&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//设置副标题样式</span></span><br><span class="language-javascript"><span class="hljs-attr">subtextStyle</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;yellow&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//设置居中</span></span><br><span class="language-javascript"><span class="hljs-attr">left</span>: <span class="hljs-string">&#x27;center&#x27;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//设置x坐标</span></span><br><span class="language-javascript"><span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">// data: [&quot;衣服&quot;, &quot;直播&quot;, &quot;游戏&quot;, &quot;电影&quot;],</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//设置y坐标</span></span><br><span class="language-javascript"><span class="hljs-attr">yAxis</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;category&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: [<span class="hljs-string">&quot;衣服&quot;</span>, <span class="hljs-string">&quot;直播&quot;</span>, <span class="hljs-string">&quot;游戏&quot;</span>, <span class="hljs-string">&quot;电影&quot;</span>],</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//系列的设置,绘制怎么样类型的图表,数据的展示在这里</span></span><br><span class="language-javascript"><span class="hljs-attr">series</span>:[</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:[<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">26</span>,<span class="hljs-number">24</span>],</span><br><span class="language-javascript"><span class="hljs-comment">//设置颜色</span></span><br><span class="language-javascript"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">],</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//4.传入写好的配置项</span></span><br><span class="language-javascript">table1.<span class="hljs-title function_">setOption</span>(options1);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>效果图<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205132059769.png"></p></li></ul><h3 id="反向柱形图实现防进度条的静态图"><a href="#反向柱形图实现防进度条的静态图" class="headerlink" title="反向柱形图实现防进度条的静态图"></a>反向柱形图实现防进度条的静态图</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205132106738.png"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">dom</span>);<br>table1.<span class="hljs-title function_">setOption</span>(&#123;<br>  <span class="hljs-comment">//设置x轴,现在x轴在水平线上了</span><br>  <span class="hljs-comment">//min最小值 范围</span><br>  <span class="hljs-comment">//max:最大值 范围</span><br>  <span class="hljs-attr">xAxis</span>:&#123;<span class="hljs-attr">show</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">min</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">max</span>:<span class="hljs-number">100</span>&#125;,<br>  <span class="hljs-comment">//设置y轴,现在y轴在垂直线上了</span><br>  <span class="hljs-attr">yAxis</span>:&#123;<span class="hljs-attr">show</span>:<span class="hljs-literal">false</span>,<span class="hljs-attr">type</span>:<span class="hljs-string">&quot;category&quot;</span>&#125;,<br>  <span class="hljs-comment">//设置位置</span><br>  <span class="hljs-attr">grid</span>:&#123;<br>  <span class="hljs-attr">left</span>:<span class="hljs-number">0</span>,<br>  <span class="hljs-attr">right</span>:<span class="hljs-number">0</span>,<br>  <span class="hljs-attr">top</span>:<span class="hljs-number">0</span>,<br>  <span class="hljs-attr">bottom</span>:<span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">series</span>:[<br>  &#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;bar&#x27;</span>,<br>  <span class="hljs-attr">barWidth</span>:<span class="hljs-number">10</span>,<br>  <span class="hljs-comment">//设置颜色</span><br>  <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#92b532&quot;</span>,<br>  <span class="hljs-attr">data</span>:[<span class="hljs-number">78</span>],<br>       <span class="hljs-comment">//图形上的文本标签，可用于说明图形的一些数据信息，比如值，名称等。  </span><br>          <span class="hljs-comment">//label:&#123;</span><br>          <span class="hljs-comment">//    show:true,</span><br>          <span class="hljs-comment">//    //内容</span><br>          <span class="hljs-comment">//    formatter:&quot;|&quot;,</span><br>          <span class="hljs-comment">//    //标签的位置。</span><br>          <span class="hljs-comment">//    position:&#x27;right&#x27;</span><br>          <span class="hljs-comment">//&#125;</span><br>  &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="一个容器显示多个图表"><a href="#一个容器显示多个图表" class="headerlink" title="一个容器显示多个图表"></a>一个容器显示多个图表</h3><ul><li><p>使用配置对象当中的<code>series</code>属性</p></li><li><p>这就是为什么<code>series</code>是一个数组而不是一个对象了~  <a href="#series">series图</a></p><ul><li><p>series当中的格式 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;<br>...<br><span class="hljs-attr">series</span>:[<br><span class="hljs-comment">//图表1</span><br>&#123;....&#125;,<br><span class="hljs-comment">//图表2</span><br>&#123;....&#125;<br>]<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-id">#dom1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#dom1&quot;</span>))</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> options = &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//设置标题</span></span><br><span class="language-javascript">            <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//标题文字</span></span><br><span class="language-javascript">                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;月销售数据&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//副标题文字</span></span><br><span class="language-javascript">                <span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;销售人员必看!&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">left</span>:<span class="hljs-string">&#x27;center&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//主标题样式</span></span><br><span class="language-javascript">                <span class="hljs-attr">textStyle</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//副标题样式</span></span><br><span class="language-javascript">                <span class="hljs-attr">subtextStyle</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span></span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//x轴</span></span><br><span class="language-javascript">            <span class="hljs-attr">xAxis</span>:&#123;</span><br><span class="language-javascript">                <span class="hljs-attr">data</span>:[<span class="hljs-string">&#x27;Mon&#x27;</span>,<span class="hljs-string">&#x27;Tue&#x27;</span>,<span class="hljs-string">&#x27;Wed&#x27;</span>,<span class="hljs-string">&#x27;Thu&#x27;</span>,<span class="hljs-string">&#x27;Fri&#x27;</span>,<span class="hljs-string">&#x27;Sat&#x27;</span>,<span class="hljs-string">&#x27;Sun&#x27;</span>]</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">// y轴</span></span><br><span class="language-javascript">            <span class="hljs-attr">yAxis</span>:&#123;&#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//一系列数据展示</span></span><br><span class="language-javascript">            <span class="hljs-attr">series</span>:[</span><br><span class="language-javascript">                <span class="hljs-comment">//图表1-显示柱形图</span></span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>:[<span class="hljs-number">125</span>,<span class="hljs-number">200</span>,<span class="hljs-number">150</span>,<span class="hljs-number">68</span>,<span class="hljs-number">52</span>,<span class="hljs-number">103</span>,<span class="hljs-number">146</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#5470c6&quot;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//图表2-显示折线图</span></span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>:[<span class="hljs-number">125</span>,<span class="hljs-number">200</span>,<span class="hljs-number">150</span>,<span class="hljs-number">68</span>,<span class="hljs-number">52</span>,<span class="hljs-number">103</span>,<span class="hljs-number">146</span>],</span><br><span class="language-javascript">                    <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//图表3-饼图</span></span><br><span class="language-javascript">                &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;pie&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">//设置饼图半径(像素值)</span></span><br><span class="language-javascript">                    <span class="hljs-attr">radius</span>:<span class="hljs-number">20</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>:[</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">125</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Mon&#x27;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">200</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Tue&#x27;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">150</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Wed&#x27;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">68</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Thu&quot;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">52</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Fri&#x27;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">value</span>:<span class="hljs-number">103</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Sat&#x27;</span>&#125;,</span><br><span class="language-javascript">                        &#123;<span class="hljs-attr">vaue</span>:<span class="hljs-number">146</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Sun&#x27;</span>&#125;</span><br><span class="language-javascript">                    ],</span><br><span class="language-javascript">                    <span class="hljs-comment">//设置宽度</span></span><br><span class="language-javascript">                    <span class="hljs-attr">width</span>:<span class="hljs-number">200</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">height</span>:<span class="hljs-number">200</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">//设置位置</span></span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>:<span class="hljs-number">200</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">top</span>:<span class="hljs-number">50</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">        table1.<span class="hljs-title function_">setOption</span>(options)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205170001504.png"></p><h3 id="dataset数据集的使用"><a href="#dataset数据集的使用" class="headerlink" title="dataset数据集的使用"></a>dataset数据集的使用</h3><ul><li><p>我理解的数据集就是<code>series</code>当中的每一个对象所对应的数据,方便我们统一处理数据</p></li><li><p>主要注意的是:</p><ul><li>如果我们设置了dataset数据集,而没有在series当中的对象当中使用encode去指明映射那一列</li><li>ECharts 就按最常见的理解进行默认映射：<strong>X 坐标轴声明为类目轴</strong>，默认情况下会自动对应到 dataset.source 中的第一列；</li><li>三个柱图系列，一一对应到 dataset.source 中后面每一列。(也就是按照series当中对象的顺序依次对应)</li></ul></li><li><p>dataset数据集基本使用简略代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">option = &#123;<br>    <span class="hljs-attr">dataset</span>: &#123;<br>        <span class="hljs-attr">source</span>: [<br>            <span class="hljs-comment">// 每一列称为一个『维度』。</span><br>            <span class="hljs-comment">// 这里分别是维度 0、1、2、3、4。</span><br>            [<span class="hljs-number">12</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">2</span>],<br>            [<span class="hljs-number">23</span>, <span class="hljs-number">6</span>, <span class="hljs-number">16</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>],<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">series</span>: &#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>        <span class="hljs-attr">encode</span>: &#123;<br>            <span class="hljs-comment">//使用0维度数据</span><br>            <span class="hljs-attr">x</span>: <span class="hljs-number">0</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><a href="https://echarts.apache.org/handbook/zh/concepts/dataset/#%E5%9C%A8%E7%B3%BB%E5%88%97%E4%B8%AD%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE">具体可参考Echarts官网数据集概念</a></p></li></ul><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            *&#123;</span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">                <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            <span class="hljs-selector-id">#dom1</span>&#123;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#dom1&quot;</span>))</span><br><span class="language-javascript">            <span class="hljs-comment">//设置数据集</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> data = [</span><br><span class="language-javascript">                <span class="hljs-comment">//分别对应柱状图,折线图,饼图</span></span><br><span class="language-javascript">                <span class="hljs-comment">// 如果后面没有设置encode映射</span></span><br><span class="language-javascript">                <span class="hljs-comment">//ECharts 就按最常见的理解进行默认映射：</span></span><br><span class="language-javascript">                <span class="hljs-comment">//X 坐标轴声明为类目轴，默认情况下会自动对应到 dataset.source 中的第一列；</span></span><br><span class="language-javascript">                <span class="hljs-comment">//三个柱图系列，一一对应到 dataset.source 中后面每一列。(也就是按照series当中对象的顺序依次对应)</span></span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Mon&#x27;</span>,<span class="hljs-string">&#x27;Mon&#x27;</span>,<span class="hljs-number">125</span>,<span class="hljs-number">45</span>,<span class="hljs-number">35</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Tue&#x27;</span>,<span class="hljs-string">&#x27;Tue&#x27;</span>,<span class="hljs-number">54</span>,<span class="hljs-number">53</span>,<span class="hljs-number">15</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Wed&#x27;</span>,<span class="hljs-string">&#x27;Wed&#x27;</span>,<span class="hljs-number">85</span>,<span class="hljs-number">86</span>,<span class="hljs-number">38</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Thu&#x27;</span>,<span class="hljs-string">&#x27;Thu&#x27;</span>,<span class="hljs-number">79</span>,<span class="hljs-number">86</span>,<span class="hljs-number">88</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Fri&#x27;</span>,<span class="hljs-string">&#x27;Fri&#x27;</span>,<span class="hljs-number">103</span>,<span class="hljs-number">138</span>,<span class="hljs-number">49</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Sat&#x27;</span>,<span class="hljs-string">&#x27;Sat&#x27;</span>,<span class="hljs-number">187</span>,<span class="hljs-number">251</span>,<span class="hljs-number">86</span>],</span><br><span class="language-javascript">                [<span class="hljs-string">&#x27;Sun&#x27;</span>,<span class="hljs-string">&#x27;Sun&#x27;</span>,<span class="hljs-number">56</span>,<span class="hljs-number">154</span>,<span class="hljs-number">78</span>],</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> options = &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//设置数据集</span></span><br><span class="language-javascript">                <span class="hljs-attr">dataset</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">source</span>:data</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//设置标题</span></span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//标题文字</span></span><br><span class="language-javascript">                    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;月销售数据&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">//副标题文字</span></span><br><span class="language-javascript">                    <span class="hljs-attr">subtext</span>: <span class="hljs-string">&quot;销售人员必看!&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">left</span>:<span class="hljs-string">&#x27;center&#x27;</span>,</span><br><span class="language-javascript">                    <span class="hljs-comment">//主标题样式</span></span><br><span class="language-javascript">                    <span class="hljs-attr">textStyle</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-comment">//副标题样式</span></span><br><span class="language-javascript">                    <span class="hljs-attr">subtextStyle</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;yellow&#x27;</span></span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//x轴</span></span><br><span class="language-javascript">                <span class="hljs-attr">xAxis</span>:&#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">data</span>:[<span class="hljs-string">&#x27;Mon&#x27;</span>,<span class="hljs-string">&#x27;Tue&#x27;</span>,<span class="hljs-string">&#x27;Wed&#x27;</span>,<span class="hljs-string">&#x27;Thu&#x27;</span>,<span class="hljs-string">&#x27;Fri&#x27;</span>,<span class="hljs-string">&#x27;Sat&#x27;</span>,<span class="hljs-string">&#x27;Sun&#x27;</span>]</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">// y轴</span></span><br><span class="language-javascript">                <span class="hljs-attr">yAxis</span>:&#123;&#125;,</span><br><span class="language-javascript">                <span class="hljs-comment">//一系列数据展示</span></span><br><span class="language-javascript">                <span class="hljs-attr">series</span>:[</span><br><span class="language-javascript">                    <span class="hljs-comment">//图表1-显示柱形图</span></span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;bar&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">color</span>:<span class="hljs-string">&quot;#5470c6&quot;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">encode</span>:&#123;</span><br><span class="language-javascript">                            <span class="hljs-comment">// 把 数据集所有数组当中,下标为2的数组的值为映射为折线图当中的y值</span></span><br><span class="language-javascript">                            <span class="hljs-attr">y</span>:<span class="hljs-number">2</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-comment">//图表2-显示折线图</span></span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;line&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">encode</span>:&#123;</span><br><span class="language-javascript">                            <span class="hljs-comment">// 把 数据集所有数组当中,下标为3的数组的值为映射为折线图当中的y值</span></span><br><span class="language-javascript">                            <span class="hljs-attr">y</span>:<span class="hljs-number">3</span></span><br><span class="language-javascript">                        &#125;</span><br><span class="language-javascript">                    &#125;,</span><br><span class="language-javascript">                    <span class="hljs-comment">//图表3-饼图</span></span><br><span class="language-javascript">                    &#123;</span><br><span class="language-javascript">                        <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;pie&#x27;</span>,</span><br><span class="language-javascript">                        <span class="hljs-comment">//设置饼图半径(像素值)</span></span><br><span class="language-javascript">                        <span class="hljs-attr">radius</span>:<span class="hljs-number">20</span>,</span><br><span class="language-javascript">                        <span class="hljs-comment">// data:[],</span></span><br><span class="language-javascript">                        <span class="hljs-attr">encode</span>:&#123;</span><br><span class="language-javascript">                            <span class="hljs-comment">// 指定数据项的名称</span></span><br><span class="language-javascript">                            <span class="hljs-attr">itemName</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript">                            <span class="hljs-comment">// 把 数据集所有数组当中,下标为5的数组的值为映射为饼图的值</span></span><br><span class="language-javascript">                            <span class="hljs-attr">value</span>:<span class="hljs-number">4</span></span><br><span class="language-javascript">                        &#125;,</span><br><span class="language-javascript">                        <span class="hljs-comment">//设置宽度</span></span><br><span class="language-javascript">                        <span class="hljs-attr">width</span>:<span class="hljs-number">200</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">height</span>:<span class="hljs-number">200</span>,</span><br><span class="language-javascript">                        <span class="hljs-comment">//设置位置</span></span><br><span class="language-javascript">                        <span class="hljs-attr">left</span>:<span class="hljs-number">100</span>,</span><br><span class="language-javascript">                        <span class="hljs-attr">top</span>:<span class="hljs-number">50</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            table1.<span class="hljs-title function_">setOption</span>(options)</span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131526702.png"></p><h3 id="Echarts内置组件的使用"><a href="#Echarts内置组件的使用" class="headerlink" title="Echarts内置组件的使用"></a>Echarts内置组件的使用</h3><ul><li>组件,可以理解为一块块的功能~ <a href="#%E7%BB%84%E4%BB%B6">组件图</a></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131726449.jpg" alt="echarts组件"></p><ul><li><p>使用也很简单,只需要在配置对象当中添加即可,比如<code>toolbox component</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;<br>...<br><span class="hljs-attr">toolbox</span>:&#123;&#125;,<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="toolbox"><a href="#toolbox" class="headerlink" title="toolbox"></a>toolbox</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//toolBox工具箱</span><br><span class="hljs-attr">toolbox</span>:&#123;<br><span class="hljs-attr">show</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">feature</span>:&#123;<br><span class="hljs-comment">//保存为图片</span><br><span class="hljs-attr">saveAsImage</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&quot;保存为图片&quot;</span>&#125;,<br><span class="hljs-comment">//配置项还原(图表的一些配置项目会恢复默认)</span><br><span class="hljs-attr">restore</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&quot;配置项还原&quot;</span>&#125;,<br><span class="hljs-comment">//数据视图工具，可以展现当前图表所用的数据，编辑后可以动态更新。</span><br><span class="hljs-attr">dataView</span>:&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&quot;数据视图&quot;</span>&#125;,<br><span class="hljs-comment">// 数据区域缩放。目前只支持直角坐标系的缩放。</span><br><span class="hljs-attr">dataZoom</span>:&#123;<span class="hljs-attr">title</span>:&#123;<span class="hljs-attr">zoom</span>:<span class="hljs-string">&quot;数据区域缩放&quot;</span>,<span class="hljs-attr">back</span>:<span class="hljs-string">&quot;还原数据区域&quot;</span>&#125;&#125;,<br><span class="hljs-comment">//动态类型切换</span><br><span class="hljs-attr">magicType</span>:&#123;<br><span class="hljs-attr">title</span>:&#123;<span class="hljs-attr">line</span>:<span class="hljs-string">&quot;切换为折线图&quot;</span>,<span class="hljs-attr">bar</span>:<span class="hljs-string">&quot;切换为柱形图&quot;</span>&#125;,<br><span class="hljs-attr">type</span>:[<span class="hljs-string">&quot;line&quot;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>]<br>&#125;   <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>效果图<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131618020.png"></li></ul><h4 id="dataZoom"><a href="#dataZoom" class="headerlink" title="dataZoom"></a>dataZoom</h4><ul><li><p>配置对象当中添加 <code>dataZoom:&#123; &#125;</code> 即可</p></li><li><p>效果图<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131620373.png"></p></li></ul><h4 id="legend"><a href="#legend" class="headerlink" title="legend"></a>legend</h4><ul><li><p>图例的数据数组。数组项通常为一个字符串，每一项代表一个系列的 name（如果是饼图，也可以是饼图单个数据的 name）</p></li><li><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;<br>...<br><span class="hljs-attr">series</span>:[<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;柱形图&quot;</span>,...&#125;,<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;折线图&quot;</span>,...&#125;,<br>&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;饼图&quot;</span>,...&#125;,<br>],<br>    <span class="hljs-attr">legend</span>:&#123;<br>    <span class="hljs-comment">//每一项代码一个系列对象当中的name</span><br>    <span class="hljs-attr">data</span>:[<span class="hljs-string">&quot;柱形图&quot;</span>,<span class="hljs-string">&quot;折线图&quot;</span>,<span class="hljs-string">&quot;饼图&quot;</span>]<br>    &#125;,<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果图<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131624102.png"></p></li></ul><h3 id="其他一些常用的配置项目"><a href="#其他一些常用的配置项目" class="headerlink" title="其他一些常用的配置项目"></a>其他一些常用的配置项目</h3><h4 id="设置提示-tooltip"><a href="#设置提示-tooltip" class="headerlink" title="设置提示 tooltip"></a>设置提示 tooltip</h4><ul><li><p>tooltip:{ }</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> options = &#123;<br>...<br><span class="hljs-attr">tooltip</span>:&#123;&#125;,<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>效果<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131604726.png"></p></li></ul><h4 id="双坐标轴-Y轴"><a href="#双坐标轴-Y轴" class="headerlink" title="双坐标轴-Y轴"></a>双坐标轴-Y轴</h4><ul><li>如果需要设置多个Y轴,则配置对象当中<code>yAxis</code>从{  }  改为 [ {…},{…} ]  </li><li>系列当中的对象设置为哪一个y轴需要设置<code>yAxisIndex</code>属性</li></ul><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#dom1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dom1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/echarts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#dom1&quot;</span>))</span><br><span class="language-javascript">table1.<span class="hljs-title function_">setOption</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//设置标题</span></span><br><span class="language-javascript"><span class="hljs-attr">title</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">text</span>: <span class="hljs-string">&quot;双坐标&quot;</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">xAxis</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-comment">//适用于离散的类目数据 -- 散点图</span></span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;category&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: [<span class="hljs-string">&#x27;游戏&#x27;</span>, <span class="hljs-string">&#x27;直播&#x27;</span>, <span class="hljs-string">&#x27;农业&#x27;</span>, <span class="hljs-string">&#x27;服饰&#x27;</span>],</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">yAxis</span>: [</span><br><span class="language-javascript"><span class="hljs-comment">//y坐标轴1 设置</span></span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//显示Y轴的线</span></span><br><span class="language-javascript"><span class="hljs-attr">axisLine</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//显示Y轴的刻度</span></span><br><span class="language-javascript"><span class="hljs-attr">axisTick</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//y坐标轴2 设置</span></span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//显示Y轴的线</span></span><br><span class="language-javascript"><span class="hljs-attr">axisLine</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//显示Y轴的刻度</span></span><br><span class="language-javascript"><span class="hljs-attr">axisTick</span>: &#123;</span><br><span class="language-javascript"><span class="hljs-attr">show</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">],</span><br><span class="language-javascript"><span class="hljs-attr">series</span>: [</span><br><span class="language-javascript"><span class="hljs-comment">//柱形图</span></span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//指明使用那一条y轴索引</span></span><br><span class="language-javascript"><span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">35</span>, <span class="hljs-number">48</span>, <span class="hljs-number">80</span>],</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-comment">//散点图</span></span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//指明使用那一条y轴索引</span></span><br><span class="language-javascript"><span class="hljs-attr">yAxisIndex</span>:<span class="hljs-number">1</span>,</span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;scatter&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: [<span class="hljs-number">88</span>, <span class="hljs-number">99</span>, <span class="hljs-number">124</span>, <span class="hljs-number">200</span>],</span><br><span class="language-javascript"><span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>效果图<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131729534.png"></li></ul><h4 id="圆滑折线图"><a href="#圆滑折线图" class="headerlink" title="圆滑折线图"></a>圆滑折线图</h4><ul><li><p>series当中的对象添加<code>smooth:true</code>即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">table.<span class="hljs-title function_">setOption</span>(&#123;<br>...<br><span class="hljs-attr">series</span>:[<br>    &#123;<br><span class="hljs-attr">type</span>:<span class="hljs-string">&quot;line&quot;</span>,<br><span class="hljs-comment">//设置圆滑</span><br><span class="hljs-attr">smooth</span>:<span class="hljs-literal">true</span>,<br>&#125;<br>]<br>...<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>效果图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151040708.png" alt="smooth=true的效果"></p></li></ul><h4 id="添加事件监控"><a href="#添加事件监控" class="headerlink" title="添加事件监控"></a>添加事件监控</h4><ul><li><p><a href="https://echarts.apache.org/zh/api.html#events">官方API中Event网站</a></p></li><li><p>echarts经过<code>init</code>后返回实例化对象,实例化对象调用on即可(方法和原生js的addEventListener一样)</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;echarts&quot;</span>;<br><span class="hljs-keyword">var</span> table1 = echarts.<span class="hljs-title function_">init</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">dom1</span>);<br><span class="hljs-comment">//不适用节流阀</span><br>table1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>     <span class="hljs-keyword">let</span> &#123;name,value&#125; = params;<br>     <span class="hljs-comment">//重新绘制标题</span><br>     table1.<span class="hljs-title function_">setOption</span>(&#123;<br>          <span class="hljs-attr">title</span>:&#123;<br>              <span class="hljs-attr">text</span>:name,<br>              <span class="hljs-attr">subtext</span>:value<br>          &#125;<br>      &#125;)<br>&#125;);<br><span class="hljs-comment">//使用节流阀</span><br><span class="hljs-comment">//按需引入</span><br><span class="hljs-keyword">import</span> &#123;throttle&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;lodash/throttle&quot;</span>;<br>table1.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>,<span class="hljs-title function_">throttle</span>(<span class="hljs-function">(<span class="hljs-params">params</span>)=&gt;</span>&#123;<br>     <span class="hljs-keyword">let</span> &#123;name,value&#125; = params;<br>     <span class="hljs-comment">//重新绘制标题</span><br>     table1.<span class="hljs-title function_">setOption</span>(&#123;<br>          <span class="hljs-attr">title</span>:&#123;<br>              <span class="hljs-attr">text</span>:name,<br>              <span class="hljs-attr">subtext</span>:value<br>          &#125;<br>      &#125;)<br>&#125;,<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure><ul><li><p>返回的参数<code>params</code>的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-comment">// 当前点击的图形元素所属的组件名称，</span><br>    <span class="hljs-comment">// 其值如 &#x27;series&#x27;、&#x27;markLine&#x27;、&#x27;markPoint&#x27;、&#x27;timeLine&#x27; 等。</span><br>    <span class="hljs-attr">componentType</span>: string,<br>    <span class="hljs-comment">// 系列类型。值可能为：&#x27;line&#x27;、&#x27;bar&#x27;、&#x27;pie&#x27; 等。当 componentType 为 &#x27;series&#x27; 时有意义。</span><br>    <span class="hljs-attr">seriesType</span>: string,<br>    <span class="hljs-comment">// 系列在传入的 option.series 中的 index。当 componentType 为 &#x27;series&#x27; 时有意义。</span><br>    <span class="hljs-attr">seriesIndex</span>: number,<br>    <span class="hljs-comment">// 系列名称。当 componentType 为 &#x27;series&#x27; 时有意义。</span><br>    <span class="hljs-attr">seriesName</span>: string,<br>    <span class="hljs-comment">// 数据名，类目名</span><br>    <span class="hljs-attr">name</span>: string,<br>    <span class="hljs-comment">// 数据在传入的 data 数组中的 index</span><br>    <span class="hljs-attr">dataIndex</span>: number,<br>    <span class="hljs-comment">// 传入的原始数据项</span><br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">Object</span>,<br>    <span class="hljs-comment">// sankey、graph 等图表同时含有 nodeData 和 edgeData 两种 data，</span><br>    <span class="hljs-comment">// dataType 的值会是 &#x27;node&#x27; 或者 &#x27;edge&#x27;，表示当前点击在 node 还是 edge 上。</span><br>    <span class="hljs-comment">// 其他大部分图表中只有一种 data，dataType 无意义。</span><br>    <span class="hljs-attr">dataType</span>: string,<br>    <span class="hljs-comment">// 传入的数据值</span><br>    <span class="hljs-attr">value</span>: number|<span class="hljs-title class_">Array</span>,<br>    <span class="hljs-comment">// 数据图形的颜色。当 componentType 为 &#x27;series&#x27; 时有意义。</span><br>    <span class="hljs-attr">color</span>: string,<br>    <span class="hljs-comment">// 用户自定义的数据。只在 graphic component 和自定义系列（custom series）</span><br>    <span class="hljs-comment">// 中生效，如果节点定义上设置了如：&#123;type: &#x27;circle&#x27;, info: &#123;some: 123&#125;&#125;。</span><br>    <span class="hljs-attr">info</span>: *<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="其他图"><a href="#其他图" class="headerlink" title="其他图"></a>其他图</h3><h4 id="实例-Instance"><a href="#实例-Instance" class="headerlink" title="实例(Instance)"></a>实例(Instance)</h4><ul><li>实例是指在同一个容器所绘制所有的图表的统称。每一个图表实例中可以多含多种图类型，每一个图表实例必须单独占用一个DOM节点。</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131732554.png"></p><h4 id="系列-series"><a href="#系列-series" class="headerlink" title="系列(series)"></a>系列(series)</h4><ul><li>系列是指图表的类型（如柱形图、饼图、折线图等），在一个图表实例中可以存在多个图表系列。<a name="series"> </a></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131731095.png"></p><h4 id="组件-component"><a href="#组件-component" class="headerlink" title="组件(component)"></a>组件(component)</h4><ul><li>组件是指图表的各个组件部分，如标题、X轴、Y轴，工具栏提示等。 <a name="组件"> </a></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205131731890.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>echarts</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin-template里面的异步路由,常量路由,任意路由的添加,记录笔记</title>
    <link href="/2022/05/16/%E5%89%8D%E7%AB%AF/%E5%BC%82%E6%AD%A5%E8%B7%AF%E7%94%B1,%E5%B8%B8%E9%87%8F%E8%B7%AF%E7%94%B1,%E4%BB%BB%E6%84%8F%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/05/16/%E5%89%8D%E7%AB%AF/%E5%BC%82%E6%AD%A5%E8%B7%AF%E7%94%B1,%E5%B8%B8%E9%87%8F%E8%B7%AF%E7%94%B1,%E4%BB%BB%E6%84%8F%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><ul><li>常量路由(比如首页)</li><li>异步路由(不同用户不同路由,根据权限来定的)</li><li>任意路由(比如404)</li></ul><h3 id="vueAdmin当中使用路由权限"><a href="#vueAdmin当中使用路由权限" class="headerlink" title="vueAdmin当中使用路由权限"></a>vueAdmin当中使用路由权限</h3><h4 id="1-在路由注册的时候-分段注册-默认只注册常量路由"><a href="#1-在路由注册的时候-分段注册-默认只注册常量路由" class="headerlink" title="1.在路由注册的时候,分段注册 (默认只注册常量路由)"></a>1.在路由注册的时候,分段注册 (默认只注册常量路由)</h4><ul><li>src\router\index.js</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151651446.png" alt="默认只注册常量路由"></p><h4 id="2-处理路由信息-并添加到route当中"><a href="#2-处理路由信息-并添加到route当中" class="headerlink" title="2.处理路由信息,并添加到route当中"></a>2.处理路由信息,并添加到route当中</h4><ul><li><p>调用router当中的<code>addRouter</code>方法,传入的参数为数组(数组里面也就是路由信息)</p></li><li><p>src\store\modules\user.js当中,根据token获取到用户信息后(比如用户权限,可以用的路由有哪些),来对数据进行处理</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151932027.png" alt="设置路由信息"></p></li><li><p>处理路由信息的函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">array</span>&#125; all 所有的异步路由信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">array</span>&#125; selfRoutes 服务器获取到的当前账户所具有的异步路由信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOwnAsyncRoutes</span>(<span class="hljs-params">allAsyncRoutes,selfRoutes</span>)&#123;<br>  <span class="hljs-keyword">return</span> allAsyncRoutes.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//当前账户异步路由信息包含了正在遍历的路由的name,则存入</span><br>    <span class="hljs-keyword">if</span>(selfRoutes.<span class="hljs-title function_">includes</span>(item.<span class="hljs-property">name</span>))&#123;<br>      <span class="hljs-comment">//含有二级路由</span><br>      <span class="hljs-keyword">if</span>(item.<span class="hljs-property">children</span> &amp;&amp; item.<span class="hljs-property">children</span>.<span class="hljs-property">length</span>)&#123;<br>        <span class="hljs-title function_">getOwnAsyncRoutes</span>(item.<span class="hljs-property">children</span>,selfRoutes);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-使用路由生成导航条的时候-用处理后的路由信息-借此生成导航窗格"><a href="#3-使用路由生成导航条的时候-用处理后的路由信息-借此生成导航窗格" class="headerlink" title="3.使用路由生成导航条的时候, 用处理后的路由信息(借此生成导航窗格)"></a>3.使用路由生成导航条的时候, 用处理后的路由信息(借此生成导航窗格)</h4><ul><li>\src\layout\components\Sidebar\index.vue当中修改(注意这里用mapGetters)</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151927258.png" alt="处理后的路由信息注册路由"></p><ul><li><p>这里用的是mapGetters,所以这里也需要修改<code>\src\store\getters.js</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151935556.png"></p></li></ul><h4 id="处理addRoutes动态添加路由后白屏的情况"><a href="#处理addRoutes动态添加路由后白屏的情况" class="headerlink" title="处理addRoutes动态添加路由后白屏的情况"></a>处理addRoutes动态添加路由后白屏的情况</h4><ul><li><p>文件路径: src\permission.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">next</span>();<span class="hljs-comment">//改为下面一行即可</span><br> <br><span class="hljs-title function_">next</span>(&#123;...to,<span class="hljs-attr">replace</span>:<span class="hljs-literal">true</span>&#125;);<br><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205161849791.png" alt="处理白屏"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-admin管理模板npm安装依赖后npm run de提示依赖core-js,@babel等报错的解决办法</title>
    <link href="/2022/05/16/%E5%89%8D%E7%AB%AF/vue-admin%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BFnpm%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%90%8Enpm%20run%20de%E6%8F%90%E7%A4%BA%E4%BE%9D%E8%B5%96core-js,@babel%E7%AD%89%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2022/05/16/%E5%89%8D%E7%AB%AF/vue-admin%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BFnpm%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%90%8Enpm%20run%20de%E6%8F%90%E7%A4%BA%E4%BE%9D%E8%B5%96core-js,@babel%E7%AD%89%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="安装别人做好的后台管理项目-npm-run-dev后报错"><a href="#安装别人做好的后台管理项目-npm-run-dev后报错" class="headerlink" title="安装别人做好的后台管理项目,npm run dev后报错"></a>安装别人做好的后台管理项目,npm run dev后报错</h4><ul><li>都是这种<code>core-js/modules/es.array.concat.js </code>什么的错误</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151908067.png" alt="报错项"></p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ol><li><p>找到项目下的babel.config.js <strong>原来的presets改为下面</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">presets</span>: [ [ <span class="hljs-string">&quot;@vue/app&quot;</span>, &#123; <span class="hljs-attr">useBuiltIns</span>: <span class="hljs-string">&quot;entry&quot;</span> &#125; ] ],<br></code></pre></td></tr></table></figure></li><li><p>改好之后</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151909614.png" alt="原来的presets改为下面"></p><ol start="3"><li><p>重新运行<code>npm run dev</code> 成功!</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151910231.png" alt="成功"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>vue-admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeanCloud白嫖valine评论和避免休眠指南</title>
    <link href="/2022/05/15/%E5%89%8D%E7%AB%AF/LeanCloud%E7%99%BD%E5%AB%96valine%E8%AF%84%E8%AE%BA%E5%92%8C%E9%81%BF%E5%85%8D%E4%BC%91%E7%9C%A0%E6%8C%87%E5%8D%97/"/>
    <url>/2022/05/15/%E5%89%8D%E7%AB%AF/LeanCloud%E7%99%BD%E5%AB%96valine%E8%AF%84%E8%AE%BA%E5%92%8C%E9%81%BF%E5%85%8D%E4%BC%91%E7%9C%A0%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="由于白嫖原因-LenCloud会自动休眠导致valine评论通知邮箱发送不了-所以这里记录了下我解决的过程"><a href="#由于白嫖原因-LenCloud会自动休眠导致valine评论通知邮箱发送不了-所以这里记录了下我解决的过程" class="headerlink" title="由于白嫖原因,LenCloud会自动休眠导致valine评论通知邮箱发送不了,所以这里记录了下我解决的过程"></a>由于白嫖原因,LenCloud会自动休眠导致valine评论通知邮箱发送不了,所以这里记录了下我解决的过程</h3><ul><li>这里用服务器的cron解决,<a href="https://www.aimtao.net/slef-wake-leancloud/">其他方法可以看这个博主的</a></li><li>另外一种直接在valine添加定时器的方式失败(如下图),所以就用另外一种</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151504716.png" alt="另外一种直接在valine添加定时器的方式失败,所以就用另外一种"></p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><h4 id="1-添加云引擎、ClientEngine-域名"><a href="#1-添加云引擎、ClientEngine-域名" class="headerlink" title="1. 添加云引擎、ClientEngine 域名"></a>1. 添加云引擎、ClientEngine 域名</h4><p>假设你的域名为<strong>example.com</strong>，为Valine后端分配的二级域名是<strong>xxx.example.com</strong>，那么就在域名栏内填入<strong>xxx.example.com</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141554117.png"></p><h4 id="2-去域名管理添加CNAME解析"><a href="#2-去域名管理添加CNAME解析" class="headerlink" title="2.去域名管理添加CNAME解析"></a>2.去域名管理添加CNAME解析</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141556663.png"></p><h4 id="3-等待一会-会自动部署"><a href="#3-等待一会-会自动部署" class="headerlink" title="3.等待一会,会自动部署"></a>3.等待一会,会自动部署</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141558803.png"></p><h4 id="4-部署完成-添加管理员账号密码"><a href="#4-部署完成-添加管理员账号密码" class="headerlink" title="4.部署完成,添加管理员账号密码"></a>4.部署完成,添加管理员账号密码</h4><ul><li>添加你的账号密码</li><li>添加一行后记得添加下你的email</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141621208.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141622910.png" alt="添加Email"></p><h3 id="避免休眠-免费的原因"><a href="#避免休眠-免费的原因" class="headerlink" title="避免休眠(免费的原因~)"></a>避免休眠(免费的原因~)</h3><p><strong>注意: !!!一定要等绑定域名显示完成后才有效果</strong></p><p><strong>注意: !!!一定要等绑定域名显示完成后才有效果</strong></p><p><strong>注意: !!!一定要等绑定域名显示完成后才有效果</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151133868.png" alt="一定要等绑定域名显示完成后才有效果"></p><ul><li><p>因为是免费的,所以每天必须休眠 6 小时~~~</p></li><li><p>并且单纯定时器的方式会提示<strong>因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠</strong></p></li><li><p>所以需要解决</p></li><li><p>这里使用的是<strong>crontab命令代码</strong></p></li><li><p><a href="https://www.aimtao.net/slef-wake-leancloud/">其他避免休眠方法可以看这个博主的</a></p></li></ul><h5 id="服务器命令提示行输入crontab-e-由于没有选择默认编辑器-所以我就会出现这个提示"><a href="#服务器命令提示行输入crontab-e-由于没有选择默认编辑器-所以我就会出现这个提示" class="headerlink" title="服务器命令提示行输入crontab -e(由于没有选择默认编辑器,所以我就会出现这个提示)"></a>服务器命令提示行输入crontab -e(由于没有选择默认编辑器,所以我就会出现这个提示)</h5><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141626766.png"></p><h5 id="添加下方代码"><a href="#添加下方代码" class="headerlink" title="添加下方代码"></a>添加下方代码</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">*<span class="hljs-regexp">/29 7-23 * * * curl https:/</span><span class="hljs-regexp">/your_site &amp;&gt; /</span>dev/<span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+\%D \%H:\%M:\%S&quot;</span> &gt;&gt; ~/wakeup.<span class="hljs-built_in">log</span><br>https:<span class="hljs-comment">//your_site为后台评论的地址</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205141629065.png" alt="接下来只需保存退出，按Ctrl键和O键保存，然后回车确定。"></p><h4 id="测试可用"><a href="#测试可用" class="headerlink" title="测试可用"></a>测试可用</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205151453461.png"></p>]]></content>
    
    
    <categories>
      
      <category>valine</category>
      
      <category>LeanCloud</category>
      
      <category>白嫖指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>valine</tag>
      
      <tag>LeanCloud</tag>
      
      <tag>白嫖指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canvas基本使用</title>
    <link href="/2022/05/13/%E5%89%8D%E7%AB%AF/canvas%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/13/%E5%89%8D%E7%AB%AF/canvas%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="canvas的基本了解"><a href="#canvas的基本了解" class="headerlink" title="canvas的基本了解"></a>canvas的基本了解</h3><ul><li><p>canvas仅仅只是一个画布,定义一个canvas标签,需要通过<strong>属性,属性,属性</strong>来设置宽度高度(不可以通过样式!),如果不设置默认<code>300*150</code></p><ul><li>不通过属性设置画布的宽度和高度,会造成坐标不准确的问题!</li></ul></li><li><p>canvas必须要通过js来操作</p></li><li><p>canvas的坐标是从左到右是x轴,从上到下是y轴</p></li><li><p>vscode书写canvas的时候没有提示,加上<code>/** @type &#123;HTMLCanvasElement&#125; */</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br><span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span><br> canvas代码书写<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul><h3 id="canvas的基本步骤"><a href="#canvas的基本步骤" class="headerlink" title="canvas的基本步骤"></a>canvas的基本步骤</h3><ol><li>获取canvas的节点</li><li>画布创建画笔并选择画笔的绘制类型</li><li>开始绘制</li><li>store()方法绘制  ——  stroke() 方法会实际地绘制出通过 moveTo() 和 lineTo() 方法定义的路径。默认颜色是黑色。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;canvas id=<span class="hljs-string">&quot;cav&quot;</span> height=<span class="hljs-string">&quot;400&quot;</span> width=<span class="hljs-string">&quot;400&quot;</span>&gt;&lt;/canvas&gt;<br> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//1.获取canvas节点(获取画布)</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cav&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//2.画布创建画笔并选择画笔的绘制类型</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//3.开始绘制</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//绘制的起点</span></span></span><br><span class="language-javascript"><span class="language-xml">     ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//有了绘制的起点我们就拖动着笔移动到100,200的坐标点</span></span></span><br><span class="language-javascript"><span class="language-xml">     ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>,<span class="hljs-number">200</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//我们再次移动画笔的坐标</span></span></span><br><span class="language-javascript"><span class="language-xml">     ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">300</span>);</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//第一个坐标(100,100)和最后一个坐标(200,300)点闭合</span></span></span><br><span class="language-javascript"><span class="language-xml">     ctx.<span class="hljs-title function_">closePath</span>();</span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//设置填充颜色 - 红色</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//ctx.fillStyle = &quot;red&quot;;</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//开始填充颜色</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//ctx.fill();</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//设置绘制线条的颜色</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//ctx.strokeStyle = &quot;yellow&quot;;</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//设置绘制线条的粗细</span></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">//ctx.lineWidth = &quot;20&quot;;</span></span></span><br><span class="language-javascript"><span class="language-xml">         <span class="hljs-comment">//绘制线条</span></span></span><br><span class="language-javascript"><span class="language-xml">     ctx.<span class="hljs-title function_">stroke</span>();</span></span><br><span class="language-javascript"><span class="language-xml"> </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="5"><li><p>绘制效果<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121114879.png" alt="绘制效果" style="zoom:50%;" /></p></li><li><p>如果想要填充的颜色,画笔可以设置fillStyle指明颜色并且调用fill()方法进行填充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置填充颜色 - 红色</span><br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-comment">//开始填充</span><br>ctx.<span class="hljs-title function_">fill</span>();<br></code></pre></td></tr></table></figure><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121116797.png" alt="绘制效果" style="zoom:50%;" /></li><li><p>设置线条的颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置绘制线条的颜色</span><br>ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;yellow&quot;</span>;<br><span class="hljs-comment">//设置绘制线条的粗细</span><br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-string">&quot;20&quot;</span>;<br></code></pre></td></tr></table></figure><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121120755.png" alt="绘制效果" style="zoom:50%;" /></li></ol><h3 id="canvas绘制矩形和圆"><a href="#canvas绘制矩形和圆" class="headerlink" title="canvas绘制矩形和圆"></a>canvas绘制矩形和圆</h3><h4 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h4><ul><li>画笔使用<code>storeRect()</code>方法</li><li>画笔使用<code>fillRect()</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cav = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cav&quot;</span>);<br><span class="hljs-keyword">var</span> ctx = cav.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>ctx.<span class="hljs-title function_">beginPath</span>();<br><span class="hljs-comment">//绘制线框矩形四个参数分别为 x,y,width,height</span><br>ctx.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">150</span>,<span class="hljs-number">200</span>);<br><span class="hljs-comment">//绘制填充矩形</span><br><span class="hljs-comment">//设置填充颜色</span><br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br>ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">300</span>,<span class="hljs-number">100</span>,<span class="hljs-number">150</span>,<span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure><h4 id="绘制圆"><a href="#绘制圆" class="headerlink" title="绘制圆"></a>绘制圆</h4><ul><li><p>画笔使用<code>arc()</code>方法</p><ul><li><p>ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);</p></li><li><p><code>X,Y,radius</code>分别是横坐标,纵坐标,半径</p></li><li><p><code>startAngle:</code> 圆弧的起点,x轴方向开始计算,单位以弧度表示</p><ul><li>(<strong>1弧度等于57度左右</strong>) 因为2<em>PI</em>弧度&#x3D;360所以1弧度&#x3D;57度</li><li>所以绘制一个圆直接起始弧度为<code>0</code>,终点弧度为<code>2*Math.PI</code>即可</li></ul></li><li><p><code>endAngle: </code>圆弧的终点,单位以弧度表示</p></li><li><p><code>anticlockwise: </code>可选的<code>Boolean</code>值 ，如果为 <code>true</code>，逆时针绘制圆弧，反之，顺时针绘制。 </p><ul><li><p>注意,是绘制,绘制,绘制!,比如其他参数相同,唯独最后一个参数不同,那么图形是完全不同的</p></li><li><p>如图 ctx.arc(50,50,25,0,1,false);顺时针和逆时针绘制效果</p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121505891.png" alt="绘制效果" /></li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cav2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;cav2&#x27;</span>);<br><span class="hljs-keyword">var</span> ctx = cav2.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>ctx.<span class="hljs-title function_">beginPath</span>();<br><span class="hljs-comment">//绘制圆 ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);</span><br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,<span class="hljs-number">25</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>,<span class="hljs-literal">false</span>);<br>ctx.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><h4 id="绘制字体"><a href="#绘制字体" class="headerlink" title="绘制字体"></a>绘制字体</h4><ul><li>画笔设置<code>font</code>属性可以设置字体的格式<ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/font">API</a></li></ul></li><li>画笔调用<code>fillText</code>可以绘制字体<ul><li>ctx.fillText(text, x, y, [maxWidth]);</li><li><code>text</code>:  绘制的文本</li><li><code>x,y</code>: 坐标</li><li><code>maxWidth</code>: 绘制的最大宽度。如果指定了值，并且经过计算字符串的值比最大宽度还要宽，字体为了适应会水平缩放（如果通过水平缩放当前字体，可以进行有效的或者合理可读的处理）或者使用小号的字体。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;canvas id=<span class="hljs-string">&quot;cav&quot;</span> height=<span class="hljs-string">&quot;400&quot;</span> width=<span class="hljs-string">&quot;400&quot;</span>&gt;&lt;/canvas&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//1.获取canvas节点(获取画布)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cav&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//2.画布创建画笔并选择画笔的绘制类型</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//绘制文字</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//设置绘制文字字体</span></span></span><br><span class="language-javascript"><span class="language-xml">    ctx.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;20px 黑体&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">    ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;叫我将军大人&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121546644.png" alt="绘制效果" /><h3 id="清空画步和清除指定区域"><a href="#清空画步和清除指定区域" class="headerlink" title="清空画步和清除指定区域"></a>清空画步和清除指定区域</h3><ul><li>均使用画笔当中的clearRect方法,只是传入的值有所区别</li><li>ctx.clearRect(x, y, width, height);<ul><li><code>X,Y</code>: 开始清空的坐标</li><li><code>width</code>:  清空的宽度</li><li><code>height</code>: 清空的高度</li></ul></li></ul><h4 id="清空画布"><a href="#清空画布" class="headerlink" title="清空画布"></a>清空画布</h4><ul><li>ctx.clearRect(0,0,画布的宽度,画布的高度);</li></ul><h4 id="清除指定区域"><a href="#清除指定区域" class="headerlink" title="清除指定区域"></a>清除指定区域</h4><ul><li><p>ctx.clearRect(0,0,40,50)</p></li><li><p>效果</p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121552458.png" alt="绘制效果" /></li></ul><h3 id="canvas绘制一个柱形图"><a href="#canvas绘制一个柱形图" class="headerlink" title="canvas绘制一个柱形图"></a>canvas绘制一个柱形图</h3><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121702131.png" alt="柱形图效果"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cav&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;600&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;800&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#cav</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">         <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">HTMLCanvasElement</span>&#125; */</span></span><br><span class="language-javascript">        <span class="hljs-comment">//1.获取canvas节点(获取画布)</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;cav&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//2.画布创建画笔并选择画笔的绘制类型</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//设置线条粗细</span></span><br><span class="language-javascript">        ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-string">&quot;2&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-comment">//设置字体</span></span><br><span class="language-javascript">        ctx.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;20px 黑体&quot;</span></span><br><span class="language-javascript">        <span class="hljs-comment">//绘制坐标轴先</span></span><br><span class="language-javascript">            <span class="hljs-comment">//y坐标</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;数据可视化&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">40</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">40</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">480</span>)</span><br><span class="language-javascript">            <span class="hljs-comment">//150字体</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">80</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">80</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;150&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">80</span>);</span><br><span class="language-javascript">             <span class="hljs-comment">//120字体</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">160</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">160</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;120&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">160</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//90字体</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">240</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">240</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;90&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">240</span>);</span><br><span class="language-javascript">             <span class="hljs-comment">//60字体</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">320</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">320</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;60&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">320</span>);</span><br><span class="language-javascript">              <span class="hljs-comment">//30字体</span></span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">400</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">400</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;30&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">400</span>);</span><br><span class="language-javascript">             <span class="hljs-comment">//0字体</span></span><br><span class="language-javascript">             ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript">            ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">20</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-comment">//x坐标</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">40</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">680</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//竖线1</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">480</span>)</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">200</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;食品&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//竖线2</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">360</span>,<span class="hljs-number">480</span>)</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">360</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;数码&quot;</span>,<span class="hljs-number">260</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">             <span class="hljs-comment">//竖线3</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">520</span>,<span class="hljs-number">480</span>)</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">520</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;服饰&quot;</span>,<span class="hljs-number">420</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;箱包&quot;</span>,<span class="hljs-number">580</span>,<span class="hljs-number">500</span>);</span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">stroke</span>();</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-comment">//绘制矩形</span></span><br><span class="language-javascript">        <span class="hljs-comment">//设置填充矩形颜色</span></span><br><span class="language-javascript">        ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;hotpink&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-comment">//食品矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">80</span>,<span class="hljs-number">320</span>,<span class="hljs-number">80</span>,<span class="hljs-number">160</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//数码矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">240</span>,<span class="hljs-number">280</span>,<span class="hljs-number">80</span>,<span class="hljs-number">200</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//服饰矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">400</span>,<span class="hljs-number">240</span>,<span class="hljs-number">80</span>,<span class="hljs-number">240</span>);</span><br><span class="language-javascript">            <span class="hljs-comment">//箱包矩形</span></span><br><span class="language-javascript">        ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">560</span>,<span class="hljs-number">0</span>,<span class="hljs-number">80</span>,<span class="hljs-number">480</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="过程图"><a href="#过程图" class="headerlink" title="过程图"></a>过程图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205121704140.png" alt="过程图"></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-Object.defineProperty和Object.getOwnPropertyDescriptor</title>
    <link href="/2022/05/11/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8811%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/11/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8811%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下列<span class="hljs-variable language_">window</span>方法中，可以显示对话框的一项是（）<br><br><span class="hljs-attr">A</span>: <span class="hljs-title function_">confirm</span>()<br><br><span class="hljs-attr">B</span>: <span class="hljs-title function_">alert</span>()<br><br><span class="hljs-attr">C</span>: <span class="hljs-title function_">prompt</span>()<br><br><span class="hljs-attr">D</span>: <span class="hljs-title function_">open</span>()<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>C</li></ul></li><li>解析<ul><li>A: 弹出一个判断对话框(有确认,取消按钮和提示文本),返回值为用户所按下的,为<code>真</code>返回true,为<code>假</code>返回false</li><li>B: 弹出一个对话框</li><li>C: 弹出一个用户输入对话框,返回值为用户输入的值,没有输入则返回值为<code>null</code></li><li>D: 打开一个指定的窗口并指定打开方式<h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;key&#x27;</span>); ...①<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s + <span class="hljs-string">&#x27;123&#x27;</span>); ...②<br><span class="hljs-keyword">var</span> obj = &#123;<br>    [s]:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);&#125; ...③<br>&#125;<br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj); ...④<br><span class="hljs-attr">A</span>: ①<br><br><span class="hljs-attr">B</span>: ②<br><br><span class="hljs-attr">C</span>: ③<br><br><span class="hljs-attr">D</span>: ④<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p>Symbol是ES6新增的基本数据类型之一(全部基本数据类型为<strong>undefined string symbol number null boolean</strong>) ‘记忆:usnb,你如此牛逼’</p></li><li><p>Symbol不可以发生类型转换(发生就报错)</p></li><li><p>Symbol的值不能与其他类型进行运算</p></li><li><p>在对象内部使用Symbol 值作为属性名的时候，必须要将值放在方括号中</p></li><li><p>Symbol 值如果想要作为属性名，那就不能再用点运算符，因为点运算符后面跟的总是字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> id = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;id&quot;</span>);<br> <span class="hljs-keyword">let</span> obj = &#123;<br>  [id]:<span class="hljs-string">&#x27;symbol&#x27;</span><br> &#125;;<br><span class="hljs-keyword">let</span> array = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj);<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array); <span class="hljs-comment">//[Symbol(id)]</span><br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[array[<span class="hljs-number">0</span>]]);  <span class="hljs-comment">//&#x27;symbol&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205110915371.png" alt="image-20220511091545286"></p></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">brand</span>:<span class="hljs-string">&#x27;华为&#x27;</span>,<span class="hljs-attr">price</span>:<span class="hljs-number">1999</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,<span class="hljs-string">&#x27;id&#x27;</span>,&#123;<span class="hljs-attr">value</span>:<span class="hljs-number">1</span>&#125;)<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,<span class="hljs-string">&#x27;price&#x27;</span>,&#123;<span class="hljs-attr">configurable</span>:<span class="hljs-literal">false</span>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span>); ...①<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> obj)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[k]); ...②<br>&#125;<br>obj.<span class="hljs-property">price</span> = <span class="hljs-number">999</span>;<br><span class="hljs-keyword">delete</span> obj[<span class="hljs-string">&#x27;price&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); ...③<br><span class="hljs-attr">A</span>: ①式输出结果为<span class="hljs-number">3</span><br><br><span class="hljs-attr">B</span>: ②式输出结果为华为 <span class="hljs-number">1999</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">C</span>: ③式输出结果为&#123;<span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">999</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-attr">D</span>: ③式输出结果为&#123;<span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>Object.defineProperty注意点</p><ul><li>通过其添加的属性值,如果没有设置该属性的描述符(比如writeable,configurable,和enumberable)那么默认为false</li><li>可以使用**Object.getOwnPropertyDescriptor(obj,key)**来查看</li></ul></li><li><p>查看</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">brand</span>: <span class="hljs-string">&#x27;华为&#x27;</span>,<br>    <span class="hljs-attr">price</span>: <span class="hljs-number">1999</span><br>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;id&#x27;</span>, &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;price&#x27;</span>, &#123;<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">false</span><br>&#125;)<br><br><span class="hljs-comment">// 下面一行代码输出结果</span><br><span class="hljs-comment">// 新添加的属性,未设置其他属性,则默认为false</span><br><span class="hljs-comment">// configurable: false</span><br><span class="hljs-comment">// enumerable: false          </span><br><span class="hljs-comment">// value: 1</span><br><span class="hljs-comment">// writable: false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj,<span class="hljs-string">&#x27;id&#x27;</span>));<br><br><span class="hljs-comment">//下面一行代码输出结果</span><br><span class="hljs-comment">// 本来就有的属性,上方只是对值做了修改,并不是新增加的</span><br><span class="hljs-comment">// configurable: false</span><br><span class="hljs-comment">// enumerable: true</span><br><span class="hljs-comment">// value: 1999</span><br><span class="hljs-comment">// writable: true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj,<span class="hljs-string">&#x27;price&#x27;</span>));<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端真题刷题-注意基础知识不要忘了基本原理</title>
    <link href="/2022/05/10/%E5%88%B7%E9%A2%98/HTML/%E5%89%8D%E7%AB%AF%E7%9C%9F%E9%A2%98%E5%88%B7-%E6%B3%A8%E6%84%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8D%E8%A6%81%E5%BF%98%E4%BA%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <url>/2022/05/10/%E5%88%B7%E9%A2%98/HTML/%E5%89%8D%E7%AB%AF%E7%9C%9F%E9%A2%98%E5%88%B7-%E6%B3%A8%E6%84%8F%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%8D%E8%A6%81%E5%BF%98%E4%BA%86%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html">SVG 有多少种图形对象类型？<br>A: 2<br> <br>B: 3<br><br>C: 5<br><br>D: 7<br><br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析<h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html">以下哪个是 html5 中的 input 类型属性？<br>(1) search<br>(2) datetime<br>(3) week<br>(4) color<br>(5) track<br>(6) placeholder<br><br>A: 1 , 2 , 3 , 4 , 6 <br> <br>B: 1 , 2 , 3 , 4 , 5 <br><br>C: 2 , 3 , 4 , 5 , 6 <br><br>D: 1 , 3 , 4 , 5 , 6 <br><br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析</li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">以下哪个不是 HTML5 中使用的媒体元素？<br>A: <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span><br>B: <span class="hljs-tag">&lt;<span class="hljs-name">audio</span>&gt;</span><br>C: <span class="hljs-tag">&lt;<span class="hljs-name">track</span>&gt;</span><br>D: <span class="hljs-tag">&lt;<span class="hljs-name">time</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析<h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">SVG 是什么意思？<br>A: 二级矢量图形<br>B: 可伸缩的垂直图形<br>C: 可伸缩矢量图形<br>D: 三级矢量图形<br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析<h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">input 元素的哪个属性将元素的值设置为表示一定范围内的数字？<br>A: range<br>B: email<br>C: file<br>D: data<br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析</li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-微任务和宏任务</title>
    <link href="/2022/05/10/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8810%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/10/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8810%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">执行以下程序，输出结果为（）<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">200</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br>&#125;<br><br><span class="hljs-title function_">a</span>();<br><br><span class="hljs-attr">A</span>: <span class="hljs-number">100</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-number">200</span><br><br><span class="hljs-attr">C</span>: 抛出异常<br><br><span class="hljs-attr">D</span>: f <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> a = <span class="hljs-number">200</span>;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);&#125;<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>首先注意,函数提升优先级高于变量提升(也就是先函数提升才轮到变量) <del>之前我一直以为是被覆盖….</del></p></li><li><p>所以上面的代码相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">200</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br>&#125;<br><span class="hljs-keyword">var</span> a <br>a = <span class="hljs-number">200</span>;<br>a = <span class="hljs-number">100</span>;<br><span class="hljs-title function_">a</span>();<br><span class="hljs-comment">//所以报错~</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入分母:&#x27;</span>)<br><span class="hljs-keyword">try</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>  value = <span class="hljs-number">0</span> / num;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(e)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;d&#x27;</span>);<br>&#125;<br><span class="hljs-attr">A</span>: a , c , d<br><br><span class="hljs-attr">B</span>: a , b , d<br><br><span class="hljs-attr">C</span>: a , b , c , d<br><br><span class="hljs-attr">D</span>: a , b , c<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li>虽然说0不能做分母,如果做了会报错,在其他语言是这样子的,但是JavaScript不会,因为JavaScript有NaN类型~</li><li>所以 0 &#x2F; 0 &#x3D;&gt; NaN 不会报错,所以不会捕捉到异常</li><li>而 <strong>finally</strong>不管try…catch是成功还是失败都会执行</li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">4</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">b</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>    <br>    <span class="hljs-built_in">clearTimeout</span>(a);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br><br><span class="hljs-attr">A</span>: <span class="hljs-number">1</span> , <span class="hljs-number">2</span> , <span class="hljs-number">3</span> , <span class="hljs-number">4</span> , <span class="hljs-number">5</span><br><span class="hljs-attr">B</span>: <span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">4</span> , <span class="hljs-number">5</span><br><span class="hljs-attr">C</span>: <span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">5</span> , <span class="hljs-number">4</span><br><span class="hljs-attr">D</span>: <span class="hljs-number">1</span> , <span class="hljs-number">3</span> , <span class="hljs-number">5</span> , <span class="hljs-number">4</span> , <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>js代码分为同步任务和异步任务,js先执行同步任务后执行任务(比如定时器,promise)</p></li><li><p>并且异步任务分为(微任务和宏任务,优先级为微任务 <strong>&gt;</strong> 宏任务)</p></li><li><p>所以代码先输出1,3,5,然后执行promise,由于promise当中清除了定时器a,所以不会执行定时器了</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205100901161.png"></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-类型转换必须解决</title>
    <link href="/2022/05/08/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8808%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/08/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8808%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下面结果为真的表达式是：（）<br><span class="hljs-attr">A</span>: <span class="hljs-literal">null</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span><br><br><span class="hljs-attr">C</span>: <span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span><br><br><span class="hljs-attr">D</span>: <span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>A:</p><ul><li><strong>null</strong> instanceof Object ;&#x2F;&#x2F; false</li><li>typeof null &#x3D;&#x3D;&#x3D; ‘object’;&#x2F;&#x2F; true</li><li><strong>同理</strong></li><li>undefined instanceof Object ; &#x2F;&#x2F;false</li><li><strong>typeof undefined &#x3D;&#x3D;&#x3D; ‘undefined’</strong> &#x2F;&#x2F;true</li></ul></li><li><p>B,C</p><ul><li>null 遇到二个等号( &#x3D;&#x3D; ) 和 undefined 比较,<strong>无条件返回true</strong></li><li>null 遇到三个等号( &#x3D;&#x3D;&#x3D; ) 和undefined 比较,<strong>无条件返回false</strong></li></ul></li><li><p>D:</p><ul><li>NaN 不与 任何值相等 包括自身</li></ul></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪个语句打印出来的结果是<span class="hljs-literal">false</span>？<br><span class="hljs-attr">A</span>: <span class="hljs-title function_">alert</span>(<span class="hljs-number">3</span> == <span class="hljs-literal">true</span>)<br><br><span class="hljs-attr">B</span>: <span class="hljs-title function_">alert</span>(<span class="hljs-number">2</span> == <span class="hljs-string">&#x27;2&#x27;</span>)<br><br><span class="hljs-attr">C</span>: <span class="hljs-title function_">alert</span>(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>)<br><br><span class="hljs-attr">D</span>: <span class="hljs-title function_">alert</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;true&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A</li></ul></li><li><p>解析</p><ul><li><p>A:  &#x3D;&#x3D; 会隐式转换,二个都是基本数据类型比较,true转化为数字为1,然后3&#x3D;&#x3D;1返回false</p></li><li><p>B:  &#x3D;&#x3D; 会隐式转换,二个都是基本数据类型比较,都转化为数字,字符串’2’ 转化为数字为2,所以 2 &#x3D;&#x3D; 2返回为true</p></li><li><p>C: null 遇到2个等号(&#x3D;&#x3D;) 和undefined 无条件返回true**(规定)**</p></li><li><p>D: isNaN的转换好像都是将参数通过**Number()**来进行转换,凡是Number不能转换的都返回NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">123</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(-<span class="hljs-number">1.23</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">5</span>-<span class="hljs-number">2</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;123&#x27;</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;2005/12/12&#x27;</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">true</span>) <span class="hljs-comment">//false</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;NaN&#x27;</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">//true</span><br><span class="hljs-built_in">isNaN</span>(<span class="hljs-number">0</span> / <span class="hljs-number">0</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p><strong>总结下</strong></p><ol><li><p>只要是<strong>基本数据类型</strong>的&#x3D;&#x3D;比较,都会转化为数值来进行比较</p></li><li><p>只要是<strong>引用数据类型</strong>和<strong>基本数据类型</strong>的的比较,都会转化为<strong>字符串</strong>   然后 转化为 <strong>被比较的基本数据的类型</strong>  后 <strong>再进行比较</strong>((除了引用数据类型和布尔值进行比较的时候是将二者转化为布尔值比较))</p></li><li><p>(比如 对象和布尔值比较 )</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 输出结果为false</span><br><span class="hljs-comment">// 过程:  [ ]转换为字符串&#x27;&#x27;,然后转换为数字0,true转换为数字1，所以为false</span><br>[] == <span class="hljs-literal">true</span>; <br></code></pre></td></tr></table></figure></li><li><p>(比如 对象和数字比较)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 输出结果为true</span><br><span class="hljs-comment">// 过程: [1]转化为字符串&#x27;1&#x27; ,然后转化为数字1 然后数字1 和 1进行比较 ,返回true</span><br>[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>;  <br></code></pre></td></tr></table></figure></li><li><p>还有一些需要记住的，像</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span> <span class="hljs-comment">// true  null和undefined二个比较则返回true,二者和其他比较就返回false</span><br><br><span class="hljs-comment">//举例子,下方的就是</span><br><span class="hljs-literal">null</span> == <span class="hljs-literal">false</span> <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure></li><li><p>具体可以看这个博主写的<a href="https://www.cnblogs.com/ljk001/p/8086084.html">js中的一些隐式转换和总结</a></p></li></ol><h4 id="题目2扩展"><a href="#题目2扩展" class="headerlink" title="题目2扩展"></a>题目2扩展</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//各自的返回结果是?</span><br><span class="hljs-number">1</span>==<span class="hljs-literal">true</span><br><span class="hljs-string">&quot;&quot;</span>==<span class="hljs-literal">false</span><br><span class="hljs-literal">false</span>==<span class="hljs-literal">null</span><br><span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>1 &#x3D;&#x3D; true ;&#x2F;&#x2F; true (基本数据类型和布尔值比较,二者转化为数值 <code>1</code> 不变化 <code> true</code>变为了<code>1</code>,所以二者相等返回true)</li><li>“” &#x3D;&#x3D; false; &#x2F;&#x2F; true  (基本数据类型和布尔值比较 , 二者转化为数值,  <code>&quot;&quot; </code>转化为数值为<code>0 </code>, <code>false</code>变为0,所以二者相等返回true)</li><li>false &#x3D;&#x3D; null ; &#x2F;&#x2F; false (null除了和undefined相比返回为true,null和其他比较均返回为false(undefined也是))</li><li>null &#x3D;&#x3D; undefined ;&#x2F;&#x2F; true (<code>null</code> 和 <code>undefined</code> 比较,返回为true,<strong>可以看上面第五条</strong>)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-原型链</title>
    <link href="/2022/05/07/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8807%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/07/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8807%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">请问以下两次检测对象constructor是否拥有属性名<span class="hljs-number">1</span>的结果分别是什么？<br><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>(<span class="hljs-number">1.0</span>).<span class="hljs-property">constructor</span>;<br><span class="hljs-title class_">Number</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">123</span>;<br><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>(<span class="hljs-number">1.0</span>).<span class="hljs-property">constructor</span>;<br><br><span class="hljs-attr">A</span>: <span class="hljs-literal">false</span>,<span class="hljs-literal">false</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-literal">false</span>,<span class="hljs-literal">true</span><br><br><span class="hljs-attr">C</span>: <span class="hljs-literal">true</span>,<span class="hljs-literal">true</span><br><br><span class="hljs-attr">D</span>: <span class="hljs-literal">true</span>,<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p><code>in</code>用于检测一个属性是否在指定对象上或者是其原型链上</p></li><li><p><strong><code>Object</code> 构造函数将给定的值包装为一个新对象。</strong></p><ul><li>比如Object({name:’李白’}) 返回 { name : ‘李白’ }</li><li>Object([1,2,3,4]) 返回[1,2,3,4]</li><li>Object(1.0) 返回Number(1) 也就是Number对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 代码等同于</span><br><span class="hljs-keyword">var</span> temp = <span class="hljs-title class_">Object</span>(<span class="hljs-number">1.0</span>);<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> temp.<span class="hljs-property">constructor</span>;<br><br><span class="hljs-comment">//Object[key] = value; 形式给 constructor 对象添加 key = 1 属性,对应的 value = 123 </span><br><span class="hljs-comment">// 因为key不能为数字开头,所以就通过Ojbect[key]方式赋值</span><br><span class="hljs-comment">// 类似于 Object.name = &quot;李白&quot;这种</span><br><span class="hljs-title class_">Number</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">123</span>;<br><br><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> temp.<span class="hljs-property">constructor</span>;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> F=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> .<span class="hljs-property">b</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">var</span> f=<span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br><span class="hljs-attr">A</span>: f能取到a，但取不到b<br><br><span class="hljs-attr">B</span>: f能取到a,b<br><br><span class="hljs-attr">C</span>: F能取到b，不能取到a<br><br><span class="hljs-attr">D</span>: F能取到a，不能取到b<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A</li></ul></li><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 看代码~</span><br><span class="hljs-keyword">var</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br>F.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">//true</span><br>f.<span class="hljs-property">__proto__</span> === F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">//true</span><br>F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">//true</span><br><br>F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> == <span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>图形演示</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205070910644.png" alt="原型链"></p></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下面哪些语句可以 在<span class="hljs-variable constant_">JS</span>里判断一个对象是否为<span class="hljs-title class_">String</span>类型？<br><span class="hljs-attr">A</span>: oStringObject <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-keyword">typeof</span> oStringObject == <span class="hljs-string">&#x27;string&#x27;</span><br><br><span class="hljs-attr">C</span>: oStringObject is <span class="hljs-title class_">String</span> (没见过这个语法~)<br><br><span class="hljs-attr">D</span>: 以上答案都不正确<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A</li></ul></li><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//所以只有a</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;hello&#x27;</span>;  <span class="hljs-comment">// &#x27;string&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);  <span class="hljs-comment">// &#x27;object&#x27;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入自定义事件和原生DOM事件($attr等)</title>
    <link href="/2022/05/06/%E5%89%8D%E7%AB%AF/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E5%86%8D%E6%AC%A1(%E6%B7%B1%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8E%9F%E7%94%9FDOM%E4%BA%8B%E4%BB%B6)/"/>
    <url>/2022/05/06/%E5%89%8D%E7%AB%AF/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1%E5%86%8D%E6%AC%A1(%E6%B7%B1%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%92%8C%E5%8E%9F%E7%94%9FDOM%E4%BA%8B%E4%BB%B6)/</url>
    
    <content type="html"><![CDATA[<h1 id="深入自定义事件和原生DOM事件"><a href="#深入自定义事件和原生DOM事件" class="headerlink" title="深入自定义事件和原生DOM事件"></a>深入自定义事件和原生DOM事件</h1><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><ol><li><p>在组件上标签上添加的事件就是自定义事件,不管系统是否带这些事件,比如在上添加@click @click&#x2F;&gt; 那么@click在自定义组件上就是自定义事件</p></li><li><p>添加的事件如果没有传入参数,那么输出就是undefined</p><ul><li>如图,传入了参数,单击button,输出为10,如果没有传递参数10,则输出undefined</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061946890.png"></p></li><li><p>自定义组件上绑定原生DOM事件使用native和不使用</p><ul><li>如图</li></ul></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947942.png"></p><h2 id="原生DOM事件"><a href="#原生DOM事件" class="headerlink" title="原生DOM事件"></a>原生DOM事件</h2><ol><li><p>在HTML标签上添加就是原生DOM事件,比如说@click,@mousemove这些系统自带的原生事件</p></li><li><p>添加的事件如果没有传入参数,那么系统会默认传入event参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button @click=<span class="hljs-string">&quot;test1&quot;</span>&gt;我是按钮<span class="hljs-number">1</span>&lt;/button&gt;<br><span class="hljs-comment">//等同于</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test1($event)&quot;</span>&gt;</span>我是按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol><h3 id="vue自定义的事件在html标签和组件标签上的区别"><a href="#vue自定义的事件在html标签和组件标签上的区别" class="headerlink" title="vue自定义的事件在html标签和组件标签上的区别"></a>vue自定义的事件在html标签和组件标签上的区别</h3><ol><li><p>在html标签上添加自定义事件无意义,所以自定义事件是给组件标签添加的</p></li><li><p>事件名可以任意,也可以和原生DOM事件名相同,但是是自定义的</p></li><li><p>如果自定义事件上想绑定原生的事件,那么就需要在事件对象名称后面添加 .native 并且绑定的事件添加在添加到组件根元素上,通过委派的形式使得子元素可以被触发</p></li></ol><ul><li><p>如图</p><p>  <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947944.png"></p></li></ul><h1 id="深入理解v-model"><a href="#深入理解v-model" class="headerlink" title="深入理解v-model"></a>深入理解v-model</h1><ol><li><p>首先我们需要知道v-model在HTML标签上的原理</p></li><li><p><strong>v-model原来写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 标准v-model写法 普通写法</span><br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;msg&quot;</span> /&gt;<br></code></pre></td></tr></table></figure></li><li><p>v-model拆解写法(等同于上方直接写v-model)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// v-model拆解写法</span><br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> :value=<span class="hljs-string">&quot;msg&quot;</span> @input=<span class="hljs-string">&quot;msg = $event.target.value&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="那么v-model当中在自定义组件要怎么实现呢"><a href="#那么v-model当中在自定义组件要怎么实现呢" class="headerlink" title="那么v-model当中在自定义组件要怎么实现呢?"></a>那么v-model当中在自定义组件要怎么实现呢?</h3><ul><li><p>根据v-model在原生DOM上拆解的写法,我们应该这样子写( 以自定义组件CustomInput为例 )</p></li><li><p><strong>需要知道的是: 在自定义组件当中,<code>$event</code>就是<code>$emit</code>传递过来的数据</strong></p></li><li><p><strong>父</strong>组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!--父亲给<span class="hljs-title class_">CustomInput</span>传递 <span class="hljs-string">&quot;msg2&quot;</span> 数据,儿子要使用props接收( <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;value&quot;</span>] ),并且传递了自定义事件@input --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CustomInput</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;msg&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;msg = $event&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">CustomInput</span>&gt;</span></span><br>&lt;!--上面这一行代码可以简写为下面这一行                但是子组件不能简写,必须要写下面这些内容!!!!!!!!!!!!!! --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">CustomInput</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">CustomInput</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p><strong>子</strong>组件 CustomInput.vue</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">               // 绑定从父亲传递过来的参数</span></span><br><span class="hljs-tag"><span class="language-xml">               <span class="hljs-attr">:value</span> = <span class="hljs-string">&quot;value&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">               // 绑定原生<span class="hljs-attr">DOM</span>事件@<span class="hljs-attr">input</span>,输入框内容发生改变,就调用父亲给子组件的自定义事件<span class="hljs-attr">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">               @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;,$event.target.value)&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CustomInput&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 接收从父亲传递过来的:value=&quot;msg&quot;的值</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 如果是简写形式(&lt;CustomInput v-model=&quot;msg&quot;&gt;&lt;/CustomInput&gt;)也是从value接收</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;value&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h1 id="sync修饰符实现父子数据同步和-sync和v-model的区别"><a href="#sync修饰符实现父子数据同步和-sync和v-model的区别" class="headerlink" title=".sync修饰符实现父子数据同步和.sync和v-model的区别"></a>.sync修饰符实现父子数据同步和.sync和v-model的区别</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[需求]</span><br>父亲向儿子传递一个值叫money),儿子每次都花<span class="hljs-number">100</span>块钱,要求儿子花了多少钱,爸爸那边可以同步<br></code></pre></td></tr></table></figure><h4 id="第一次-无效果-直接传递数据给儿子-儿子每次单击都花100块钱"><a href="#第一次-无效果-直接传递数据给儿子-儿子每次单击都花100块钱" class="headerlink" title="第一次(无效果) (直接传递数据给儿子, 儿子每次单击都花100块钱)"></a>第一次(无效果) (直接传递数据给儿子, 儿子每次单击都花100块钱)</h4><ul><li><p><strong>父亲</strong> (直接传递数据给儿子)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> &lt;!-- 会弹出警告说数据不同步 --&gt; <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">:money</span>=<span class="hljs-string">&quot;moneyFather&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>弹出警告</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947945.png"></p></li><li><p><strong>儿子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>小明每次花100元<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br>&lt;!-- 每次单击爸爸的钱就减少<span class="hljs-number">100</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;money = money - 100&quot;</span>&gt;</span>单击我花钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br>&lt;!-- 显示爸爸剩余多少钱 --&gt;<br>爸爸还剩 &#123;&#123; money &#125;&#125; 元<br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;Child&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">//接收父亲传递过来的信息，告诉了我现在父亲有多少钱</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>:[<span class="hljs-string">&quot;money&quot;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p><strong>结果</strong></p><ul><li><strong>儿子花钱按钮被单击,儿子当中的父亲的钱数量被改变,但是父亲兜兜里面的钱没有变化</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947946.png"></p></li></ul><h4 id="第二次-有效果-数据传递给儿子-但是儿子每次单击花钱的时候就告诉父亲我花钱了"><a href="#第二次-有效果-数据传递给儿子-但是儿子每次单击花钱的时候就告诉父亲我花钱了" class="headerlink" title="第二次(有效果) 数据传递给儿子,但是儿子每次单击花钱的时候就告诉父亲我花钱了"></a>第二次(有效果) 数据传递给儿子,但是儿子每次单击花钱的时候就告诉父亲我花钱了</h4><ul><li><p><strong>父亲</strong>  (<code>$event</code>在自定义组件当中是<code>$emit</code>传递的参数 父亲收到儿子传递过来的金钱数,就更新自己的金钱数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- $event在自定义组件当中是$emit传递的参数 --&gt;<br>&lt;!-- @<span class="hljs-attr">update</span>:xxx为固定格式,不可以更改,xxx为绑定的数据属性也就是v-<span class="hljs-attr">bind</span>:xxx=<span class="hljs-string">&quot;值&quot;</span>(当中的xxx) <br>对应简写属性 :xxx=<span class="hljs-string">&quot;值&quot;</span> 当中的xxx<br>--&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">:money</span>=<span class="hljs-string">&quot;moneyFather&quot;</span> @<span class="hljs-attr">update:money</span>=<span class="hljs-string">&quot;moneyFather = $event&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>**儿子 **每次单击爸爸的钱就减少100 并且告诉爸爸 (通过<code>$emit</code>),并且传递 金钱-100的 值 给父亲</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #ccc; height: 50px&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>小明每次花100元<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 每次单击爸爸的钱少100 并且告诉爸爸 $emit,并且传递  金钱-100的值  给父亲--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- update:money 为自定义事件名称 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;update:money&#x27;, money - 100)&quot;</span>&gt;</span>花钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 显示爸爸剩余多少钱 --&gt;</span></span><br><span class="language-xml">    爸爸还剩 &#123;&#123; money &#125;&#125; 元</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/ecmascript-6&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Child&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 接收父亲传递过来的信息,告诉了我现在父亲有多少钱</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;money&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ul><h4 id="第三次-有效果-等同于第二次简写"><a href="#第三次-有效果-等同于第二次简写" class="headerlink" title="第三次(有效果)等同于第二次简写"></a>第三次(有效果)等同于第二次简写</h4><ul><li><p>父亲 (使用sync修饰符)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>&lt;<span class="hljs-title class_">Child</span> :money.<span class="hljs-property">sync</span>=<span class="hljs-string">&quot;moneyFather&quot;</span>&gt;&lt;/<span class="hljs-title class_">Child</span>&gt;<br><br></code></pre></td></tr></table></figure></li><li><p>儿子 (和第二次一样) 每次单击爸爸的钱就减少100 并且告诉爸爸 (通过<code>$emit</code>),并且传递 金钱-100的 值 给父亲</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #ccc; height: 50px&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>小明每次花100元<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 每次单击爸爸的钱少100 并且告诉爸爸 $emit,并且传递  金钱-100的值  给父亲--&gt;</span></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- update:money 为自定义事件名称 --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;update:money&#x27;, money - 100)&quot;</span>&gt;</span>花钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 显示爸爸剩余多少钱 --&gt;</span></span><br><span class="language-xml">    爸爸还剩 &#123;&#123; money &#125;&#125; 元</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/ecmascript-6&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Child&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 接收父亲传递过来的信息,告诉了我现在父亲有多少钱</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;money&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="v-model的使用在数据同步的使用"><a href="#v-model的使用在数据同步的使用" class="headerlink" title="v-model的使用在数据同步的使用"></a>v-model的使用在数据同步的使用</h2><ul><li><p>**父亲 **依旧是通过<code>:value</code>向子传递 <code>$event</code>依旧是子通过<code>$emit</code>传递过来的数据</p><ul><li>自定义组件<code>$event</code>返回的都是<code>$emit</code>传递过来的数据)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">Child</span> :value=<span class="hljs-string">&quot;moneyFather&quot;</span> @input=<span class="hljs-string">&quot;moneyFather = $event&quot;</span>&gt;&lt;/<span class="hljs-title class_">Child</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p><strong>儿子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background: #ccc; height: 50px&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>小明每次花100元<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 每次单击爸爸的钱少100 并且告诉爸爸 $emit,并且传递  金钱-100的值  给父亲--&gt;</span></span><br><span class="language-xml">      </span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;input&#x27;, value - 100)&quot;</span>&gt;</span>花钱<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- 显示爸爸剩余多少钱 --&gt;</span></span><br><span class="language-xml">    爸爸还剩 &#123;&#123; value &#125;&#125; 元</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/ecmascript-6&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Child&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 接收父亲传递过来的信息,告诉了我现在父亲有多少钱</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&quot;value&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ul><h2 id="sync和v-model在数据同步使用区别"><a href="#sync和v-model在数据同步使用区别" class="headerlink" title=".sync和v-model在数据同步使用区别"></a>.sync和v-model在数据同步使用区别</h2><ul><li>v-model和.sync<strong>都可以</strong>实现父子组件数据同步,<strong>下面是约定成俗的规定</strong><ul><li><code>v-model</code> 是当子组件当中有表单类元素的时候使用</li><li><code>.sync</code> 是当子组件当中不是表单类元素的时候使用</li></ul></li></ul><h1 id="自定义带hover提示的el-button和-attrs和-listeners的使用"><a href="#自定义带hover提示的el-button和-attrs和-listeners的使用" class="headerlink" title="自定义带hover提示的el-button和$attrs和$listeners的使用"></a>自定义带hover提示的el-button和$attrs和$listeners的使用</h1><ul><li>前置知识<ul><li>el-button<ul><li>如果想带图标,那么添加icon属性可以,注意: icon属性里面的值都是以el-icon-xxx形式出现的</li><li><a href="https://element.eleme.cn/#/zh-CN/component/icon">element-ui的icon库</a></li></ul></li></ul></li><li>原来的el-button组件并没有鼠标悬停上去就出现提示的功能,我们可以<strong>通过对el-button进行再次包装</strong></li></ul><h3 id="简易的包装-但是不能达到自己去传入配置设置的要求"><a href="#简易的包装-但是不能达到自己去传入配置设置的要求" class="headerlink" title="简易的包装(但是不能达到自己去传入配置设置的要求)"></a>简易的包装(但是不能达到自己去传入配置设置的要求)</h3><ul><li><p>如图 MyButton.vue对el-button进行包装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;这个是提示框&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure></li><li><p>包装后的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>自定义带Hover提示的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- 使用二次封装后的 --&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyButton</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!-- 引入二次封装后的el-button组件 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">import MyButton from &quot;./myButton.vue&quot;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">export default &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        name:&quot;AttrsListenersTest&quot;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-comment">&lt;!-- 注册使用自定义组件 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        componets:&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            MyButton</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>效果图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947947.png"></p></li></ul><h3 id="使用-attrs和-listeners进行复杂包装-可自定义参数效果"><a href="#使用-attrs和-listeners进行复杂包装-可自定义参数效果" class="headerlink" title="使用$attrs和$listeners进行复杂包装(可自定义参数效果)"></a>使用$attrs和$listeners进行复杂包装(可自定义参数效果)</h3><ul><li><p>前面要知道的</p><ul><li>同等效果<ul><li>传递数据给组件,可以使用 <code>:key=&quot;value&quot; </code>或者 直接省略 <code>:</code> ,直接写 key&#x3D; “value” 也是可以的,不过有冒号的 <code>:key=&quot;value&quot;</code> value为js代码,没有冒号的 key&#x3D;”value” value值为字符串!!</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-title class_">MyButton</span> aa=<span class="hljs-string">&quot;10&quot;</span>&gt;&lt;/<span class="hljs-title class_">MyButton</span>&gt;<br>&lt;!-- 上一行和下一行是同等效果 --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">aa</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyButton</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><p>不同等效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- 传递字符串 <span class="hljs-string">&quot;b&quot;</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">aa</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyButton</span>&gt;</span></span>  <br><br>&lt;!-- 传递变量b的值,即为<span class="hljs-number">10</span> --&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">aa</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">MyButton</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    <span class="hljs-comment">&lt;!-- 引入二次封装后的el-button组件 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">import MyButton from &quot;./myButton.vue&quot;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">export default &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        name:&quot;AttrsListenersTest&quot;,</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">data()&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          return &#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">              b:10</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">          &#125;  </span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;,     </span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        <span class="hljs-comment">&lt;!-- 注册使用自定义组件 --&gt;</span></span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        componets:&#123;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">            MyButton</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">        &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml">    &#125;</span></span></span><br><span class="language-xml"><span class="language-handlebars"><span class="language-xml"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>$attrs 获取传递给组件的所有属性,它会排除 props已经声明接收的属性 以及class,style这二个样式</p><p>• 如图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947948.png"></p></li><li><p>排除props接收到了的</p><ul><li>如图</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947949.png"></p></li><li><p>$listeners 获取父组件传递给子组件的所有自定义事件监听组成的对象</p><ul><li>如图</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947950.png"></p></li><li><p>$attrs和$listeners一键绑定在组件上</p><ul><li>可以通过v-bind 一次性把父组件传递过来的属性添加给子组件(不可以简写)</li><li>可以通过v-on 一次性把父组件传递过来的事件监听添加给子组件(不可以简写)</li><li>如图</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947951.png"></p></li></ul><h1 id="children和-parent和-refs的使用"><a href="#children和-parent和-refs的使用" class="headerlink" title="$children和$parent和$refs的使用"></a>$children和$parent和$refs的使用</h1><ul><li>this.$refs放在HTML和组件标签身上的区别<ul><li>this.$refs.名称 放在<strong>html标签</strong>身上拿到的就是这个DOM元素</li><li>this.$refs放在<strong>组件标签</strong>身上拿到的就是组件对象本身</li></ul></li></ul><h2 id="this-refs妙用"><a href="#this-refs妙用" class="headerlink" title="this.$refs妙用"></a>this.$refs妙用</h2><ul><li><p>可以直接通过this.$refs.名称来<strong>获取组件</strong>,并且在组件当中去操作这个获取到的组件里面的数据</p><p>如图所示(<strong>父亲</strong>) 父亲直接通过this.$refs.son.money就操控了儿子和女儿的钱</p></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947952.png"></p><h2 id="children-和-parent的妙用"><a href="#children-和-parent的妙用" class="headerlink" title="$children 和 $parent的妙用"></a>$children 和 $parent的妙用</h2><h3 id="parent"><a href="#parent" class="headerlink" title="$parent"></a>$parent</h3><ul><li><p>前提:</p><ul><li>必须<strong>只有一个父亲</strong>才可以使用!如果这个组件有多个父亲,那么就不可以用!(为什么有多个父亲,因为存在组件复用的情况!)</li></ul></li><li><p>如图,儿子通过 this.$parent.money 来获取父亲的钱并且修改</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947953.png"></p></li></ul><h3 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h3><ul><li><p>获取当前组件的所有的子组件,返回子组件的数组,(无顺序,不能说[0]一定就是儿子,[1]就一定是女儿)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947954.png"></p></li><li><p>如图</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947955.png"></p></li></ul><h2 id="本案例当中-均在配置对象当中书写了data数据"><a href="#本案例当中-均在配置对象当中书写了data数据" class="headerlink" title="本案例当中,均在配置对象当中书写了data数据"></a>本案例当中,均在配置对象当中书写了data数据</h2><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947956.png"></p><h1 id="mixin混入的基本使用"><a href="#mixin混入的基本使用" class="headerlink" title="mixin混入的基本使用"></a>mixin混入的基本使用</h1><h2 id="如图"><a href="#如图" class="headerlink" title="如图"></a>如图</h2><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061947957.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>ES6</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅拷贝深拷贝和个人一些新理解(非普遍的理解)</title>
    <link href="/2022/05/06/%E5%89%8D%E7%AB%AF/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2022/05/06/%E5%89%8D%E7%AB%AF/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><ul><li><p>引用数据类型</p><ul><li>Object（在JS中除了基本数据类型以外的都是对象，数据是对象，函数是对象等等)</li></ul></li><li><p>基本数据类型</p><ul><li><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、 <code>Undefined</code>、<code>Symbol</code></li></ul></li><li><p>文章参考了牛客网<a href="https://www.nowcoder.com/profile/599258">CodeSheep</a></p></li></ul><h2 id="赋值-vs-浅拷贝-vs-深拷贝"><a href="#赋值-vs-浅拷贝-vs-深拷贝" class="headerlink" title="赋值 vs 浅拷贝 vs 深拷贝"></a>赋值 vs 浅拷贝 vs 深拷贝</h2><h3 id="赋值-不能算是拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象"><a href="#赋值-不能算是拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象" class="headerlink" title="赋值(不能算是拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象)"></a>赋值(不能算是拷贝，因为拷贝的仅仅只是引用关系，并没有生成新的实际对象)</h3><p>  很常见的一种</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>    <span class="hljs-attr">sex</span>:<span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><span class="hljs-comment">// 注意,这个严格来说是赋值,不是什么浅拷贝深拷贝!后面有原因</span><br><span class="hljs-keyword">var</span> obj2 = obj;<br><br><span class="hljs-comment">// 注意,这个严格来说是赋值,不是什么浅拷贝深拷贝</span><br><span class="hljs-title class_">Student</span> codeSheep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-title class_">Student</span> codePig = codeSheep;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220506101754.png"></p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205061954938.jpeg" style="zoom:50%;" /><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="一个误区"><a href="#一个误区" class="headerlink" title="一个误区"></a>一个误区</h4><p class="note-info">很多人说var objOrigin = {name:'李白'}; var objAfter = objOrigin; 是浅拷贝,严格来说是错误的!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 严格来说是错误的!</span><br><span class="hljs-comment">// 如果说下面这一行是浅拷贝</span><br><span class="hljs-keyword">var</span> objOrigin = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>&#125;; <span class="hljs-keyword">var</span> objAfter = objOrigin;是浅拷贝<br><br><span class="hljs-comment">//那么这个是什么?</span><br><span class="hljs-keyword">var</span> obj1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李白&#x27;</span>, <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;;<br><br><span class="hljs-keyword">var</span> clonedObj = &#123; ...obj1 &#125;;<br>clonedObj.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;李黑&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clonedObj); <span class="hljs-comment">// &#123;name: &#x27;李黑&#x27;, sex: &#x27;男&#x27;&#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1);<span class="hljs-comment">// &#123;name: &#x27;李白&#x27;, sex: &#x27;男&#x27;&#125;</span><br><br><span class="hljs-comment">//可以看到,克隆后的对象将名字修改为了李黑,原来的没有变化</span><br></code></pre></td></tr></table></figure><ul><li>这里使用了展开运算符(扩展运算符),官方解释是<strong>浅拷贝</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220506103101.png"></p><ul><li><p>如果按照之前有些人的说法,下面这个是浅拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objOrigin = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>&#125;; <span class="hljs-keyword">var</span> objAfter = objOrigin;<br></code></pre></td></tr></table></figure><ul><li><p>那么<code>mdnWebDocs</code>当中的展开运算符(扩展运算符)<strong>可以实现浅拷贝</strong>,那么按道理来说这个所谓的浅拷贝,修改了浅拷贝后的对象不会导致原来的对象改变吧?那为什么修改后会发生改变?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//var objOrigin = &#123;name:&#x27;李白&#x27;&#125;; var objAfter = obj;是浅拷贝</span><br><br><span class="hljs-keyword">var</span> objOrigin = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>&#125;; <br><span class="hljs-keyword">var</span> objAfter = objOrigin;<br><span class="hljs-comment">//修改拷贝后的对象当中的name(name为基本数据类型)</span><br>objAfter.<span class="hljs-property">name</span>=<span class="hljs-string">&quot;李黑&quot;</span>;<br><br><span class="hljs-comment">//输出为 &#123;name: &#x27;李黑&#x27;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter);<br><br><span class="hljs-comment">//输出为 &#123;name: &#x27;李黑&#x27;&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objOrigin);<br><br></code></pre></td></tr></table></figure></li><li><p>所以<strong>我</strong>觉得,<strong>赋值就是赋值,不是什么浅拷贝和深拷贝</strong>!不然你说<code>var objAfter = objOrigin</code>就是浅拷贝,那么为什么修改了<code>objAfter</code>后<code>objOrigin</code>也会变化?并且<strong>修改的还是对象当中的基本数据类型!(因为后面深拷贝还设计到对象当中的数据类型)</strong></p></li></ul></li></ul><h4 id="真正的浅拷贝"><a href="#真正的浅拷贝" class="headerlink" title="真正的浅拷贝"></a>真正的浅拷贝</h4><ul><li>比如我们试图通过studen1实例，拷贝得到student2，如果是浅拷贝这种方式，大致模型可以示意成如下所示的样子：</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220506104339.png"></p><ul><li>很明显，<strong>值类型</strong>的字段会复制一份，而<strong>引用类型</strong>的字段拷贝的仅仅是引用地址，而该引用地址指向的实际对象空间其实只有一份。</li><li>所以<strong>浅拷贝</strong>是什么,就是赋值引用数据类型当中存储的基本数据类型,而引用数据类型当中的引用数据类型(<strong>比如数组当中嵌套对象的情况</strong>),仅仅只是将地址赋值给了另外一个对象!</li></ul><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>深拷贝相较于上面所示的浅拷贝，除了值类型字段会复制一份，引用类型字段所指向的对象，会在内存中也<strong>创建一个副本</strong>，就像这个样子：</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220506104558.png"></p><ul><li>所以<strong>深拷贝</strong>是什么,就是不管对象当中嵌套了多少层引用数据类型还是基本数据类型,都建立一个新的给自己</li></ul><h2 id="一些常用的深浅拷贝方法"><a href="#一些常用的深浅拷贝方法" class="headerlink" title="一些常用的深浅拷贝方法"></a>一些常用的深浅拷贝方法</h2><h3 id="浅拷贝-1"><a href="#浅拷贝-1" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><h4 id="展开运算符-扩展运算符"><a href="#展开运算符-扩展运算符" class="headerlink" title="展开运算符(扩展运算符)"></a>展开运算符(扩展运算符)</h4><ul><li>可以看到,除了基本数据类型拷贝了,里面的引用数据类型并未进行拷贝,修改一个拷贝后的引用数据类型会影响原来的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objOrigin = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李白&#x27;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    <span class="hljs-attr">other</span>: &#123;<br>        <span class="hljs-attr">hobby</span>: <span class="hljs-string">&quot;喝酒&quot;</span>,<br>        <span class="hljs-attr">food</span>: <span class="hljs-string">&quot;吃肉&quot;</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">//扩展运算符浅拷贝</span><br><span class="hljs-keyword">var</span> objAfter = &#123;<br>    ...objOrigin<br>&#125;<br><span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter === objOrigin);<br><br><span class="hljs-comment">//true (浅拷贝的原因)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter.<span class="hljs-property">other</span> === objOrigin.<span class="hljs-property">other</span>);<br><br><span class="hljs-comment">//修改</span><br>objAfter.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;动感超人&quot;</span>;<br><br><span class="hljs-comment">//修改2</span><br>objAfter.<span class="hljs-property">other</span>.<span class="hljs-property">food</span> = <span class="hljs-string">&quot;蔬菜&quot;</span><br><br><span class="hljs-comment">//&#123; name: &#x27;动感超人&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;蔬菜&#x27; &#125; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter);<br><br><span class="hljs-comment">// &#123; name: &#x27;李白&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;蔬菜&#x27; &#125; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objOrigin);<br></code></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h4><ul><li>可以看到,除了基本数据类型拷贝了,里面的引用数据类型并未进行拷贝,修改一个拷贝后的引用数据类型会影响原来的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">objOrigin</span> <span class="hljs-operator">=</span> &#123;<br>    name: <span class="hljs-string">&#x27;李白&#x27;</span>,<br>    sex: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    other: &#123;<br>        hobby: <span class="hljs-string">&quot;喝酒&quot;</span>,<br>        food: <span class="hljs-string">&quot;吃肉&quot;</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">//Object.assign浅拷贝</span><br><span class="hljs-type">var</span> <span class="hljs-variable">objAfter</span> <span class="hljs-operator">=</span> &#123;&#125;;<br>Object.assign(objAfter,objOrigin)<br><span class="hljs-comment">//false</span><br>console.log(objAfter === objOrigin);<br><br><span class="hljs-comment">//true (浅拷贝的原因)</span><br>console.log(objAfter.other === objOrigin.other);<br><br><span class="hljs-comment">//修改</span><br>objAfter.name = <span class="hljs-string">&quot;动感超人&quot;</span>;<br><br><span class="hljs-comment">//修改2</span><br>objAfter.other.food = <span class="hljs-string">&quot;蔬菜&quot;</span><br><br><span class="hljs-comment">//&#123; name: &#x27;动感超人&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;蔬菜&#x27; &#125; &#125;</span><br>console.log(objAfter);<br><br><span class="hljs-comment">// &#123; name: &#x27;李白&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;蔬菜&#x27; &#125; &#125;</span><br>console.log(objOrigin);<br></code></pre></td></tr></table></figure><h3 id="深拷贝-1"><a href="#深拷贝-1" class="headerlink" title="深拷贝"></a>深拷贝</h3><h4 id="JSON-stringify和JSON-parseInt实现"><a href="#JSON-stringify和JSON-parseInt实现" class="headerlink" title="JSON.stringify和JSON.parseInt实现"></a>JSON.stringify和JSON.parseInt实现</h4><ul><li>可以看到,除了基本数据类型拷贝了,里面的引用数据类型也进行了拷贝,修改一个拷贝后的引用数据类型不影响原来的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objOrigin = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李白&#x27;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span>,<br>    <span class="hljs-attr">other</span>: &#123;<br>        <span class="hljs-attr">hobby</span>: <span class="hljs-string">&quot;喝酒&quot;</span>,<br>        <span class="hljs-attr">food</span>: <span class="hljs-string">&quot;吃肉&quot;</span><br>    &#125;<br>&#125;;<br><span class="hljs-comment">//JSON.parse和JSON.stringify 深拷贝</span><br><span class="hljs-keyword">var</span> objAfter = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(objOrigin));<br><span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter === objOrigin);<br><br><span class="hljs-comment">//true (浅拷贝的原因)</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter.<span class="hljs-property">other</span> === objOrigin.<span class="hljs-property">other</span>);<br><br><span class="hljs-comment">//修改</span><br>objAfter.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;动感超人&quot;</span>;<br><br><span class="hljs-comment">//修改2</span><br>objAfter.<span class="hljs-property">other</span>.<span class="hljs-property">food</span> = <span class="hljs-string">&quot;蔬菜&quot;</span><br><br><span class="hljs-comment">//&#123; name: &#x27;动感超人&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;蔬菜&#x27; &#125; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objAfter);<br><br><span class="hljs-comment">// &#123; name: &#x27;李白&#x27;, sex: &#x27;男&#x27;, other: &#123; hobby: &#x27;喝酒&#x27;, food: &#x27;吃肉&#x27; &#125; &#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(objOrigin);<br></code></pre></td></tr></table></figure><h4 id="lodash当中的cloneDeep"><a href="#lodash当中的cloneDeep" class="headerlink" title="lodash当中的cloneDeep"></a>lodash当中的cloneDeep</h4><p><a href="https://www.lodashjs.com/docs/lodash.cloneDeep#_clonedeepvalue">cloneDeep当中的API地址</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objects = [&#123; <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span> &#125;];<br> <br><span class="hljs-keyword">var</span> deep = _.<span class="hljs-title function_">cloneDeep</span>(objects);<br><span class="hljs-comment">//比较是否相同 返回 false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(deep[<span class="hljs-number">0</span>] === objects[<span class="hljs-number">0</span>]);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-重写的ValueOf</title>
    <link href="/2022/05/06/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8806%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/06/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8806%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下关于<span class="hljs-title class_">Histroy</span>对象的属性或方法描述正确的是（）(多选)<br><span class="hljs-attr">A</span>: back回到浏览器载入历史<span class="hljs-variable constant_">URL</span>地址列表的当前<span class="hljs-variable constant_">URL</span>的前一个<span class="hljs-variable constant_">URL</span><br><br><span class="hljs-attr">B</span>: go表示刷新当前页面<br><br><span class="hljs-attr">C</span>: length保存历史<span class="hljs-variable constant_">URL</span>地址列表的长度信息<br><br><span class="hljs-attr">D</span>: forward转到浏览器载入历史<span class="hljs-variable constant_">URL</span>地址列表的当前<span class="hljs-variable constant_">URL</span>的下一个<span class="hljs-variable constant_">URL</span>。<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A,C,D</li></ul></li><li>解析<ul><li>A: back回到浏览器载入历史URL地址列表的当前URL的前一个URL</li><li>B: go()  加载history列表中的某个具体页面(<strong>可以自由跳转</strong>)。所以B的表述刷新当前页面是错误的。<ul><li><code>history.go(2)</code>向前移动两页</li><li><code>history.go(-2)</code>向后移动两页</li></ul></li><li>C: 具体可看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/length">MdnWebDocs</a></li><li>D:  在会话历史中向前移动一页。它与使用<code>delta</code>参数为1时调用 <code>history.go(delta)</code>的效果相同。<h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪些代码执行后i的值为<span class="hljs-number">10</span>：(多选)<br><span class="hljs-attr">A</span>: <br>    <span class="hljs-keyword">let</span> i =<span class="hljs-number">1</span> + &#123;<br>      <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>; &#125;<br>    &#125;;<br><br><span class="hljs-attr">B</span>: <br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      i++;<br>    &#125;);<br><br><span class="hljs-attr">C</span>: <br><span class="hljs-keyword">let</span> i = <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;0xA&#x27;</span>);<br><br><span class="hljs-attr">D</span>: <br>    <span class="hljs-keyword">let</span> i = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params">i</span>) &#123;<br>      i *= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-title function_">a</span>(i)<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,C</li></ul></li><li><p>解析</p><ul><li><p>A: 如果在需要使用原始值的上下文中使用了对象，就会自动调用valueOf方法.这里<strong>重写</strong>了默认的valueOf 方法。所以相当于 let i &#x3D; 1+9</p><ul><li><a href="https://www.cnblogs.com/ljk001/p/8086084.html">js中的一些隐式转换和总结</a></li><li><a href="https://blog.csdn.net/u014465934/article/details/84536871">JavaScript类型转换中的toString()和valueOf()方法</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基本数据类型的类型和引用数据类型的比较,这里会先将引用数据类型转换为数字在进行比较</span><br><span class="hljs-comment">// 引用数据类型转化为基本数据类型过程如下</span><br><span class="hljs-comment">// 前置知识</span><br><span class="hljs-comment">//1.valueOf  返回对象的字符串、数值或布尔值表示。</span><br><span class="hljs-comment">//2.toString 返回对象的字符串表示。</span><br><span class="hljs-comment">//1. 先调用ValueOf方法,如果valueOf就已经将数据转化为了基本数据类型就不进行下一步转换了</span><br><br><span class="hljs-comment">//2. 如果valueOf没有转化为字符串,那么就会调用toString方法进行再次转换</span><br><span class="hljs-keyword">let</span> i =<span class="hljs-number">1</span> + &#123;<br>      <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>; &#125;<br>&#125;;<br><span class="hljs-comment">// 第一步: 调用valueOf</span><br><span class="hljs-comment">//发现重写了valueOf,所以就返回9</span><br>&#123;<br>   <span class="hljs-title function_">valueOf</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>; &#125;<br>&#125;;<br><span class="hljs-comment">// 第一步执行完成后相当于</span><br><span class="hljs-keyword">let</span> i =<span class="hljs-number">1</span> + <span class="hljs-number">9</span>;<br><span class="hljs-comment">// 所以 i = 10</span><br></code></pre></td></tr></table></figure></li><li><p>B: new Array(10); 建立长度为10的<strong>空</strong>数组,forEach方法按升序为数组中含有效值的每一项执行一次 callback函数，那些<strong>未初始化的项将被跳过</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205062329811.png"></p></li><li><p>C: 在没有指定基数的情况下，如果字符串以”0x”或者”0X”开头, 则基数是16 (16进制)。相当于let i &#x3D; parseInt(‘0xA’，16)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205062330125.png"></p></li><li><p>D: <code>i</code>是形参，属于局部变量，不影响全局变量<code>i</code>的值</p></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">按照<span class="hljs-title class_">CommonJS</span>规范，在任何模块代码的作用域下内置了以下哪些变量？<br><span class="hljs-attr">A</span>: <span class="hljs-variable language_">module</span><br><br><span class="hljs-attr">B</span>: context<br><br><span class="hljs-attr">C</span>: <span class="hljs-built_in">require</span><br><br><span class="hljs-attr">D</span>: <span class="hljs-built_in">exports</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,C,D</li></ul></li><li><p>解析</p><ul><li><p>如 Nodejs当中调用arguments.callee.toString()即可查看内置变量</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205062338673.png"></p></li></ul></li></ul><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a =[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>];<br>下面求a中最大值的代码正确的是<br><span class="hljs-attr">A</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(a)<br><br><span class="hljs-attr">B</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">max</span>(a)<br><br><span class="hljs-attr">C</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>,a)<br><br><span class="hljs-attr">D</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">max</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>,a)<br><br><span class="hljs-attr">E</span>: 以上均不是<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>D</li></ul></li><li><p>解析</p><ul><li><p><em><strong>Math.max()</strong></em> 函数返回一组数中的最大值。(不支持数组)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// expected output: 3</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(-<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>));<br><span class="hljs-comment">// expected output: -1</span><br><br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(...array1));<br><span class="hljs-comment">// expected output: 3</span><br></code></pre></td></tr></table></figure></li><li><p>apply,call都是使某一个方法成为一个对象的属性来调用,第一个参数如果是null或者undefined,则会变为window(非严格模式下)</p><ul><li>所以这里只能用apply,传入多个参数给Math.max 类似于Math.max(…a)</li><li>不可以使用call 因为call不能将数组展开为多个参数</li></ul></li></ul></li></ul><h3 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">已知数组arr = [<span class="hljs-number">2</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>]，现在要对数组进行遍历，只要数组存在大于<span class="hljs-number">10</span>的元素，则输出<span class="hljs-literal">true</span>，否则输出<span class="hljs-literal">false</span>，则下列选项中，符合要求的是（）<br><span class="hljs-attr">A</span>:<br>    <span class="hljs-keyword">var</span> res = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">val1,val2</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">return</span> val1 &gt; <span class="hljs-number">10</span>;<br><br>    &#125;)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><br><span class="hljs-attr">B</span>:<br><span class="hljs-keyword">var</span> res = arr.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">val1,val2</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">return</span> val1 &gt; <span class="hljs-number">10</span>;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><br><span class="hljs-attr">C</span>:<br>    <span class="hljs-keyword">var</span> res = arr.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">val1,val2</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">return</span> val1 &gt; <span class="hljs-number">10</span>;<br><br>    &#125;)<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><br><span class="hljs-attr">D</span>:<br><span class="hljs-keyword">var</span> res = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">val1,val2</span>)=&gt;</span>&#123;<br><br>    <span class="hljs-keyword">return</span> val1 &gt; <span class="hljs-number">10</span>;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br></code></pre></td></tr></table></figure><ul><li>答案</li><li>解析<h3 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h3></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">+<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">017</span>)   这段代码输出为？（）<br><span class="hljs-attr">A</span>: <span class="hljs-number">17</span><br><span class="hljs-attr">B</span>: <span class="hljs-title class_">NaN</span><br><span class="hljs-attr">C</span>: <span class="hljs-number">15</span><br><span class="hljs-attr">D</span>: <span class="hljs-title class_">Error</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p>首先来看 new Array(017)  数字0开头,代表8进制,所以转化八进制17为十进制为15,也就是返回一个空数组,长度为15</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/202205062344273.png"></p></li><li><p>+作为一元运算符时，会将参数转换为数字返回</p></li><li><p>这里相当于对于一个<strong>未赋值</strong>但是长度为15的数组进行number类型转化，其结果为NaN</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-变量的回收和reduce的使用</title>
    <link href="/2022/05/05/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8805%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/05/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8805%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪些表达式的值为<span class="hljs-number">0</span>？(多选)<br><span class="hljs-attr">A</span>: (<span class="hljs-function">()=&gt;</span>&#123;&#125;).<span class="hljs-property">length</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-number">1</span> &amp; <span class="hljs-number">2</span><br><br><span class="hljs-attr">C</span>: +[]<br><br><span class="hljs-attr">D</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,B,C,D</li></ul></li><li><p>解析</p><ul><li><p>A:  获取的是<strong>形参</strong>的个数(不是实参)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">如果是(<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span> &#123;&#125;).<span class="hljs-property">length</span>，形参有一个所以函数的length为<span class="hljs-number">1</span> ；<br>如果是(<span class="hljs-function">(<span class="hljs-params">a，b</span>)=&gt;</span> &#123;&#125;).<span class="hljs-property">length</span>，形参有两个所以函数的length为<span class="hljs-number">2</span><br>假如：<span class="hljs-keyword">function</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params"></span>)&#123;&#125;<br>            <span class="hljs-title function_">aaa</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aaa.<span class="hljs-property">length</span>) ;<span class="hljs-comment">//值为0，因为形参个数是0，所以函数的length为0</span><br></code></pre></td></tr></table></figure></li><li><p>B:  <code>&amp;</code> 与运算, (二进制下)二者都是1最终结果才为1,否则就为0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>的二进制表示  <span class="hljs-number">0001</span><br><span class="hljs-attribute">2</span>的二进制表示  <span class="hljs-number">0010</span><br><span class="hljs-attribute">1</span>&amp;<span class="hljs-number">2</span>结果是        <span class="hljs-number">0000</span> ，转成<span class="hljs-number">10</span>进制也就是<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>C: +[ ] 隐式类型转换。 +会让 [ ] 隐式转换成Number，转换过程如下</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">因为 [ ] 是对象，所以 <span class="hljs-function"><span class="hljs-title">toPrimitive</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">valueOf</span>-&gt;</span>toString为  <span class="hljs-string">&#x27;&#x27;</span> ，Number(<span class="hljs-string">&#x27;&#x27;</span>)得<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>D: reduce用于求和</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 代码简写</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b, <span class="hljs-number">0</span>)<br><br><span class="hljs-comment">// 代码详细</span><br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">3</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, cur</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> a-b;<br>&#125;,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>reduce的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 求和<br>【参数】: callback参数<br><span class="hljs-number">1.</span> <span class="hljs-title function_">total</span>(若为赋值,则默认为<span class="hljs-number">0</span>)<br><span class="hljs-number">2.</span> currentItem<br><span class="hljs-number">3.</span> currentIndex<br><span class="hljs-number">4.</span> <span class="hljs-title function_">arr</span>(数组所属数组对象)<br>【返回值】:根据callback的返回值决定total的值<br>【示例】: <br><span class="hljs-keyword">var</span> sum = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">prev, cur</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev)    <span class="hljs-comment">// 0</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cur)       <span class="hljs-comment">// &#123;name:&#x27;小明&#x27;,score:88&#125;</span><br>    <span class="hljs-keyword">return</span> cur.<span class="hljs-property">score</span> + prev;<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;总数是&#x27;</span> + sum)<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下列代码存在几个变量没有被回收？（ ）<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123;<br>        i++;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>&#125;();<br><span class="hljs-title function_">add</span>();<br><span class="hljs-attr">A</span>: <span class="hljs-number">0</span>个<br><span class="hljs-attr">B</span>: <span class="hljs-number">1</span>个<br><span class="hljs-attr">C</span>: <span class="hljs-number">2</span>个<br><span class="hljs-attr">D</span>: <span class="hljs-number">3</span>个<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>D</li></ul></li><li><p>解析</p><ul><li><p>不会被回收的</p><ul><li>全局变量<code>i</code>不会被回收</li><li>全局变量<code>add</code>不会被回收</li><li>闭包引用的局部变量<code>i</code>不会被回收</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span>; <span class="hljs-comment">//二个var ,一个被覆盖了,没有新建,只是覆盖,因此只有一个全局变量i不会被回收</span><br><br><span class="hljs-comment">// add 也是全局变量,不回收</span><br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// var 是函数作用域</span><br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123;<br>        <span class="hljs-comment">//闭包保持引用,因此这个也不会被回收</span><br>        i++;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>    &#125;<br>&#125;();<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下代码执行后，array的结果是？<br><span class="hljs-keyword">var</span> array=[-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>];<br>array.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(a-<span class="hljs-number">3</span>)-<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(b-<span class="hljs-number">3</span>));<br><span class="hljs-attr">A</span>: [<span class="hljs-number">10</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-attr">B</span>: [<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>]<br><br><span class="hljs-attr">C</span>: [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>]<br><br><span class="hljs-attr">D</span>: [-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>]<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>(a,b)&#x3D;&gt;Math.abs(a-3)-Math.abs(b-3)；</p><p>箭头函数表示：当Math.abs(a-3)&gt;Math.abs(b-3)时，a放在b后面，Math.abs(a-3)&lt;Math.abs(b-3)时，不交换位置，也就是说数组中的每一项减去3的绝对值越大越靠后。这里主要考的是对sort()方法的掌握.</p></li><li><p>我个人也不是很懂,只知道 array.sort((a,b)&#x3D;&gt;a-b)是升序 array.sort((a,b)&#x3D;&gt;b-a)是降序</p></li><li><p>获取这个是一个技巧吧,真正理解sort还是挺复杂的</p><ul><li>先将数组每一个值 <code>-3</code>再取绝对值,然后得<code> [4，2，0，1，3，7]</code></li><li>[4，2，0，1，3，7] 依次对应数组 [-1，1，3，4，6，10]</li><li>又因为是  Math.abs(a-3) - Math.abs(b-3)；所以数组中的每一项减去3的绝对值越大越靠后,排序后的为[0，1，2，3，4，7],所以最终结果就为**[3，4，1，6，-1，10]**</li></ul></li><li><p><a href="https://www.nowcoder.com/questionTerminal/77fc9837d35047d58fad44cde4e365c6">具体可看</a></p></li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">el是一个id=<span class="hljs-string">&quot;id1&quot;</span>的div元素，以下哪行代码会执行失败<br><span class="hljs-attr">A</span>: el.<span class="hljs-property">className</span>=<span class="hljs-string">&#x27;aaa&#x27;</span><br><br><span class="hljs-attr">B</span>: el.<span class="hljs-property">tagName</span>=<span class="hljs-string">&#x27;p&#x27;</span><br><br><span class="hljs-attr">C</span>: el.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-attr">D</span>: el.<span class="hljs-property">id</span>=<span class="hljs-string">&#x27;id2&#x27;</span><br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>B</li></ul></li><li>解析<ul><li>A:  className 属性<strong>设置或返回</strong>元素的 class 属性。获取属性值：HTMLElementObject.className；设置属性值：HTMLElementObject.className&#x3D;<em>classname</em></li><li>B:  <strong>tagName属性返回元素的标签名</strong>。HTML 返回 tagName 属性的值是大写的比如div标签返回tagName为 DIV</li><li>C: innerHTML 属性<strong>设置或返回</strong>表格行的开始和结束标签之间的 HTML。HTMLElementObject.innerHTML&#x3D;text</li><li>id 属性<strong>设置或者返回</strong>元素的 id。HTMLElementObject.id&#x3D;id</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>默认暴露,分别暴露,整体暴露的再次学习及常用知识</title>
    <link href="/2022/05/04/%E5%89%8D%E7%AB%AF/%E9%BB%98%E8%AE%A4%E6%9A%B4%E9%9C%B2,%E5%88%86%E5%88%AB%E6%9A%B4%E9%9C%B2,%E6%95%B4%E4%BD%93%E6%9A%B4%E9%9C%B2/"/>
    <url>/2022/05/04/%E5%89%8D%E7%AB%AF/%E9%BB%98%E8%AE%A4%E6%9A%B4%E9%9C%B2,%E5%88%86%E5%88%AB%E6%9A%B4%E9%9C%B2,%E6%95%B4%E4%BD%93%E6%9A%B4%E9%9C%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="三个暴露相同点"><a href="#三个暴露相同点" class="headerlink" title="三个暴露相同点"></a>三个暴露相同点</h3><ol><li><p>可以理解为都是<strong>暴露出一个对象</strong>给其他使用!</p></li><li><p>无论是哪一个暴露方式,想要直接获取到暴露出去的对象,可以使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> 名称 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xxx.js&quot;</span><br><span class="hljs-comment">//比如</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $API <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xxx.js&quot;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="默认暴露"><a href="#默认暴露" class="headerlink" title="默认暴露"></a>默认暴露</h3><ol><li>默认暴露js代码里面,**只可以有一个默认暴露(也就是只能由一个export default出现)**否则出现<code>Uncaught SyntaxError: Identifier &#39;.default&#39; has already been declared (at 1.js:2:8)</code>报错</li><li>暴露出一个对象,直接就可以拿来使用</li></ol><p>1.js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">10</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-number">100</span><br>&#125;<br><span class="hljs-comment">//相当于向外暴露一个对象,对象当中只有一个default属性,值为暴露对象的值</span><br><span class="hljs-comment">// 上面暴露相当于是暴露下方对象给其他使用</span><br>&#123;<br>    <span class="hljs-attr">default</span>:&#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">10</span>,<br>        <span class="hljs-attr">b</span>:<span class="hljs-number">100</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 默认暴露</span></span><br><span class="language-javascript">        <span class="hljs-comment">// 代码等同于 import &#123;default as content&#125; from &quot;./1.js&quot;</span></span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span></span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<span class="hljs-comment">//输出&#123;a: 10, b: 100&#125;</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="部分-分别-暴露"><a href="#部分-分别-暴露" class="headerlink" title="部分(分别)暴露"></a>部分(分别)暴露</h3><ol><li>将暴露的内容汇聚成为一个对象给其他使用</li></ol><p>1.js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; &#125;;<br><span class="hljs-comment">// 代码等同于暴露下方对象</span><br>&#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">b</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//部分(分别)暴露 并且进行解构赋值</span></span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> &#123; a, b &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b);<span class="hljs-comment">//10   ƒ () &#123; &#125;</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="整体-统一-暴露"><a href="#整体-统一-暴露" class="headerlink" title="整体(统一)暴露"></a>整体(统一)暴露</h3><p>1.js内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//整体暴露</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> b = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> c = &#123;<br>    <span class="hljs-attr">age</span>:<span class="hljs-string">&quot;18&quot;</span><br>&#125;<br><span class="hljs-comment">// 整体(统一)暴露只可以写成es6简写模式!</span><br><span class="hljs-keyword">export</span> &#123;<br>    a,<br>    b,<br>    c<br>&#125;<br><span class="hljs-comment">//整体(统一)暴露相当于暴露下方对象给其他使用</span><br>&#123;<br>    <span class="hljs-attr">a</span>:<span class="hljs-number">10</span>,<br>    <span class="hljs-attr">b</span>:<span class="hljs-number">10</span>,<br>    <span class="hljs-attr">c</span>:&#123;<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">18</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.html内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//整体暴露</span></span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<span class="hljs-comment">//输出结果看图</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220504232232.png"></p><p>​<p><strong>点开后</strong></p></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220504232256.png"></p><h3 id="三种暴露获取暴露出去的对象"><a href="#三种暴露获取暴露出去的对象" class="headerlink" title="三种暴露获取暴露出去的对象"></a>三种暴露获取暴露出去的对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> 名称 <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xxx.js&quot;</span><br><span class="hljs-comment">//比如</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $API <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;xxx.js&quot;</span><br></code></pre></td></tr></table></figure><h4 id="默认暴露-1"><a href="#默认暴露-1" class="headerlink" title="默认暴露"></a>默认暴露</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">//js代码<br>//默认暴露<br>export default &#123;<br>    a:10,<br>    b:100<br>&#125;<br>//html代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 默认暴露</span></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<span class="hljs-comment">//如图</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="输出结果如图"><a href="#输出结果如图" class="headerlink" title="输出结果如图"></a>输出结果如图</h5><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220504233232.png"></p><h4 id="部分-分别-暴露-1"><a href="#部分-分别-暴露-1" class="headerlink" title="部分(分别)暴露"></a>部分(分别)暴露</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">//js代码<br>//部分(分别)暴露<br>export var a = 10;<br>export var b = function() &#123; &#125;;<br><br>//html代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 部分(分别)暴露</span></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<span class="hljs-comment">//如图</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="输出结果如图-1"><a href="#输出结果如图-1" class="headerlink" title="输出结果如图"></a>输出结果如图</h5><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220504233210.png"></p><h4 id="整体-统一-暴露-1"><a href="#整体-统一-暴露-1" class="headerlink" title="整体(统一)暴露"></a>整体(统一)暴露</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html">//js代码<br>//整体暴露<br>const a = 10;<br>let b = 10;<br>var c = &#123;<br>    age:&quot;18&quot;<br>&#125;<br>export &#123;<br>    a,<br>    b,<br>    c<br>&#125;<br><br>//html代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 整体暴露</span></span><br><span class="language-javascript">     <span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> content <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./1.js&quot;</span></span><br><span class="language-javascript">     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(content);<span class="hljs-comment">//如图</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="输出结果如图-2"><a href="#输出结果如图-2" class="headerlink" title="输出结果如图"></a>输出结果如图</h5><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220504233145.png"></p><h3 id="默认暴露的引入并暴露一次性完成"><a href="#默认暴露的引入并暴露一次性完成" class="headerlink" title="默认暴露的引入并暴露一次性完成"></a>默认暴露的引入并暴露一次性完成</h3><ol><li><p>在做项目的时候,有时候需要把所有的默认暴露的模块整合到一个模块当中去以便后期使用</p><ul><li>也就是 A.js  ,B.js  ,C.js  ,D.js  模块统一在  All.js  当中引入</li></ul></li><li><p><strong>用法格式:</strong> <code>import &#123; default as 别名名称 &#125; from &quot;模块路径&quot;</code> <strong>针对默认暴露</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//代码等同于</span><br><br><span class="hljs-comment">// module1.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-title function_">C</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>&#125;<br><br><span class="hljs-comment">// All.js</span><br><span class="hljs-keyword">export</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> module1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module1.js&quot;</span>;<br><span class="hljs-comment">//上面一行代码等同于下面二行代码的代码效果</span><br>    <span class="hljs-comment">//1</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> module1&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module1.js&quot;</span><br>    <span class="hljs-comment">//2</span><br><span class="hljs-keyword">export</span> module1 &#123;<br>    <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-title function_">b</span>(<span class="hljs-params"></span>)&#123;&#125;,<br>    <span class="hljs-title function_">C</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>或者<code>export * as xxx from &quot;./1.js&quot;</code> <strong>针对分别暴露</strong></p></li><li><p>后期如果需要使用到 All.js 整合暴露的东西</p><ol><li>比如绑定在Vue原型上: import * as $API from “.&#x2F;All.js”; Vue.prototype.$API &#x3D; $API; 后期module1就这样子this.$API.module1.a();  this.$API.module1.b();   this.$API.module1.c();</li></ol></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>默认<strong>暴露是一个对象</strong>default为属性defau1t后面值为值的一个对象只能写一次</li><li>部分(分别)<strong>暴露是一个对象</strong>它是最终暴露出去的时候把所有暴露的变量自动封装到对象当中</li><li>整体(统一)<strong>暴露是一个对象</strong>这个对象是我们自己需要写的，把所有的需要暴露的变量写到我们的对象当中</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-四舍五入等于...</title>
    <link href="/2022/05/04/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8804%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/04/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8804%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Math.round(-2019.5)的结果是</span><br><span class="hljs-attr">A:</span> <span class="hljs-number">2019</span><br><span class="hljs-attr">B:</span> <span class="hljs-number">-2019</span><br><span class="hljs-attr">C:</span> <span class="hljs-number">2020</span><br><span class="hljs-attr">D:</span> <span class="hljs-number">-2020</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p>不多说,了解到的一个技巧,Math.round() 原来的数字加上0.5 然后向下取整就是最终值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例子</span><br><span class="hljs-comment">//2019.49 + 0.5 = 2019.99 向下取整 2019 </span><br>x=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">2019.49</span>);<br><br><span class="hljs-comment">//2019.5 + 0.5 = 2020.0 向下取整 2020</span><br>x=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">2019.5</span>);<br><br><span class="hljs-comment">//-2019.79 + 0.5 = -2019.39 向下取整 2020</span><br>x=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(-<span class="hljs-number">2019.79</span>);<br><br><span class="hljs-comment">//-2019.51 + 0.5 = -2019.01 向下取整 -2020</span><br>x=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(-<span class="hljs-number">2019.51</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">执行以下代码，输出的a值为（）<br><span class="hljs-keyword">if</span>(! <span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(a);<br><span class="hljs-attr">A</span>: <span class="hljs-literal">null</span><br><span class="hljs-attr">B</span>: <span class="hljs-number">1</span><br><span class="hljs-attr">C</span>: <span class="hljs-literal">undefined</span><br><span class="hljs-attr">D</span>: 其他选项均不正确<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>A <strong>in</strong> B 用于判断A是否在B的属性上或者是原型链上(官方解释为如果指定的属性在指定的对象或其原型链中，则**<code>in</code> 运算符**返回<code>true</code>。)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//   &quot;a&quot; 为字符串,会存在变量提升(不可能存在没有类型的一个变量!)</span><br><br><span class="hljs-comment">//判断全局对象window中是否有变量a，如果没有变量a，就进入判断将a赋值为1</span><br><span class="hljs-keyword">if</span>(! <span class="hljs-string">&quot;a&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span>)&#123;<br>    <span class="hljs-comment">// 判断 &quot;a&quot; 是否是在window的属性或者原型链上</span><br>    <span class="hljs-comment">// 如果为true ,那么取反为 false,则不执行if语句</span><br>    <span class="hljs-comment">// 如果为false , 那么取反为true,则执行if语句</span><br><span class="hljs-comment">// 由于变量的提前声明特性，在执行这段代码之后，全局对象window中就已经存在a这个变量了,所以不进入if </span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(a);<span class="hljs-comment">//输出undefined</span><br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-类型转换</title>
    <link href="/2022/05/03/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8803%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/03/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8803%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下面有关<span class="hljs-title class_">JavaScript</span>内部对象的描述，正确的有？(多选)<br><span class="hljs-attr">A</span>: <span class="hljs-title class_">History</span> 对象包含用户（在浏览器窗口中）访问过的 <span class="hljs-variable constant_">URL</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-title class_">Location</span> 对象包含有关当前 <span class="hljs-variable constant_">URL</span> 的信息<br><br><span class="hljs-attr">C</span>: <span class="hljs-title class_">Window</span> 对象表示浏览器中打开的窗口<br><br><span class="hljs-attr">D</span>: <span class="hljs-title class_">Navigator</span> 对象包含有关浏览器的信息<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>牛客网的答案为A,B,C,D</li><li>我个人认为history不包含访问过的URL(当然源代码我没看过)</li></ul></li><li>解析<ul><li>Navagator：提供有关浏览器的信息</li><li>Window：Window对象处于对象层次的最顶层，它提供了处理Navagator窗口的方法和属性</li><li>Location：提供了与当前打开的URL一起工作的方法和属性，是一个静态的对象</li><li>History：提供了与历史清单有关的信息</li><li>Document：包含与文档元素一起工作的对象，它将这些元素封装起来供编程人员使用</li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪些表达式的结果为<span class="hljs-title function_">true</span>(多选) (多选)<br><span class="hljs-attr">A</span>: <span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&quot;100&quot;</span>)<br><br><span class="hljs-attr">C</span>: <span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&quot;1a&quot;</span>) === <span class="hljs-number">1</span><br><br><span class="hljs-attr">D</span>: [] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span><br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,C,D</li></ul></li><li><p>解析</p><ul><li><p>A: 二个等于号( &#x3D;&#x3D; ) ,类型不相同的时候,会发生隐式转换,<a href="https://blog.csdn.net/impact_factor/article/details/117572954">隐式转换具体可以看这个博客</a></p></li><li><p>B: isNaN() 用来判断一个数是否是NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//isNaN(转换的值),当要&#x27;转换的值&#x27;为NaN的时候或者是&#x27;转换的值&#x27;转换后为NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;e&#x27;</span>));<span class="hljs-comment">//ture</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;11&#x27;</span>));<span class="hljs-comment">//false 因为字符串可以被转化为数字,不能转换为NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;a111&#x27;</span>));<span class="hljs-comment">//true 字符串转换不了数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;1a11&#x27;</span>));<span class="hljs-comment">//true 字符串转换不了数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;null&#x27;</span>));<span class="hljs-comment">//false 因为null被转化为数字为0,0不会为NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>));<span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure></li><li><p>C: parseInt(string,radix) 解析一个字符串并返回指定基数的十进制整数(未指定radix则返回10进制)， radix 是2-36之间的整数，表示被解析字符串的基数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分(第<span class="hljs-number">0</span>个开始,直到遇到是非数字的就截断返回)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;223&#x27;</span>));<span class="hljs-comment">//返回数字223</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;223a18&#x27;</span>));<span class="hljs-comment">//返回数字223</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;a223&#x27;</span>));<span class="hljs-comment">//返回NaN,因为第一个字符不是数字,所以直接返回NaN</span><br><br></code></pre></td></tr></table></figure></li><li><p>D: 空数组也是数组的实例化对象</p></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪些操作会触发<span class="hljs-title class_">Reflow</span>：(多选)<br><span class="hljs-attr">A</span>: <span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">className</span>)<br><br><span class="hljs-attr">B</span>: <span class="hljs-title function_">alert</span>(obj.<span class="hljs-property">offsetHeight</span>)<br><br><span class="hljs-attr">C</span>: obj.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&quot;100px&quot;</span><br><br><span class="hljs-attr">D</span>: obj.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&quot;red&quot;</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B,C</li></ul></li><li><p>解析</p><ul><li><p><strong>Reflow 回流</strong> 原文链接：<a href="http://www.cnblogs.com/Peng2014/p/4687218.html%EF%BC%89">http://www.cnblogs.com/Peng2014/p/4687218.html）</a></p><ul><li><p><strong>简要:</strong> </p><p>整个在浏览器的渲染过程中（页面初始化，用户行为改变界面样式，动画改变界面样式等）reflow(回流)和repaint(重绘) 会大大影响web性能，尤其是手机页面。因此我们在页面设计的时候要尽量减少reflow和repaint。</p></li><li><p><strong>Reflow</strong>几乎是无法避免的。现在界面上流行的一些效果，比如树状目录的折叠、展开（实质上是元素的显 示与隐藏）等，都将引起浏览器的 reflow。鼠标滑过、点击……<strong>只要这些行为引起了页面上某些元素的占位面积、定位方式、边距等属性的变化，都会引起它内部、周围甚至整个页面的重新渲染</strong>。通常我们都无法预估浏览器到底会 reflow 哪一部分的代码，它们都彼此相互影响着。</p></li><li><p>下面情况会导致reflow发生(是可能会!)</p><ol><li>改变窗口大小</li><li>改变文字大小</li><li>内容的改变(比如用户在输入框中输入文字)</li><li>操作伪类  如:hover</li><li>操作class属性(会引发样式的改变情况下)</li><li>js操作DOM</li><li>计算offsetWidth和offsetHeight</li><li>设置style属性</li></ol></li></ul></li><li><p><strong>Repaint 重绘</strong></p><ul><li>如果只是改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性，将只会引起浏览器 repaint（重绘）。repaint 的速度明显快于 reflow</li></ul></li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">请问以下<span class="hljs-variable constant_">JS</span>代码的输出是？<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">father</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">935</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">work</span> = [<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>, <span class="hljs-string">&#x27;listen&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">son</span>(<span class="hljs-params"></span>) &#123;&#125;<br>son.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">father</span>();<br><span class="hljs-keyword">let</span> son1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">son</span>();<br><span class="hljs-keyword">let</span> son2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">son</span>();<br>son1.<span class="hljs-property">num</span> = <span class="hljs-number">117</span>;<br>son1.<span class="hljs-property">work</span>.<span class="hljs-title function_">pop</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son2.<span class="hljs-property">num</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son2.<span class="hljs-property">work</span>);<br><br><span class="hljs-attr">A</span>: <span class="hljs-number">117</span>、[<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-attr">B</span>: <span class="hljs-number">935</span>、[<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>,<span class="hljs-string">&#x27;listen&#x27;</span>]<br><br><span class="hljs-attr">C</span>: <span class="hljs-number">935</span>、[<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>]<br><br><span class="hljs-attr">D</span>: <span class="hljs-number">117</span>、[<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>,<span class="hljs-string">&#x27;listen&#x27;</span>]<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">father</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span> = <span class="hljs-number">935</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">work</span> = [<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;write&#x27;</span>, <span class="hljs-string">&#x27;listen&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">son</span>(<span class="hljs-params"></span>) &#123;&#125;<br>son.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">father</span>(); <br><span class="hljs-comment">// son.prototype = &#123;  num:935, work:[&#x27;read&#x27;,&#x27;write&#x27;,&#x27;listen&#x27;] &#125;</span><br><br><span class="hljs-keyword">let</span> son1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">son</span>(); <span class="hljs-comment">// son1 = &#123; &#125;</span><br><span class="hljs-keyword">let</span> son2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">son</span>(); <span class="hljs-comment">// son2 = &#123; &#125;</span><br><br>son1.<span class="hljs-property">num</span> = <span class="hljs-number">117</span>; <span class="hljs-comment">// son1 = &#123; num: 117 &#125;</span><br><br>son1.<span class="hljs-property">work</span>.<span class="hljs-title function_">pop</span>(); <br><span class="hljs-comment">//son1自己没有work，去原型里找到work,并删除work里的最后一项，</span><br><span class="hljs-comment">//此时son.prototype = &#123;  num:935, work:[&#x27;read&#x27;,&#x27;write&#x27;] &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son2.<span class="hljs-property">num</span>);<span class="hljs-comment">// son2自己没有num，去原型里找，有num:935</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(son2.<span class="hljs-property">work</span>);<br><span class="hljs-comment">//son1和son2原型是同一个，所以此时原型里的work是[&#x27;read&#x27;, &#x27;write&#x27;]</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">上面这段代码运行后得到的结果分别是什么？<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(([])?<span class="hljs-attr">true</span>:<span class="hljs-literal">false</span>); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(([]==<span class="hljs-literal">false</span>?<span class="hljs-attr">true</span>:<span class="hljs-literal">false</span>)); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((&#123;&#125;==<span class="hljs-literal">false</span>)?<span class="hljs-attr">true</span>:<span class="hljs-literal">false</span>) <br><span class="hljs-attr">A</span>: <span class="hljs-literal">false</span> <span class="hljs-literal">true</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">B</span>: <span class="hljs-literal">true</span> <span class="hljs-literal">true</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">C</span>: <span class="hljs-literal">true</span> <span class="hljs-literal">false</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">D</span>: <span class="hljs-literal">true</span> <span class="hljs-literal">true</span> <span class="hljs-literal">false</span><br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>D</li></ul></li><li><p>解析</p><ul><li><p>布尔类型里只有这几参数个返回false，其它都为true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// false </span><br><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// false </span><br><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// false </span><br><br><span class="hljs-title class_">Boolean</span>(<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">//其他转换均为true</span><br><span class="hljs-title class_">Boolean</span>([]) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>需要知道: <strong>布尔类型与其它任何类型进行比较，布尔类型和其他类型均会转换为number类型进行比较</strong></p><ul><li>Number([])   &#x3D;&gt; 为0</li><li>Number(true) &#x3D;&gt; 为1     Number(false) &#x3D;&gt; 为0</li><li>Number({}) &#x3D;&gt; 为NaN  (<strong>Number转换类型的参数如果为对象返回的就是NaN</strong>)</li></ul></li><li><pre><code class="javascript">//相当于 true?true:falseconsole.log(([])?true:false);//返回true//相当于 0 == 0 ? true : falseconsole.log(([]==false?true:false));//返回true//相当于 NaN == 0 ? true : falseconsole.log((&#123;&#125;==false)?true:false);//返回false</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-decodeURI</title>
    <link href="/2022/05/02/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8802%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/02/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8802%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下列正确定义函数的是<br><span class="hljs-attr">A</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-attr">B</span>: <span class="hljs-title class_">Function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-attr">C</span>: <span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>() &#123;&#125;<br><br><span class="hljs-attr">D</span>: <span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A</li></ul></li><li>解析<ul><li>B当中的 ‘Function’ 写错了,应该是 ‘function’</li><li>C当中应该是 var foo &#x3D; new Function (参数1,参数2,……)</li><li>D同C一样,都是弄错了</li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下代码执行时不会在控制台输出错误信息的是：<br><span class="hljs-attr">A</span>: <span class="hljs-keyword">let</span> a = <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&#x27;%&#x27;</span>);<br><span class="hljs-attr">B</span>: <br>    <span class="hljs-keyword">var</span> a;<br>    <span class="hljs-title function_">a</span>();<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;<br><span class="hljs-attr">C</span>:<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">123</span>).<span class="hljs-title function_">finally</span>(<span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;);<br><span class="hljs-attr">D</span>: <br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p>A: decodeURIComponent(字符串),对字符串进行解码,此时这里传入的字符串应该是使用encodeURI或者是encodeURIComponent编码后的字符串进行解码,直接传入%是一个没有编码的字符串（ ‘%’ 编码后为 ‘ %25’ ）</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220428204031.png"></p></li><li><p>B: 函数提升和变量提升同时存在，<strong>函数提升优先级 高于 变量提升</strong>，所以变量a被函数所覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo); <br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">1</span>  <span class="hljs-comment">//变量提升</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo)<br><span class="hljs-title function_">foo</span>()<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//函数提升</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数&#x27;</span>)<br>&#125;<br>=========等价于=============&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//提到顶端</span><br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> foo  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo) <span class="hljs-comment">//输出foo这个函数，因为上面foo没有被赋值，foo还是原来的值 </span><br>foo = <span class="hljs-number">1</span>;  <span class="hljs-comment">//赋值不会提升,赋值后 foo就不再是函数类型了，而是number类型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(foo) <span class="hljs-comment">//输出1</span><br><span class="hljs-title function_">foo</span>() <span class="hljs-comment">//这里会报错，因为foo不是函数了</span><br></code></pre></td></tr></table></figure></li><li><p>C: 选项需要 .catch去补货 被 reject 的 Promise，才能不抛出错误</p></li><li><p>D: 选项因为 let 的 TDZ（“暂时性死区”），在 let 的<strong>块</strong>作用域中无法重复声明，也无法在声明语句之前使用（没有变量提升）。简而言之，在 let 语句出现之前，都是无法使用该变量的(<strong>说通俗点就是</strong>——只要let所在定义域下(也就是在函数当中的 <code>&#123; &#125;</code> 当中),<strong>在let代码没有执行之前</strong>,如果这个时候有一段代码对let声明的变量名称<strong>进行了访问并且代码执行了</strong>(  比如console.log() ) ,那么就会发生报错!)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">补充一点。这种情况下是可以正常运行的：<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#123;<br>    <span class="hljs-comment">//块级作用域</span><br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">2</span>;   <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//输出1</span><br><br><br>也看看下面这种情况<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<span class="hljs-comment">//输出x=10;</span><br>    x++;<br>&#125;<br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">foo</span>();<br><span class="hljs-comment">//结合上面说所的,分析下过程</span><br><span class="hljs-comment">//就是只要let所在定义域下(也就是在函数当中的 `&#123; &#125;` 当中)</span><br><span class="hljs-comment">//在let代码没有执行之前</span><br><span class="hljs-comment">//如果这个时候有一段代码对let声明的变量名称进行了访问</span><br><span class="hljs-comment">//(  比如console.log() ) ,那么就会发生报错!</span><br><br><span class="hljs-comment">//拆解 执行过程</span><br><span class="hljs-comment">//第一步</span><br><span class="hljs-keyword">let</span> foo = &#123;...&#125;;<span class="hljs-comment">//此时函数并没有执行,所以不存在对let变量进行访问并执行,所以不报错</span><br><span class="hljs-comment">//第二步</span><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//第三步</span><br><span class="hljs-title function_">foo</span>();<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下列代码中，页面打开后能够弹出<span class="hljs-number">1</span>的是？(多选)<br><span class="hljs-attr">A</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”javascript:</span> <span class="hljs-attr">alert</span>(<span class="hljs-attr">1</span>)”&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br><br><span class="hljs-attr">B</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">””</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">”alert(1)”/</span>&gt;</span></span><br><br><span class="hljs-attr">C</span>: <span class="hljs-variable constant_">IE</span>下&lt;s style=”<span class="hljs-attr">top</span>:<span class="hljs-title function_">expression</span>(<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>))”&gt;&lt;/s&gt;<br><br><span class="hljs-attr">D</span>: <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">”alert(1)”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A，B，C</li></ul></li><li>解析<ul><li>A：加载的时候会触发alert（1）代码</li><li>B：img当中的onerror，当图片不存在加载失败的时候会触发，此时这里src&#x3D;“”，导致加载失败，所以触发alert（1）事件</li><li>C：在ie 7下会连续弹出，   IE5及其以后版本支持在CSS中使用expression，用来把CSS属性和Javascript表达式关联起来，这里的CSS属性可以是元素固有的属性，也可以是自定义属性。就是说CSS属性后面可以是一段Javascript表达式，CSS属性的值等于Javascript表达式计算的结果。在表达式中可以直接引用元素自身的属性和方法，也可以使用其他浏览器对象。这个表达式就好像是在这个元素的一个成员函数中一样。</li><li>D：onclick，单击div标签才会触发</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">当用户打开一个网页时，想一直停留在当前打开的页面，禁止页面前进和后退，以下正确的是（      ）(多选)<br><span class="hljs-attr">A</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">forward</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-attr">B</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">back</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-attr">C</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);<br><br><span class="hljs-attr">D</span>: <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">forward</span>(-<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A，D</li></ul></li><li><p>解析</p><ul><li><p>题目意思</p><ul><li><p><strong>相当于URI当中输入了网站，比如说baidu.com,然后会发现只有后退没有前进按钮的操作，这种情况下从ABCD选</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220502161507.png"></p></li></ul></li><li><p>A：window.history.forward( 1 ) （forward不用传递参数，传入也会无效）前进一个页面，这里没办法前进，所以可以选</p></li><li><p>B：window.history.back(  )（back不用传递参数，传入也会无效）后退一个页面，这里可以后退，但是题目要求禁止，所以不选</p></li><li><p>C：window.history.go(-1) 后退一个页面，这里可以后退，但是题目要求禁止，所以不选</p><ul><li>window.history.go(delta);—-相对于当前页面你要去往历史页面的位置。<strong>负值</strong>表示向后移动，<strong>正值</strong>表示向前移动。因此，例如：<code>history.go(2)</code>向前移动两页，<code>history.go(-2)</code>则向后移动两页。如果未向该函数传参或<code>delta</code>相等于0，则该函数与调用<code>location.reload()</code>具有相同的效果。</li></ul></li><li><p>D：window.history.forward( -1 ) 前进一个页面，这里没办法前进，所以可以选</p></li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">如何遍历下面的 my_data 对象？<br><span class="hljs-keyword">var</span> my_data=&#123;<span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;Ape&#x27;</span>, <span class="hljs-attr">b</span>:<span class="hljs-string">&#x27;Banana&#x27;</span>, <span class="hljs-attr">c</span>:<span class="hljs-string">&#x27;Citronella&#x27;</span>&#125;;<br><br><span class="hljs-attr">A</span>: <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> my_data) &#123;&#125;<br><br><span class="hljs-attr">B</span>: <span class="hljs-title function_">foreach</span>(<span class="hljs-params">my_data <span class="hljs-keyword">as</span> key=&gt;value</span>) &#123;&#125;<br><br><span class="hljs-attr">C</span>: <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;my_data.<span class="hljs-property">length</span>;i++) &#123;&#125;<br><br><span class="hljs-attr">D</span>: 全不选<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A</li></ul></li><li>解析<ul><li>A: 没有错,<strong><code>for...in</code>语句</strong>以任意顺序迭代一个对象的除<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol">Symbol</a>以外的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">可枚举</a>属性，包括继承的可枚举属性。<ul><li><code>for...in</code>不应该用于迭代一个关注索引顺序的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array"><code>Array</code></a>。(Array用forEach或者for…of代替)</li></ul></li><li>B: 大佬说是php的,php我不太懂</li><li>C: 对象没有.length属性,输出也是undefined(伪数组除外)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-CMD和AMD的模块化</title>
    <link href="/2022/05/01/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8801%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/05/01/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B45%E6%9C%8801%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">下列关于 JavaScript 模块化的描述，错误的是（）<br><span class="hljs-symbol">A:</span> AMD推崇依赖前置，CMD推崇依赖就近<br><span class="hljs-symbol">B:</span> Sea.js遵循AMD规范，RequireJS遵循CMD规范<br><span class="hljs-symbol">C:</span> 主流的模块化包括CommonJS,AMD,CMD等<br><span class="hljs-symbol">D:</span> 模块化有利于管理模块间的依赖，更依赖模块的维护<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>B</li></ul></li><li>解析<ul><li>AMD(也就是Async Module definition)异步模块加载机制,比如说Require.js使用的就是AMD规范,依赖前置,所有的依赖必须要放在最前面(一次性引入)</li><li>CMD是由sea.js实现的（依赖就近，所有依赖需要了再引入,用到了再引入）</li><li>CommonJS,比如说NodeJs</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学 xi强国,每天40+,帮你快乐学习</title>
    <link href="/2022/04/30/%E5%B7%A5%E5%85%B7/%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD,%E6%AF%8F%E5%A4%A940+,%E5%B8%AE%E4%BD%A0%E5%BF%AB%E4%B9%90%E5%AD%A6%E4%B9%A0/"/>
    <url>/2022/04/30/%E5%B7%A5%E5%85%B7/%E5%AD%A6%E4%B9%A0%E5%BC%BA%E5%9B%BD,%E6%AF%8F%E5%A4%A940+,%E5%B8%AE%E4%BD%A0%E5%BF%AB%E4%B9%90%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol><li>不多说,自己测试</li><li><a href="http://106.13.220.33:9980/static/index.html">地址在这里(单击我跳转)</a></li></ol><h4 id="关于学-xi-强国"><a href="#关于学-xi-强国" class="headerlink" title="关于学 xi 强国"></a>关于学 xi 强国</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">个人认为，学 <span class="hljs-keyword">xi</span> 强国本身受众就是国家的栋梁，本人不欢迎不热爱国家的人加入本项目。<br>学 <span class="hljs-keyword">xi</span> 强国聚合了大量可免费阅读的期刊、古籍、公开课、歌曲、戏曲、电影、图书等资料，内容严谨，专业性强。没有博眼球，无下限的自媒体内容和虚假新闻。推荐大家自发积极学 <span class="hljs-keyword">xi</span> 使用。TechXueXi 仅额外提供给上班上学期间工作学业繁重，抽不出时间完成学 <span class="hljs-keyword">xi</span> 强国任务的非程序员。<br>“学 <span class="hljs-keyword">xi</span> 强国”意义深远。<br></code></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>不知道最大能容纳多少人,服务器配置差,服务器蹦了的话会重启~</li><li>注意登录后单击自己的UID,不然不会自动学习</li><li>没了</li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p><strong>单击添加用户</strong><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430225942.png"></p></li><li><p><strong>二种方式登录,一种是跳转到APP登录,一种是扫码登录,任选一种就可以</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430230034.png"></p></li><li><p><strong>登录后单击下自己的UID后等待一段时间即可</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430230152.png"></p></li></ol><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">千万登录要要单击记下自己的UID!!!!<br>千万登录要要单击记下自己的UID!!!!<br>千万登录要要单击记下自己的UID!!!!<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430225819.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430225648.png"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>学xi强国</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>element-ui分页器设置每一页显示数量(page-size)后页码没有发生变化原因与解决</title>
    <link href="/2022/04/30/%E5%89%8D%E7%AB%AF/element-ui%E5%BD%93%E4%B8%ADpagination%E8%AE%BE%E7%BD%AE%E6%AF%8F%E4%B8%80%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%95%B0%E9%87%8F(page-size)%E5%90%8E%E9%A1%B5%E7%A0%81%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96/"/>
    <url>/2022/04/30/%E5%89%8D%E7%AB%AF/element-ui%E5%BD%93%E4%B8%ADpagination%E8%AE%BE%E7%BD%AE%E6%AF%8F%E4%B8%80%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%95%B0%E9%87%8F(page-size)%E5%90%8E%E9%A1%B5%E7%A0%81%E6%B2%A1%E6%9C%89%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>element-ui当中分页器,设置每一页显示数量(page-size)后页码没有发生变化</p><h4 id="比如"><a href="#比如" class="headerlink" title="比如"></a>比如</h4><ol><li>原来是每一个显示数据量为3个数据</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430112142.png"></p><ol start="2"><li><p>后面<strong>想每一页显示数据为5个</strong>,那么按照道理来说,页码也会变化的</p><p><strong>然而并没有发生变化</strong></p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430112257.png"></p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>page-size要和page-sizes当中的数据对得上才可以,也就是说page-size如果数字没有与page-sizes这个数组里面的数组对应上,那么就会区page-sizes当中的第一个值来计算页码</li></ul><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><ul><li><input checked="" disabled="" type="checkbox"> <strong>page-size有值但是page-sizes不填写</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430112601.png"></p><h4 id="示例1效果图"><a href="#示例1效果图" class="headerlink" title="示例1效果图"></a>示例1效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430112659.png"></p><h4 id="示例1分析"><a href="#示例1分析" class="headerlink" title="示例1分析"></a>示例1分析</h4><ul><li>page-size<strong>s</strong>不填写**(注意是page-sizes)**,则取默认值为 :page-sizes &#x3D; “ [10, 20, 30, 40, 50, 100] “</li><li>这里填写的 :page-size &#x3D; “12”,在 :page-sizes &#x3D; “[10, 20, 30, 40, 50, 100] “ 找不到对应的,就忽略page-size设置的值,而去取page-sizes数组当中第一个值,也就是10</li><li>最终计算页码: 10898 &#x2F; 10 向上取整就为1090页</li></ul><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><ul><li><input checked="" disabled="" type="checkbox"> <strong>page-size有值并且page-sizes填写但是page-sizes当中没有对应值</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430113319.png"></p><h4 id="示例2效果图"><a href="#示例2效果图" class="headerlink" title="示例2效果图"></a>示例2效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430113224.png"></p><h4 id="示例2分析"><a href="#示例2分析" class="headerlink" title="示例2分析"></a>示例2分析</h4><ul><li>page-size的值在page-sizes没有有对应的值,于是取page-sizes数组当第一个值,也就是3</li><li>计算页码: 10898&#x2F;3 向上取整 &#x3D; 3633页</li></ul><h3 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h3><ul><li><input checked="" disabled="" type="checkbox"> <strong>page-size有值并且page-sizes填写并且page-sizes当中有对应值</strong></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430113658.png"></p><h4 id="示例3效果图"><a href="#示例3效果图" class="headerlink" title="示例3效果图"></a>示例3效果图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220430113609.png"></p><h4 id="示例3分析"><a href="#示例3分析" class="headerlink" title="示例3分析"></a>示例3分析</h4><ul><li>page-size的值在page-sizes有对应的值,所以可以正常按照我们设置的显示页码</li><li>计算页码: 10898&#x2F;6 向上取整 &#x3D; 1817页</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-注意优先级</title>
    <link href="/2022/04/30/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8830%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/30/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8830%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">执行以下代码，其实现的效果为（）<br>&lt;div&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;button1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;moveBtn(this);&quot;</span>&gt;</span></span><br><span class="language-xml">   <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span> =<span class="hljs-string">&quot;button2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">   <span class="hljs-keyword">function</span> <span class="hljs-title function_">moveBtn</span>(<span class="hljs-params">obj</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> clone = obj.<span class="hljs-title function_">cloneNode</span>(<span class="hljs-literal">true</span>);</span></span><br><span class="language-javascript"><span class="language-xml">     <span class="hljs-keyword">var</span> parent = obj.<span class="hljs-property">parentNode</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     parent.<span class="hljs-title function_">appendChild</span>(clone);</span></span><br><span class="language-javascript"><span class="language-xml">     parent.<span class="hljs-title function_">removeChild</span>(obj);</span></span><br><span class="language-javascript"><span class="language-xml">   &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="hljs-attr">A</span>: 鼠标单击button1后将button1链接到button2的后面<br><br><span class="hljs-attr">B</span>: 鼠标单击button1后将button1移动到button2的后面<br><br><span class="hljs-attr">C</span>: 鼠标单击button1后将button2移动到button1的后面<br><br><span class="hljs-attr">D</span>: 鼠标单击button1后将button2链接到button1的后面<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>B</li></ul></li><li>解析<ul><li>**<code>Node.cloneNode([deep]) </code>**方法返回调用该方法的节点的一个副本.<ul><li>Node: 将要被克隆的节点</li><li>deep: 是否采用深度克隆,如果为true,则该节点的所有后代节点也都会被克隆,如果为false,则只克隆该节点本身.</li></ul></li><li>所以obj.cloneNode(true);深度克隆一个自己的节点,克隆之后删除原体后在移动克隆体到button1的后面</li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">假设val已经声明,可定义为任何值。则下面js代码有可能输出的结果为:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Value is &#x27;</span> + (val != <span class="hljs-string">&#x27;0&#x27;</span>) ? <span class="hljs-string">&#x27;define&#x27;</span> : <span class="hljs-string">&#x27;undefine&#x27;</span>);<br><span class="hljs-attr">A</span>: <span class="hljs-title class_">Value</span> is define<br><br><span class="hljs-attr">B</span>: <span class="hljs-title class_">Value</span> is undefine<br><br><span class="hljs-attr">C</span>: define<br><br><span class="hljs-attr">D</span>: undefine<br><br><span class="hljs-attr">E</span>: <span class="hljs-title class_">Value</span> is define 或者 <span class="hljs-title class_">Value</span> isundefine<br><br><span class="hljs-attr">D</span>: define 或者 undefine <br><br><span class="hljs-attr">E</span>: 其他选项都有可能<br><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>C</li></ul></li><li>解析<ul><li>算术运算符优先级大于三元运算符,所以先计算 <strong>‘Value is ‘ + (val !&#x3D; ‘0’)</strong> 后进行三元运算,但是这个计算结果不管怎么样都会为真（因为在js当中，除了 <strong>“”  null undefined NaN false 0</strong> 这六个转化为布尔值为假，其他均为真，空数组，空对象转化为布尔值也是真！）所以这个三元运算符结果永远为 <strong>‘define’</strong></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">JavaScript当中运算符优先级文档</a></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">已知数组arr=<span class="hljs-string">[1,69,4,6,8,10]</span>，对数组进行升序排列，下列选项中，不符合要求的是（）<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">A</span>:<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i++)&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;j &lt; arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>-i;j++)&#123;<br><br>        <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br><br>            <span class="hljs-keyword">var</span> temp = arr[j];<br><br>            arr[j] = arr[j+<span class="hljs-number">1</span>];<br><br>            arr[j+<span class="hljs-number">1</span>] = temp;<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">B</span>:<br><span class="hljs-keyword">var</span> minIndex;<br><br><span class="hljs-keyword">var</span> temp;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i++) &#123;<br><br>    minIndex = i - <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = i; j &lt;arr.<span class="hljs-property">length</span>; j++) &#123;<br><br>        <span class="hljs-keyword">if</span>(arr[j] &lt; arr[minIndex]) minIndex = j;<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(minIndex != i-<span class="hljs-number">1</span>) &#123;<br><br>        temp = arr[i-<span class="hljs-number">1</span>];<br><br>        arr[i-<span class="hljs-number">1</span>] = arr[minIndex];<br><br>        arr[minIndex] = temp;<br><br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">C</span>:<br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a,b</span>)=&gt;</span>b-a);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">D</span>:<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.<span class="hljs-property">length</span>; i ++) &#123;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j = i - <span class="hljs-number">1</span>; j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; arr[j+<span class="hljs-number">1</span>]; j --) &#123;<br><br>        <span class="hljs-keyword">let</span> temp = arr[j];<br><br>        arr[j] = arr[j+<span class="hljs-number">1</span>];<br><br>        arr[j+<span class="hljs-number">1</span>] = temp;<br><br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr);<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>C选项</li></ul></li><li>解析<ul><li>sort当中arr.sort( ( a , b ) ) &#x3D;&gt; b - a ) ;为降序,    arr.sort( ( a , b ) ) &#x3D;&gt; a-b ) 为升序</li><li>A是冒泡排序</li><li>B是选择排序</li><li>D是插入排序</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-温故而知新</title>
    <link href="/2022/04/29/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8829%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/29/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8829%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo=”<span class="hljs-title class_">Hello</span>”;<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> bar=”<span class="hljs-title class_">World</span>”;<br>    <span class="hljs-title function_">alert</span>(foo+bar);<br>&#125;)();<br><span class="hljs-title function_">alert</span>(foo+bar);<br><span class="hljs-attr">A</span>: <span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span>报错<br><span class="hljs-attr">B</span>: <span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span> <span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span><br><span class="hljs-attr">C</span>: <span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span> <span class="hljs-title class_">Hello</span><br><span class="hljs-attr">D</span>: <span class="hljs-title class_">Hello</span> <span class="hljs-title class_">World</span> <span class="hljs-title class_">Hello</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A</li></ul></li><li>解析<ul><li>var是函数作用域,也就是以函数和分割,函数内声明了var,在这个函数范围内都可以访问到.,而let是块级作用域,比如for循环当中的let变量,在for循环里面就可以访问到,在for循环外面就访问不到了!</li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以上 <span class="hljs-title class_">JavaScript</span> 代码，在浏览器中运行的结果是<br><span class="hljs-keyword">var</span> arrTemp = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arrTemp.<span class="hljs-title function_">shift</span>();<br>arrTemp.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>);<br>arrTemp.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">var</span> arrNew = arrTemp.<span class="hljs-title function_">concat</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arrNew);<br><span class="hljs-attr">A</span>: [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-attr">B</span>: [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br><span class="hljs-attr">C</span>: [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br><span class="hljs-attr">D</span>: [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]]<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A</li></ul></li><li><p>解析</p><ul><li><p>concat可以用于连接字符串和数组,均不会改变原来的变量,均返回一个连接后的变量</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220429074303.png"></p></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">以下对<span class="hljs-keyword">call</span>() 和 apply() 说法哪些是正确的  () (多选)<br><span class="hljs-symbol">A:</span> apply()函数有二个参数,第一个参数是上下文,第二个参数是参数组成的数组<br><span class="hljs-symbol">B:</span> 非严格模式,如果第一个参数是null,则使用全局对象代替<br><span class="hljs-symbol">C:</span> <span class="hljs-keyword">call</span>和apply的意思一样,只不过是参数列表不一样<br><span class="hljs-symbol">D:</span> 通过apply可以将数组转化为参数列表的集合<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>ABCD</li></ul></li><li>解析<ul><li>call() 方法使用一个指定的this值和单独给出的一个或多个参数来调用一个函数。(该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。)</li><li>第一个参数均为可选的<ul><li>在 <em><code>function</code></em> 函数运行时使用的 <code>this</code> 值。请注意，<code>this</code>可能不是该方法看到的实际值：如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 <code>null</code> 或 <code>undefined</code> 时会自动替换为指向全局对象，原始值会被包装。(也就是说如果在严格模式下,则不会被替换为全局对象window,而是会被指向null和undefined)</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MATLAB课程设计(非库函数实现高斯模糊,边缘检测,傅里叶等操作-基础)</title>
    <link href="/2022/04/28/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/MATLAB%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E9%9D%9E%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A,%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B,%E5%82%85%E9%87%8C%E5%8F%B6%E7%AD%89%E6%93%8D%E4%BD%9C-%E5%9F%BA%E7%A1%80)/"/>
    <url>/2022/04/28/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/MATLAB%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1(%E9%9D%9E%E5%BA%93%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A,%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B,%E5%82%85%E9%87%8C%E5%8F%B6%E7%AD%89%E6%93%8D%E4%BD%9C-%E5%9F%BA%E7%A1%80)/</url>
    
    <content type="html"><![CDATA[<h4 id="基本界面"><a href="#基本界面" class="headerlink" title="基本界面"></a>基本界面</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/ed9bed8921775682304223c807c6bb1.png"></p><h3 id="基本功能-具体可以下载测试看看"><a href="#基本功能-具体可以下载测试看看" class="headerlink" title="基本功能(具体可以下载测试看看~)"></a>基本功能(具体可以下载测试看看~)</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/f8ee071509c09e87ca8c2fe64163c11.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/a1b65841927c8db94902f5a4449515d.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/f5a13ba6ff0a1a7b658b24098e779ef.png"></p><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://github.com/superBiuBiuMan/matlab_project">matlab课程设计</a></p>]]></content>
    
    
    <categories>
      
      <category>MATLAB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MATLAB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-请求头和响应头有必要了解</title>
    <link href="/2022/04/28/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8828%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/28/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8828%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><pre><code class="hljs"><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">以下哪一项不属于浏览器Response Headers字段：<br><span class="hljs-symbol">A:</span> Referer<br><span class="hljs-symbol">B:</span> Connection<br><span class="hljs-symbol">C:</span> Content-Type<br><span class="hljs-symbol">D:</span> Server<br></code></pre></td></tr></table></figure></code></pre><ul><li><p>答案 A</p><ul><li>A: 请求头 ,用于告诉服务器请求来自哪里</li><li>B: 请求头 ,用于维护客户端和服务端的连接关系</li><li>C: 请求头 POST可用,响应头也可以使用</li><li>D: 响应头 web服务器软件名称</li></ul></li><li><p>解析</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">常见的请求头</span>   <span class="hljs-string">客户端</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">服务端[request]</span>  <br>    <span class="hljs-attr">Accept:</span> <span class="hljs-string">*/*(客户端能接收的资源类型)</span><br>    <span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">en-us(客户端接收的语言类型)</span><br>    <span class="hljs-attr">Connection:</span> <span class="hljs-string">Keep-Alive(维护客户端和服务端的连接关系)</span><br>    <span class="hljs-attr">Host:</span> <span class="hljs-string">localhost:8080(连接的目标主机和端口号)</span><br>    <span class="hljs-attr">Referer:</span> <span class="hljs-string">http://localhost/links.asp(告诉服务器我来自于哪里)</span><br>    <span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/4.0(客户端版本号的名字)</span><br>    <span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate(客户端能接收的压缩数据的类型)</span><br>    <span class="hljs-attr">If-Modified-Since:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">11</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2000 18:23:51 </span><span class="hljs-string">GMT(缓存时间)</span> <br>    <span class="hljs-attr">Cookie:</span> <span class="hljs-string">(客户端暂存服务端的信息)</span><br>    <span class="hljs-attr">Date:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">11</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2000 18:23:51 </span><span class="hljs-string">GMT(客户端请求服务端的时间)</span><br>    <span class="hljs-attr">Content-Type:</span> <span class="hljs-string">请求的与实体对应的MIME信息。(POST方式的请求头携带)</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">常见的响应头</span>   <span class="hljs-string">服务端[response]</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">客户端</span>  <br><span class="hljs-attr">Location:</span> <span class="hljs-string">http://www.baidu.com(服务端需要客户端访问的页面路径)</span> <br>    <span class="hljs-attr">Server:</span> <span class="hljs-string">apache</span> <span class="hljs-string">tomcat(服务端的Web服务端名)</span><br>    <span class="hljs-attr">Content-Encoding:</span> <span class="hljs-string">gzip(服务端能够发送压缩编码类型)</span> <br>    <span class="hljs-attr">Content-Length:</span> <span class="hljs-number">80</span><span class="hljs-string">(服务端发送的压缩数据的长度)</span> <br>    <span class="hljs-attr">Content-Language:</span> <span class="hljs-string">zh-cn(服务端发送的语言类型)</span> <br>    <span class="hljs-attr">Content-Type:</span> <span class="hljs-string">text/html;</span> <span class="hljs-string">charset=GB2312(服务端发送的类型及采用的编码方式)</span><br>    <span class="hljs-attr">Last-Modified:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">11</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2000 18:23:51 </span><span class="hljs-string">GMT(服务端对该资源最后修改的时间)</span><br>    <span class="hljs-attr">Refresh:</span> <span class="hljs-number">1</span><span class="hljs-string">;url=http://www.it315.org(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径)</span><br>    <span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">attachment;</span> <span class="hljs-string">filename=aaa.zip(服务端要求客户端以下载文件的方式打开该文件)</span><br>    <span class="hljs-attr">Transfer-Encoding:</span> <span class="hljs-string">chunked(分块传递数据到客户端）</span>  <br>    <span class="hljs-attr">Set-Cookie:</span> <span class="hljs-string">SS=Q0=5Lb_nQ;</span> <span class="hljs-string">path=/search(服务端发送到客户端的暂存数据)</span><br>    <span class="hljs-attr">Expires:</span> <span class="hljs-number">-1</span><span class="hljs-string">//3种(服务端禁止客户端缓存页面数据)</span><br>    <span class="hljs-attr">Cache-Control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-***(服务端禁止客户端缓存页面数据)</span>  <br>    <span class="hljs-attr">Pragma:</span> <span class="hljs-literal">no</span><span class="hljs-string">-***(服务端禁止客户端缓存页面数据)</span>   <br>    <span class="hljs-attr">Connection:</span> <span class="hljs-string">close(1.0)/(1.1)Keep-Alive(维护客户端和服务端的连接关系)</span>  <br>    <span class="hljs-attr">Date:</span> <span class="hljs-string">Tue,</span> <span class="hljs-number">11</span> <span class="hljs-string">Jul</span> <span class="hljs-number">2000 18:23:51 </span><span class="hljs-string">GMT(服务端响应客户端的时间)</span><br></code></pre></td></tr></table></figure><p><a href="http://tools.jb51.net/table/http_header">HTTP响应头和请求头信息对照表</a></p></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl">下面哪种方法可以实现匹配包含给定文本的元素？(<span class="hljs-variable">jQuery</span>知识点)<br><span class="hljs-variable">A</span>: <span class="hljs-function"><span class="hljs-title">text</span>()</span><br><span class="hljs-variable">B</span>: <span class="hljs-function"><span class="hljs-title">contains</span>(<span class="hljs-variable">text</span>)</span><br><span class="hljs-variable">C</span>: <span class="hljs-function"><span class="hljs-title">input</span>()</span><br><span class="hljs-variable">D</span>: <span class="hljs-function"><span class="hljs-title">attr</span>(<span class="hljs-variable">name</span>)</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B</li></ul></li><li><p>解析</p><ul><li><p>A: 用于获取或者设置指定元素的文本内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//示例,这里演示的是获取</span><br>&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;demo-container&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo-box&quot;</span>&gt;</span>内容1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>内容3</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>小弟1<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>小弟2</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">var</span> a = $(<span class="hljs-string">&quot;.demo-container&quot;</span>).<span class="hljs-title function_">text</span>();<span class="hljs-comment">//结果为 内容1 内容2 内容3小弟1小弟2</span></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>B: 选择所有包含指定文本的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取&quot;内容1&quot;的元素</span><br>&lt;div&gt;内容<span class="hljs-number">1</span>&lt;/div&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>内容2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>内容3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-comment">//js代码</span><br>$(<span class="hljs-string">&quot;div:contains(&#x27;内容3&#x27;)&quot;</span>);<span class="hljs-comment">//返回&lt;div&gt;内容3&lt;/div&gt;,当然,是封装成jQuery的DOM元素了,这里为了方便说明而直接说是DOM元素</span><br></code></pre></td></tr></table></figure></li><li><p>C: input() ,其实题目不应该这样子,应该是  <strong>:input</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">选择所有 input, textarea, select 和 button 元素. <br>&lt;form&gt;<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Input Button&quot;</span>/&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span></span><br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span></span><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> /&gt;</span></span><br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Option<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/form&gt;<br>运行$(<span class="hljs-string">&quot;:input&quot;</span>)<br>返回:<br>[ <br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Input Button&quot;</span>/&gt;</span></span>,<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span></span>,<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span></span>,<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> /&gt;</span></span>,<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image&quot;</span> /&gt;</span></span>,<br><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span></span>,<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> /&gt;</span></span>,<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> /&gt;</span></span>,<br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span></span>,<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span>,<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>Option<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span>,<br><br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span>,<br>   <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>,<br>]<br></code></pre></td></tr></table></figure></li><li><p>D:  attr(name) 获取指定属性名称的值</p></li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">下列哪些函数是JavaScript的全局函数？(多选)<br><span class="hljs-symbol">A:</span> encodeURI<br><span class="hljs-symbol">B:</span> parseFloat<br><span class="hljs-symbol">C:</span> setTimeout<br><span class="hljs-symbol">D:</span> eval<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,B,D</li></ul></li><li><p>解析</p><ul><li><p>至于为什么C不是全局函数,MDN Web Docs解释这是一个Web API接口函数</p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220428152328.png" style="zoom:50%;" /></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">JavaScript标准内置对象文档</a></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220428152354.png"></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-数组的splice和map方法</title>
    <link href="/2022/04/27/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8827%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/27/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8827%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl">以下哪些<span class="hljs-variable">Array</span>对象的方法不会更改原有数组？(多选)<br><span class="hljs-variable">A</span>: <span class="hljs-function"><span class="hljs-title">concat</span>()</span><br><span class="hljs-variable">B</span>: <span class="hljs-function"><span class="hljs-title">splice</span>()</span><br><span class="hljs-variable">C</span>: <span class="hljs-function"><span class="hljs-title">map</span>()</span><br><span class="hljs-variable">D</span>: <span class="hljs-function"><span class="hljs-title">sort</span>()</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,C</li></ul></li><li><p>解析</p><ul><li><p>A: 用于连接字符串的操作,返回一个连接后的字符串</p></li><li><p>B: splice用于对数组进行增,删,改,会对原数组进行修改,返回值为增加,删除,修改后的数组(可以理解为修剪后产生的屑)</p></li><li><p>C: map函数遍历数组每一项,并将其返回值作为新值传递给新数组</p><ul><li>比如 [1,2,3].map(item,index,array&#x3D;&gt;{return item * 2 }); &#x2F;&#x2F;返回[2,4,6]</li></ul></li><li><p>D: 对数组进行排序</p><ul><li>array.sort( ( a , b ) &#x3D;&gt; { return a - b } );&#x2F;&#x2F; 升序</li><li>array.sort ( ( a , b ) ) &#x3D;&gt; { return b - a } ;&#x2F;&#x2F; 降序</li></ul></li><li><pre><code class="hljs">会改变数组的方法:                            不会改变数组的方法:push()   filterpop()   concatshift()   sliceunshift()   mapsplice()sort()reverse()forEach()</code></pre></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-注意数组的一些方法</title>
    <link href="/2022/04/26/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8826%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/26/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8826%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">在下列Promise所提供的方法中，用来向成功或者失败的回调函数队列中添加回调函数的是（ ）<br><span class="hljs-symbol">A:</span> done<br><span class="hljs-symbol">B:</span> fail<br><span class="hljs-symbol">C:</span> always <br><span class="hljs-symbol">D:</span> then <br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>D</li></ul></li><li><p>解析</p><ul><li><p>A没有,B也不存在,C为一个扩展(不管有没有成功失败都会调用),D的回调有二个参数,第一个是成功回调,第二个是失败回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&quot;事情解决&quot;</span>);<br>    &#125;);<br>    <span class="hljs-comment">//promise对象.then(成功回调,失败回调);</span><br>    promise1.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是成功回调&quot;</span>, value);<br>    &#125;, <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是失败回调&quot;</span>, value);<br>    &#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>至于C选项,是一个扩展,可以安装npm &#96;&#96;install<code> </code>es6-promise-always –save</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//always(data, error) data: resolve的数据。 error: reject的数据。</span><br>require(<span class="hljs-string">&quot;es6-promise-always&quot;</span>)<br><br>axios.get(<span class="hljs-string">&quot;/&quot;</span>).then(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><br> <span class="hljs-comment">//处理逻辑</span><br><br>&#125;).always(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><br> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;请求结束&quot;</span>)<br><br> hideLoading();<br><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Promise杂烩示例</span><br>axios(<span class="hljs-string">&quot;www.baidu.com&quot;</span>).then(function(data) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-number">50</span>&gt;<span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-keyword">return</span> data.json();<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&quot;出错了!&quot;</span>);<br>  &#125;)<br>  .then(function(data) &#123; console.log(<span class="hljs-string">&quot;我要处理返回的数据&quot;</span>) &#125;)<br>  .<span class="hljs-keyword">catch</span>(function(error) &#123; console.log(<span class="hljs-string">&quot;失败原因&quot;</span>,error); &#125;)<br>  .<span class="hljs-keyword">finally</span>(function() &#123; console.log(<span class="hljs-string">&quot;不管怎么样我都要执行&quot;</span>) &#125;);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下符合 <span class="hljs-title class_">ES6</span> 写法的有<br><span class="hljs-attr">A</span>:  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span><br>    &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);&#125;<br>    &#125;<br>    <span class="hljs-title class_">Foo</span>()<br><span class="hljs-attr">B</span>: <span class="hljs-keyword">var</span> m=<span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">export</span> m;<br><span class="hljs-attr">C</span>: <span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName=’<span class="hljs-title class_">Michael</span>’;<br><span class="hljs-attr">D</span>: 在A模块中<span class="hljs-keyword">export</span>&#123;readFile&#125;后，在B模块中<span class="hljs-keyword">import</span> readFile <span class="hljs-keyword">from</span> ‘A’可以获取到readFile<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C</li></ul></li><li><p>解析</p><ul><li><p>A: Fun() 把 class 当成方法来用？ var fun &#x3D; new Func() 这样用就对了</p></li><li><p>B :暴露方式不对</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1. 分别暴露 <span class="hljs-built_in">export</span> let <span class="hljs-attribute">length</span>=<span class="hljs-string">&quot;100&quot;</span>;export function <span class="hljs-built_in">add</span>()&#123;console.log(<span class="hljs-string">&quot;干饭&quot;</span>)&#125;<br>引入: <span class="hljs-built_in">export</span> &#123;length,add&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module.js&quot;</span>;<br>2. 统一暴露 <span class="hljs-built_in">export</span> &#123;暴露的数据键值对&#125; 比如:var a = 10; <span class="hljs-built_in">export</span> &#123; a &#125;;<br>引入: <span class="hljs-built_in">export</span> &#123;length,add&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module.js&quot;</span>;<br>3. 默认暴露 <span class="hljs-built_in">export</span><span class="hljs-built_in"> default </span>暴露的数据,比如<span class="hljs-built_in">export</span><span class="hljs-built_in"> default </span>var a = 10;<br>引入:import a <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module.js&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>C: 正确的,分别暴露</p></li><li><p>D: 缺少了 {  }  符号,正确应该为import {readFile} from ‘A’</p></li></ul></li></ul><p>​<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export">export文档</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import">import文档</a></p><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下代码执行后，array 的结果是？<br><span class="hljs-keyword">let</span> array = [,<span class="hljs-number">1</span>,,<span class="hljs-number">2</span>,,<span class="hljs-number">3</span>];<br>array = array.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">i</span>) =&gt;</span> ++i)<br><span class="hljs-attr">A</span>: [,<span class="hljs-number">2</span>,,<span class="hljs-number">3</span>,,<span class="hljs-number">4</span>]<br><span class="hljs-attr">B</span>: [<span class="hljs-title class_">NaN</span>,<span class="hljs-number">2</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-number">3</span>,<span class="hljs-title class_">NaN</span>,<span class="hljs-number">4</span>]<br><span class="hljs-attr">C</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>]<br><span class="hljs-attr">D</span>: [<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>A</li></ul></li><li>解析<ul><li>orEach(), filter(), reduce(), every() 和some()都会跳过空位。</li><li>map()会跳过空位，但会保留这个值。</li><li>join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。</li><li>ES6 中都会将空位当做undefined</li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下哪些方法会返回一个数组？(多选)<br><span class="hljs-attr">A</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>()<br><span class="hljs-attr">B</span>: <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">split</span>()<br><span class="hljs-attr">C</span>: <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">join</span>()<br><span class="hljs-attr">D</span>: <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>()<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,B</li></ul></li><li><p>解析</p><ul><li>A: Object.keys()返回对象的key值所组成的数组(key要为可枚举)</li><li>B: String.prototype.split()分割字符串,返回分割后的数组</li><li>C: Array.prototype.join()方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</li><li>D:   Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；<br>如果参数中 promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> obj = &#123;<br>        <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;李白&quot;</span>,<br>        <span class="hljs-attr">age</span>:<span class="hljs-number">1000</span>,<br>    &#125;;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj,<span class="hljs-string">&quot;sex&quot;</span>,&#123;<br>        <span class="hljs-attr">value</span>:<span class="hljs-string">&quot;男&quot;</span>,<br>        <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">false</span><br>    &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj);<span class="hljs-comment">//&#123;name: &#x27;李白&#x27;, age: 1000, sex: &#x27;男&#x27;&#125;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj));<span class="hljs-comment">//[&#x27;name&#x27;, &#x27;age&#x27;]</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目练习当中用到的函数但是不熟悉(持续更新)</title>
    <link href="/2022/04/25/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E5%BD%93%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0%E4%BD%86%E6%98%AF%E4%B8%8D%E7%86%9F%E6%82%89/"/>
    <url>/2022/04/25/%E5%89%8D%E7%AB%AF/%E9%A1%B9%E7%9B%AE%E5%BD%93%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0%E4%BD%86%E6%98%AF%E4%B8%8D%E7%86%9F%E6%82%89/</url>
    
    <content type="html"><![CDATA[<h4 id="ArrayObject-reduce-callback"><a href="#ArrayObject-reduce-callback" class="headerlink" title="ArrayObject.reduce(callback)"></a>ArrayObject.reduce(callback)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 求和<br>【参数】: callback参数<br><span class="hljs-number">1.</span> <span class="hljs-title function_">total</span>(若为赋值,则默认为<span class="hljs-number">0</span>)<br><span class="hljs-number">2.</span> currentItem<br><span class="hljs-number">3.</span> currentIndex<br><span class="hljs-number">4.</span> <span class="hljs-title function_">arr</span>(数组所属数组对象)<br>【返回值】:根据callback的返回值决定total的值<br>【示例】: <br><span class="hljs-keyword">var</span> sum = result.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">prev, cur</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(prev)    <span class="hljs-comment">// 0</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cur)       <span class="hljs-comment">// &#123;name:&#x27;小明&#x27;,score:88&#125;</span><br>    <span class="hljs-keyword">return</span> cur.<span class="hljs-property">score</span> + prev;<br>&#125;, <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;总数是&#x27;</span> + sum)<br></code></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 删除对象的某一个属性<br>【参数】: 无<br>【返回值】: 删除成功返回<span class="hljs-literal">true</span>,否则返回<span class="hljs-title function_">false</span>(如果是删除对象不存在的某一个属性,那么返回为<span class="hljs-literal">true</span>)<br>【示例】: <br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Employee</span> = &#123;<br>  <span class="hljs-attr">firstname</span>: <span class="hljs-string">&#x27;李&#x27;</span>,<br>  <span class="hljs-attr">lastname</span>: <span class="hljs-string">&#x27;白&#x27;</span><br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Employee</span>.<span class="hljs-property">firstname</span>);<br><span class="hljs-comment">// 输出结果:  &quot;李&quot;</span><br><br><span class="hljs-keyword">delete</span> <span class="hljs-title class_">Employee</span>.<span class="hljs-property">firstname</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Employee</span>.<span class="hljs-property">firstname</span>);<br><span class="hljs-comment">// 输出结果:  undefined</span><br><br></code></pre></td></tr></table></figure><h4 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a>debugger</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 调用任何可用的调试功能，例如设置断点。 如果没有调试功能可用，则此语句不起作用。<br>【参数】: 无<br>【返回值】: 无<br>【示例】:<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">potentiallyBuggyCode</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">debugger</span>;<span class="hljs-comment">//浏览器在这里暂停，可用于调试</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 检查传入过来的obj是否是一个数组（注意，伪数组不是数组！）<br>【参数】: obj，要检查的对象或其他<br>【返回值】: 为数组返回<span class="hljs-literal">true</span>，否则返回<span class="hljs-literal">false</span><br>【示例】:<br><span class="hljs-keyword">var</span> fruits = [<span class="hljs-string">&quot;Banana&quot;</span>, <span class="hljs-string">&quot;Orange&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;Mango&quot;</span>];<br><span class="hljs-keyword">var</span> isArray1 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(fruits);<span class="hljs-comment">//返回true</span><br><span class="hljs-keyword">var</span> isArray2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&quot;demo1&quot;</span>);<span class="hljs-comment">//伪数组，返回false</span><br></code></pre></td></tr></table></figure><h4 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: obj instanceOf <span class="hljs-title class_">Constructor</span><br>【功能】: 检测某一个对象是否是某一构造函数的实例化对象（实际上官方解释是判断这一个对象的原型链是否出现在这个构造函数的prototype上）<br>【参数】: 如上<br>【返回值】: <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br>【示例】: <br><span class="hljs-comment">//创建一个猫的构造函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cat</span>(<span class="hljs-params">name,sex</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sex</span> = sex;<br>&#125;<br><span class="hljs-keyword">const</span> pet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;小白&#x27;</span>, <span class="hljs-string">&#x27;公&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pet <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Cat</span>);<br><span class="hljs-comment">// 输出结果:  true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pet <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>);<br><span class="hljs-comment">// 输出结果:  true</span><br></code></pre></td></tr></table></figure><p class="note note-info">原型链图（instanceOf根据原型链判断的）</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/instanceOf%E5%8E%9F%E7%90%86.jpg"></p><h4 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 用来判断一个数组是否包含一个指定的值(可以用于判断数组是否存在<span class="hljs-title class_">NaN</span>)<br>【参数】: 要判断的是否存在的值<br>【返回值】: 包含则返回<span class="hljs-literal">true</span>,否则返回<span class="hljs-literal">false</span><br>【示例】: <br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-title class_">NaN</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array1.<span class="hljs-title function_">includes</span>(<span class="hljs-number">2</span>));<br><span class="hljs-comment">// 输出: true</span><br><br><span class="hljs-keyword">const</span> pets = [<span class="hljs-string">&#x27;cat&#x27;</span>, <span class="hljs-string">&#x27;dog&#x27;</span>, <span class="hljs-string">&#x27;bat&#x27;</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pets.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;cat&#x27;</span>));<br><span class="hljs-comment">// 输出: true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pets.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;at&#x27;</span>));<br><span class="hljs-comment">// 输出: false</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pets.<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>));<br><span class="hljs-comment">// 输出: true</span><br></code></pre></td></tr></table></figure><h4 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">indexOf</span>(要查找的字符)<br>【功能】: <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">indexOf</span>()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-<span class="hljs-number">1</span>。(不管是否存在<span class="hljs-title class_">NaN</span>,均返回-<span class="hljs-number">1</span>)<br>【参数】: 要查找的值<br>【返回值】: 查找到返回给定元素的第一个索引,不存在返回-<span class="hljs-number">1</span><br>【示例】: <br><span class="hljs-keyword">const</span> beasts = [<span class="hljs-string">&#x27;ant&#x27;</span>, <span class="hljs-string">&#x27;bison&#x27;</span>, <span class="hljs-string">&#x27;camel&#x27;</span>, <span class="hljs-string">&#x27;duck&#x27;</span>, <span class="hljs-string">&#x27;bison&#x27;</span>,<span class="hljs-title class_">NaN</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(beasts.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;bison&#x27;</span>));<br><span class="hljs-comment">// 输出: 1</span><br><br><span class="hljs-comment">// 设置开始查找索引为2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(beasts.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;bison&#x27;</span>, <span class="hljs-number">2</span>));<br><span class="hljs-comment">// 输出: 4</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(beasts.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;giraffe&#x27;</span>));<br><span class="hljs-comment">// 输出: -1</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(beasts.<span class="hljs-title function_">indexOf</span>(<span class="hljs-title class_">NaN</span>));<br><span class="hljs-comment">// 输出: -1</span><br></code></pre></td></tr></table></figure><h4 id="escape-str-，unescape-str-均废弃"><a href="#escape-str-，unescape-str-均废弃" class="headerlink" title="escape(str)，unescape(str)   (均废弃)"></a>escape(str)，unescape(str)   (均废弃)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">【功能】: <br>escape(): (全局对象属性)方法生成新的由十六进制转义序列替换的字符串,特色字符如 @*_+-./ 这<span class="hljs-number">7</span>个将被排除在外。<br>unescape(): 方法计算生成一个新的字符串，其中的十六进制转义序列将被其表示的字符替换。<br>【参数】: <br>escape(str): str =&gt; 待编码的字符串<br>unescape(str): str =&gt; 待编码的字符串<br>【返回值】: <br><br>【示例】: <br><span class="hljs-comment">/*  escape  */</span><br>escape(<span class="hljs-string">&quot;abc123&quot;</span>);     <span class="hljs-comment">// &quot;abc123&quot;</span><br>escape(<span class="hljs-string">&quot;äöü&quot;</span>);        <span class="hljs-comment">// &quot;%E4%F6%FC&quot;</span><br><span class="hljs-comment">// 排除字符</span><br>escape(<span class="hljs-string">&quot;@*_+-./&quot;</span>);    <span class="hljs-comment">// &quot;@*_+-./&quot;</span><br></code></pre></td></tr></table></figure><h4 id="encodeURI"><a href="#encodeURI" class="headerlink" title="encodeURI()"></a>encodeURI()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: <span class="hljs-built_in">encodeURI</span>(要编码的字符串)<br>【功能】: 传入的字符串作为 <span class="hljs-variable constant_">URI</span> 进行编码。<br>【参数】: 传入要编码的字符串<br>【返回值】: 返回编码后的字符串<br>【注意】: 对以下在 <span class="hljs-variable constant_">URI</span> 中具有特殊含义的 <span class="hljs-variable constant_">ASCII</span> 标点符号，<span class="hljs-built_in">encodeURI</span>() 函数是不会进行转义的   ， / ? : @ &amp; = + $ # <br>【示例】: <br><span class="hljs-built_in">encodeURI</span>(<span class="hljs-string">&quot;http://www.baidu.com?name=libai&amp;sex=男&quot;</span>);<br><span class="hljs-comment">//返回&#x27;http://www.baidu.com?name=libai&amp;sex=%E7%94%B7&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="decodeURI"><a href="#decodeURI" class="headerlink" title="decodeURI()"></a>decodeURI()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: <span class="hljs-built_in">decodeURI</span>(要解码的字符串)<br>【功能】: 传入的字符串作为 <span class="hljs-variable constant_">URI</span> 进行解码。<br>【参数】: 传入要解码的字符串<br>【返回值】: 返回解码后的字符串<br>【示例】: <br><span class="hljs-built_in">decodeURI</span>(<span class="hljs-string">&#x27;http://www.baidu.com?name=libai&amp;sex=%E7%94%B7&#x27;</span>);<br><span class="hljs-comment">//返回&#x27;http://www.baidu.com?name=libai&amp;sex=男&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="encodeURIComponent"><a href="#encodeURIComponent" class="headerlink" title="encodeURIComponent()"></a>encodeURIComponent()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: <span class="hljs-built_in">encodeURIComponent</span>(要编码的字符串)<br>【功能】: 传入的字符串作为 <span class="hljs-variable constant_">URI</span> 进行编码。<br>【参数】: 传入要编码的字符串<br>【返回值】: 返回编码后的字符串<br>【注意】: 该方法不会对 <span class="hljs-variable constant_">ASCII</span> 字母和数字进行编码，也不会对这些 <span class="hljs-variable constant_">ASCII</span> 标点符号进行编码： - _ . ! ~ * <span class="hljs-string">&#x27; ( ) 。</span><br><span class="hljs-string">【示例】: </span><br><span class="hljs-string">encodeURIComponent(&quot;http://www.baidu.com?name=libai&amp;sex=男&quot;);</span><br><span class="hljs-string">//返回&#x27;</span>http%3A%2F%2Fwww.<span class="hljs-property">baidu</span>.<span class="hljs-property">com</span>%3Fname%3Dlibai%26sex%3D%<span class="hljs-variable constant_">E7</span>%<span class="hljs-number">94</span>%<span class="hljs-variable constant_">B7</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="decodeURIComponent"><a href="#decodeURIComponent" class="headerlink" title="decodeURIComponent()"></a>decodeURIComponent()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【语法】: <span class="hljs-built_in">decodeURIComponent</span>(要解码的字符串)<br>【功能】: 传入的字符串作为 <span class="hljs-variable constant_">URI</span> 进行解码。<br>【参数】: 传入要解码的字符串<br>【返回值】: 返回解码后的字符串<br>【示例】: <br><span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-string">&quot;http%3A%2F%2Fwww.baidu.com%3Fname%3Dlibai%26sex%3D%E7%94%B7&quot;</span>);<br><span class="hljs-comment">//返回&#x27;http://www.baidu.com?name=libai&amp;sex=男&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="en-x2F-decodeURIComponet和en-x2F-decodeURI区别"><a href="#en-x2F-decodeURIComponet和en-x2F-decodeURI区别" class="headerlink" title="en&#x2F;decodeURIComponet和en&#x2F;decodeURI区别"></a>en&#x2F;decodeURIComponet和en&#x2F;decodeURI区别</h4><p class="note note-info">两者最主要的区别是`encodeURI`不会编译有些`httpURL`中的预留符号，而`encodeURIComponent`会编译，参考下图：</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220428204031.png"></p><h4 id="contextMenus"><a href="#contextMenus" class="headerlink" title="contextMenus"></a>contextMenus</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">【功能】:</span> <span class="hljs-string">创建右键菜单或者自定义右键菜单</span><br><span class="hljs-string">【示例】:</span> <br><span class="hljs-string">略：</span><br></code></pre></td></tr></table></figure><ul><li>示例网站<ul><li>jQuery的插件<a href="https://github.com/swisnl/jQuery-contextMenu"> jQuery-contextMenu</a>可以实现自定义右键菜单</li><li><a href="https://blog.csdn.net/shadow_zed/article/details/104633884">jQuery-contextMenu插件使用(csdn)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Add-ons/WebExtensions/API/menus#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">contextMenus的doc说明</a></li></ul></li></ul><h4 id="onContentMenu"><a href="#onContentMenu" class="headerlink" title="onContentMenu"></a>onContentMenu</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: oncontextmenu 事件在元素中用户右击鼠标时触发并打开上下文菜单。可以实现控制右键菜单显示！<br>【示例】: <br><span class="hljs-comment">//实现禁用浏览器右键菜单</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">oncontextmenu</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//alert(&#x27;请不要点击鼠标右键！&#x27;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值<br><br>【参数】: arr.<span class="hljs-title function_">every</span>(<span class="hljs-title function_">callback</span>(element[, index[, array]])[, thisArg])<br>callback用来测试每个元素的函数，它可以接收三个参数：<br>        element 用于测试的当前值<br>                index 用于测试的当前值的索引<br>                array 调用 every 的当前数组<br>        thisArg 执行 callback 时使用的 <span class="hljs-variable language_">this</span> 值。<br><br>【返回值】: <br>如果回调函数的每一次返回(<span class="hljs-keyword">return</span>)都为 <span class="hljs-literal">true</span> 值，则<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">every</span>()返回值为 <span class="hljs-literal">true</span> ，否则返回值为 <span class="hljs-literal">false</span>。<br><br>【示例】: <br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">39</span>, <span class="hljs-number">29</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>];<br><br><span class="hljs-comment">// result 为 true 代表所有结果都符合要求</span><br><span class="hljs-keyword">let</span> result = array1.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">element</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> element &lt; <span class="hljs-number">40</span>;<br>&#125;);<br><br><br><span class="hljs-keyword">const</span> array2 = [<span class="hljs-number">60</span>,<span class="hljs-number">80</span>,<span class="hljs-number">18</span>];<br><span class="hljs-comment">// result 为 false 代表数组当中有的不符合</span><br><span class="hljs-keyword">let</span> result = array2.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">element</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> element &lt; <span class="hljs-number">40</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 创建一个新数组,包含通过自定义函数测试的所有元素<br><br>【语法】: <br><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-title function_">callback</span>(element[, index[, array]])[, thisArg])<br>【参数】: <br>callback<br>    element 数组中当前正在处理的元素。<br>        index[可选] 正在处理的元素在数组中的索引。<br>array[可选] 调用了 filter 的数组本身。<br>    thisArg 执行 callback 时，用于 <span class="hljs-variable language_">this</span> 的值。<br>【返回值】: <br>不改变原有数组,返回新数组,这个新数组的组成是回调函数返回结果为真的时候的正在处理的元素<br>【注意】: <br>item相当于是常量,只要不改变item的指向,里面的数据可以随意更改(仅限于引用数据类型)<br><span class="hljs-comment">//可以成功</span><br>    <span class="hljs-keyword">var</span> b  = a.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>         <span class="hljs-comment">//成功修改里面的每一个attrName</span><br>         item.<span class="hljs-property">attrName</span>=<span class="hljs-string">&quot;aaaaaa&quot;</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;)<br>    <span class="hljs-comment">//会失败</span><br>    <span class="hljs-keyword">var</span> b  = a.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>         <span class="hljs-comment">//成功修改里面的每一个attrName</span><br>         item = &#123;<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;;<br>         <span class="hljs-comment">//改变item的指向,不会成功</span><br>         <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;)<br>【示例】: <br><span class="hljs-keyword">const</span> words = [<span class="hljs-string">&#x27;spray&#x27;</span>, <span class="hljs-string">&#x27;limit&#x27;</span>, <span class="hljs-string">&#x27;elite&#x27;</span>, <span class="hljs-string">&#x27;exuberant&#x27;</span>, <span class="hljs-string">&#x27;destruction&#x27;</span>, <span class="hljs-string">&#x27;present&#x27;</span>];<br><br><span class="hljs-comment">// 只需要长度大于6的字符串</span><br><br><span class="hljs-keyword">const</span> reulst = words.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>)&#123;<br>    <span class="hljs-comment">// 如果结果大于0,则返回遍历的这个element放在result当中</span><br>    <span class="hljs-comment">// 否则不返回</span><br>    <span class="hljs-keyword">return</span> word.<span class="hljs-property">length</span> &gt; <span class="hljs-number">6</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">// 输出结果: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span><br><br></code></pre></td></tr></table></figure><h4 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: <span class="hljs-title function_">some</span>() 方法测试数组中是不是至少有<span class="hljs-number">1</span>个元素通过了被提供的函数测试。它返回的是一个<span class="hljs-title class_">Boolean</span>类型的值。<br><br>【语法】: <br><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">some</span>(<span class="hljs-title function_">callback</span>(element[, index[, array]])[, thisArg])<br>【参数】: <br>callback<br>    element 数组中当前正在处理的元素。<br>        index[可选] 正在处理的元素在数组中的索引。<br>array[可选] 调用了 some 的数组本身。<br>   thisArg 执行 callback 时使用的 <span class="hljs-variable language_">this</span> 值。<br>【返回值】:<br>如果回调函数的有一次返回(<span class="hljs-keyword">return</span>)都为 <span class="hljs-literal">true</span> 值，则<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">some</span>()返回值为 <span class="hljs-literal">true</span> ，否则返回值为 <span class="hljs-literal">false</span>。<br>不改变原有数组,返回布尔值<br><span class="hljs-string">`如果用一个空数组进行测试，在任何情况下它返回的都是false。`</span><br>【示例】: <br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// 检测是否至少有一个是偶数</span><br><span class="hljs-keyword">let</span> hasEven = array.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>)&#123;<br>    <span class="hljs-keyword">return</span> element%<span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>&#125;)<br><br><span class="hljs-comment">//输出结果为: true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hasEven);<br><br></code></pre></td></tr></table></figure><h4 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: <span class="hljs-title function_">map</span>()方法创建一个新数组,这个新数组由原数组中的每一个元素都调用一次提供的函数后的返回值组成<br><br>【语法】: <br><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">some</span>(<span class="hljs-title function_">callback</span>(element[, index[, array]])[, thisArg])<br>【参数】: <br>callback<br>    element 数组中当前正在处理的元素。<br>        index[可选] 正在处理的元素在数组中的索引。<br>array[可选] map方法调用的数组。<br>   thisArg 执行 callback 时使用的 <span class="hljs-variable language_">this</span> 值。<br>【返回值】: <br>回调函数当中<span class="hljs-keyword">return</span>什么,返回的新数组当中的值就是什么样子的<br>不改变原有数组,返回新数组<br>【示例】: <br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>];<br><br><span class="hljs-keyword">const</span> map1 = array1.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">element</span>)&#123;<br>    <span class="hljs-comment">// 遍历每一个值,每一个值*2再返回</span><br>    <span class="hljs-keyword">return</span> element*<span class="hljs-number">2</span>;<br>&#125;)<br><br><span class="hljs-comment">// 输出结果: Array [2, 8, 18, 32]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map1);<br><br><span class="hljs-keyword">const</span> array1 = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>];<br><br><span class="hljs-comment">//如果每一次循环并不是都有return,那么没有return的item会undefined</span><br><span class="hljs-keyword">const</span> map1 = array1.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">element</span>) &#123;<br>    <span class="hljs-comment">//只对偶数做返回映射处理</span><br>    <span class="hljs-keyword">if</span>(element%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> element * <span class="hljs-number">2</span>;<br>    &#125;<br>    <br>&#125;)<br><span class="hljs-comment">//输出结果: [undefined, 8, undefined, 32]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map1);<br></code></pre></td></tr></table></figure><h4 id="localStorage-getItem"><a href="#localStorage-getItem" class="headerlink" title="localStorage.getItem()"></a>localStorage.getItem()</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">【功能】:</span> <span class="hljs-string">获取localStorage当中存储的指定的key</span><br><span class="hljs-string">【参数】:</span> <span class="hljs-string">localStorage.getItem(要获取的key)</span><br><span class="hljs-string">【返回值】:</span> <span class="hljs-string">获取不到指定的key,返回null</span> <span class="hljs-string">不是返回undefined,获取成功返回存储在localStorage当中的key的值</span><br></code></pre></td></tr></table></figure><h4 id="String-prototype-startsWith"><a href="#String-prototype-startsWith" class="headerlink" title="String.prototype.startsWith()"></a>String.prototype.startsWith()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 用于判断当前字符串是否是给定参数字符串的开头<br><br>【参数】: <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">startsWith</span>(searchString[,position ]) <br>searchString 要搜索的子字符串。<br><span class="hljs-attr">position</span>: 在 str 中搜索 searchString 的开始位置，默认值为 <span class="hljs-number">0</span>。<br>【返回值】: 如果在字符串的开头找到了给定的字符则返回<span class="hljs-literal">true</span>；否则返回<span class="hljs-literal">false</span>。<br><br>【示例】: <br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;To be, or not to be, that is the question.&quot;</span>;<br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;To be&quot;</span>));         <span class="hljs-comment">// true</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;not to be&quot;</span>));     <span class="hljs-comment">// false</span><br><span class="hljs-title function_">alert</span>(str.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&quot;not to be&quot;</span>, <span class="hljs-number">10</span>)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: <span class="hljs-keyword">for</span>...<span class="hljs-keyword">in</span>语句以任意顺序迭代一个对象的除<span class="hljs-title class_">Symbol</span>以外的可枚举属性，包括继承的可枚举属性。(可遍历对象) 并且不应该用于迭代一个关注索引顺序的 <span class="hljs-title class_">Array</span>。<br><br>【语法】: <span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">in</span> object)<br>  statement<br>【参数】: <br>variable 在每次迭代时，variable会被赋值为不同的属性名。<br>object 非<span class="hljs-title class_">Symbol</span>类型的可枚举属性被迭代的对象。<br><br>【示例】: <br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">c</span>:<span class="hljs-number">3</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;obj.&quot;</span> + prop + <span class="hljs-string">&quot; = &quot;</span> + obj[prop]);<br>&#125;<br><br><span class="hljs-comment">// Output:</span><br><span class="hljs-comment">// &quot;obj.a = 1&quot;</span><br><span class="hljs-comment">// &quot;obj.b = 2&quot;</span><br><span class="hljs-comment">// &quot;obj.c = 3&quot;</span><br></code></pre></td></tr></table></figure><h4 id="for-…-of"><a href="#for-…-of" class="headerlink" title="for … of"></a>for … of</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: <span class="hljs-keyword">for</span>...<span class="hljs-keyword">of</span>语句在可迭代对象（包括 <span class="hljs-title class_">Array</span>，<span class="hljs-title class_">Map</span>，<span class="hljs-title class_">Set</span>，<span class="hljs-title class_">String</span>，<span class="hljs-title class_">TypedArray</span>，<span class="hljs-variable language_">arguments</span> 对象等等）上创建一个迭代循环，调用自定义迭代钩子，并为每个不同属性的值执行语句<br><br>【语法】: <span class="hljs-keyword">for</span> (variable <span class="hljs-keyword">in</span> iterable)<br>  statement<br>【参数】: <br>variable 在每次迭代时，variable会被赋值为不同的属性名。<br>iterable 被迭代枚举其属性的对象。<br><br>【示例】: <br><span class="hljs-comment">//迭代Array</span><br><span class="hljs-keyword">let</span> iterable = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> iterable) &#123;<br>    value += <span class="hljs-number">1</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// 11</span><br><span class="hljs-comment">// 21</span><br><span class="hljs-comment">// 31</span><br><br><span class="hljs-comment">//迭代String</span><br><span class="hljs-keyword">let</span> iterable = <span class="hljs-string">&quot;boo&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> iterable) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// &quot;b&quot;</span><br><span class="hljs-comment">// &quot;o&quot;</span><br><span class="hljs-comment">// &quot;o&quot;</span><br></code></pre></td></tr></table></figure><h4 id="in语句"><a href="#in语句" class="headerlink" title="in语句"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in">in语句</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: A <span class="hljs-keyword">in</span> B 用于判断A是否在B的属性上或者是原型链上(官方解释为如果指定的属性在指定的对象或其原型链中，则返回<span class="hljs-literal">true</span>。)<br><br>【语法】: prop <span class="hljs-keyword">in</span> object<br>【参数】: <br><span class="hljs-attr">prop</span>: 一个字符串类型或者 symbol 类型的属性名或者数组索引（非symbol类型将会强制转为字符串）。<br><span class="hljs-attr">objectName</span>: 检查它（或其原型链）是否包含具有指定名称的属性的对象。<br><br>【示例】: <br><span class="hljs-keyword">const</span> car = &#123; <span class="hljs-attr">make</span>: <span class="hljs-string">&#x27;Honda&#x27;</span>, <span class="hljs-attr">model</span>: <span class="hljs-string">&#x27;Accord&#x27;</span>, <span class="hljs-attr">year</span>: <span class="hljs-number">1998</span> &#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;make&#x27;</span> <span class="hljs-keyword">in</span> car);<br><span class="hljs-comment">// 输出:  true</span><br><br><span class="hljs-keyword">delete</span> car.<span class="hljs-property">make</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;make&#x27;</span> <span class="hljs-keyword">in</span> car === <span class="hljs-literal">false</span>) &#123;<br>  car.<span class="hljs-property">make</span> = <span class="hljs-string">&#x27;Suzuki&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(car.<span class="hljs-property">make</span>);<br><span class="hljs-comment">// 输出: &quot;Suzuki&quot;</span><br></code></pre></td></tr></table></figure><h4 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>() 方法用于将所有可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象,会改变target!<br><br>【语法】: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, ...sources)<br>【参数】: <br><span class="hljs-attr">target</span>: 目标对象(也就是其他对象的组合体)<br><span class="hljs-attr">sources</span>: 源对象 (融合素材)<br>【示例】: <br><span class="hljs-keyword">const</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">11</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">22</span> &#125;;<br><span class="hljs-keyword">const</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">33</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">44</span> &#125;;<br><span class="hljs-keyword">const</span> source2 = &#123; <span class="hljs-attr">e</span>: <span class="hljs-number">55</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">66</span> &#125;;<br><span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source1,source2);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target);<br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">// &#123;a: 11, b: 33, c: 44, e: 55, f: 66&#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">// 输出结果</span><br><span class="hljs-comment">// &#123;a: 11, b: 33, c: 44, e: 55, f: 66&#125;</span><br><br><span class="hljs-comment">//相当于将source1,source2,融合到了target</span><br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">具体Object.assign可看</a></p><h4 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h4><ul><li>类型转换的可以看看这个<a href="https://dreamlove.top/2022/05/08/%E5%88%B7%E9%A2%98/2022%E5%B9%B45%E6%9C%8808%E6%97%A5%E5%88%B7%E9%A2%98/">博客</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">【功能】: 准确判断变量的类型<br>因为如果使用<br>        <span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> 会输出 <span class="hljs-string">&#x27;object&#x27;</span><br>顺便复习下其他的~<br>                <span class="hljs-number">1</span>==<span class="hljs-literal">true</span>;<span class="hljs-comment">//true</span><br>                <span class="hljs-string">&quot;&quot;</span>==<span class="hljs-literal">false</span>;<span class="hljs-comment">//true</span><br>                <span class="hljs-literal">false</span>==<span class="hljs-literal">null</span>;<span class="hljs-comment">//false</span><br>                <span class="hljs-literal">null</span>==<span class="hljs-literal">undefined</span>;<span class="hljs-comment">//true</span><br>【语法】: <br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(要判断的变量)<br>【示例】: <br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// &quot;[object Null]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// &quot;[object Undefined]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// &quot;[object String]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">123</span>);<span class="hljs-comment">// &quot;[object Number]&quot;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>);<span class="hljs-comment">// &quot;[object Boolean]&quot;</span><br><span class="hljs-comment">//输出&#x27;[object Function]&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;&#125;;<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(f1);<br></code></pre></td></tr></table></figure><h4 id="array-forEach"><a href="#array-forEach" class="headerlink" title="array.forEach()"></a>array.forEach()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript">是不会返回值的,直接对原数组进行改变<br>【功能】: <span class="hljs-title function_">forEach</span>() 方法对数组的每个元素执行一次给定的函数。<br>【语法】: <br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-title function_">callback</span>(currentValue [, index [, array]])[, thisArg])<br>【返回值】:<br>不会返回值的<br>【参数】: <br>callback 为数组中每个元素执行的函数，该函数接收一至三个参数：<br>currentValue 数组中正在处理的当前元素。<br><span class="hljs-title function_">index</span>(可选) 数组中正在处理的当前元素的索引。<br><span class="hljs-title function_">array</span>(可选) <span class="hljs-title function_">forEach</span>() 方法正在操作的数组。<br>    <span class="hljs-title function_">thisArg</span>(可选) 可选参数。当执行回调函数 callback 时，用作 <span class="hljs-variable language_">this</span> 的值。<br>    <br>【注意】:<br>如果循环参数currentValue传入的是引用数据类型<br>    那么如果在回调函数当中对其进行了修改,那么是会影响到原来的值的<br>【示例】: <br><span class="hljs-keyword">const</span> items = [<span class="hljs-string">&#x27;item1&#x27;</span>, <span class="hljs-string">&#x27;item2&#x27;</span>, <span class="hljs-string">&#x27;item3&#x27;</span>];<br><br><span class="hljs-comment">//输出结果为</span><br><span class="hljs-comment">// item1</span><br><span class="hljs-comment">// item2</span><br><span class="hljs-comment">// item3</span><br>items.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;);<br><br><span class="hljs-comment">//注意事项所说的例子</span><br><span class="hljs-keyword">const</span> tempItem = [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">100</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;动感超人&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">100</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;傻瓜超人&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">100</span>&#125;,<br>];<br>tempItem.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    item.<span class="hljs-property">money</span> = item.<span class="hljs-property">money</span>*<span class="hljs-number">2</span>;<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(tempItem);<br><span class="hljs-comment">//输出结果</span><br> [<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李白&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">200</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;动感超人&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">200</span>&#125;,<br>    &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;傻瓜超人&#x27;</span>,<span class="hljs-attr">money</span>:<span class="hljs-number">200</span>&#125;,<br>];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>javscript</tag>
      
      <tag>ES5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-let的暂时性死锁</title>
    <link href="/2022/04/25/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8825%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/25/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8825%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">以下代码执行后，输出结果为（） <br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>    <span class="hljs-keyword">let</span> x = <span class="hljs-number">20</span>;<br>    x++;<br>&#125;<br><span class="hljs-title function_">foo</span>();<br><span class="hljs-attr">A</span>: 抛出<span class="hljs-title class_">ReferenceError</span><br><span class="hljs-attr">B</span>: <span class="hljs-number">10</span><br><span class="hljs-attr">C</span>: <span class="hljs-number">20</span><br><span class="hljs-attr">D</span>: <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A</li></ul></li><li><p>解析</p><ul><li><p>需要知道的知识点</p><ul><li>let变量的没有变量提升的</li><li>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。**(暂时性死区)**</li><li>上面这句话说通俗点: 就是只要let所在定义域下(也就是在函数当中的 <code>&#123; &#125;</code> 当中),<strong>在let代码没有执行之前</strong>,如果这个时候有一段代码对let声明的变量名称<strong>进行了访问并且代码执行了</strong>(  比如console.log() ) ,那么就会发生报错!</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//注意下面这种情况</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<span class="hljs-comment">//输出x=10;</span><br>    x++;<br>&#125;<br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-title function_">foo</span>();<br><span class="hljs-comment">//结合上面说所的,分析下过程</span><br><span class="hljs-comment">//就是只要let所在定义域下(也就是在函数当中的 `&#123; &#125;` 当中)</span><br><span class="hljs-comment">//在let代码没有执行之前</span><br><span class="hljs-comment">//如果这个时候有一段代码对let声明的变量名称进行了访问</span><br><span class="hljs-comment">//(  比如console.log() ) ,那么就会发生报错!</span><br><br><span class="hljs-comment">//拆解 执行过程</span><br><span class="hljs-comment">//第一步</span><br><span class="hljs-keyword">let</span> foo = &#123;...&#125;;<span class="hljs-comment">//此时函数并没有执行,所以不存在对let变量进行访问并执行,所以不报错</span><br><span class="hljs-comment">//第二步</span><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-comment">//第三步</span><br><span class="hljs-title function_">foo</span>();<br><br></code></pre></td></tr></table></figure></li><li><p><a href="https://es6.ruanyifeng.com/#docs/let">具体let知识(这里解释的更完整)</a></p></li></ul></li></ul><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><p><strong>es6中的class和let const一样都不存在提升</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在位置A打印变量a与在位置B打印变量a各会有怎样的输出？</span><br>原来的代码 <br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//console.log(a) 位置A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;&#125;<br>   <span class="hljs-comment">// console.log(a) 位置B</span><br>&#125;<br><span class="hljs-title function_">test</span>();<br><br>实际上提升后的<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) 位置A <span class="hljs-comment">//在test()作用域内找得到a</span><br><span class="hljs-comment">//是一个class但是存在TDZ暂时性死区，访问报错</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;&#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) 位置B <span class="hljs-comment">//a已经声明创建出来了</span><br>&#125;<br><span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">下列表达式中，返回值为<span class="hljs-literal">true</span>的是（）多选<br>①<span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-literal">NaN</span>,<span class="hljs-literal">NaN</span>)<br><br>②<span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(+<span class="hljs-number">0</span>,<span class="hljs-number">-0</span>)<br><br>③<span class="hljs-literal">NaN</span> === <span class="hljs-literal">NaN</span><br><br>④+<span class="hljs-number">0</span> === <span class="hljs-number">-0</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>①④</li></ul></li><li>解析<ul><li>NaN和谁比较运算(+ - * &#x2F; &#x3D;&#x3D; ,&#x3D;&#x3D;&#x3D;&#x3D;)都是false</li><li>indexOf无法识别数组的NaN成员也就是[NaN].indexOf(NaN)输出结果为-1(代表未找到),所以想要找到数组当中NaN就可以使用includes,[1,2,NaN].includes(NaN)返回为true</li><li>Object.is()方法认为NaN等于NaN (没得说,记!)<ul><li>Object.is(NaN, NaN) &#x2F;&#x2F; true</li><li>Object.is(+0, -0) &#x2F;&#x2F; false</li><li>+0&#x3D;&#x3D;&#x3D;-0的返回结果为true</li></ul></li></ul></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">以下哪些事件支持冒泡？(多选)<br><span class="hljs-symbol">A:</span> mouseenter<br><span class="hljs-symbol">B:</span> scroll<br><span class="hljs-symbol">C:</span> focus<br><span class="hljs-symbol">D:</span> keypress<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>B D</li></ul></li><li><p>解析</p><ul><li><p>看图就好~</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E5%8F%AF%E4%BB%A5%E5%86%92%E6%B3%A1%E5%92%8C%E4%B8%8D%E5%8F%AF%E4%BB%A5%E5%86%92%E6%B3%A1%E7%9A%84.png"></p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-注意let</title>
    <link href="/2022/04/24/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8824%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/24/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8824%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">下列不属于document对象方法的是？(多选)<br><span class="hljs-symbol">A:</span> onload<br><span class="hljs-symbol">B:</span> querySelectorAll<br><span class="hljs-symbol">C:</span> children<br><span class="hljs-symbol">D:</span> ajax<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,C,D</li></ul></li><li><p>解析</p><ul><li><p>A: onload <strong>属性</strong>是一个事件处理程序用于处理Window, XMLHttpRequest, &lt;img&gt; 等元素的加载事件，当资源已加载时被触发。</p><p>比如window.onload &#x3D; function ( ) { }</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onload">可以参考</a></p></li><li><p>B: document.querySelectorAll(“选择器”)</p></li><li><p>C: parentNode.children  是属性,用于DOM节点查询子元素</p><ul><li>childNodes 属性返回所有的节点，包括文本节点、注释节点</li><li>children 属性只返回元素节点</li></ul></li><li><p>D: AJAX不是JavaScript的规范，它只是一个缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。在现代浏览器中主要依靠 XmlHttpRequest 对象</p></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//请问以下JS代码的输出是什么？</span><br><span class="hljs-keyword">let</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> B = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">let</span> C = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">d</span> = <span class="hljs-number">4</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">a</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">b</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(C.<span class="hljs-property">c</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(C.<span class="hljs-property">d</span>);<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>1    undefined   3   4</li></ul></li><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> A = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>; <br><span class="hljs-comment">//此时 A.prototype = &#123; a: 1 &#125;</span><br><br><br><span class="hljs-keyword">let</span> B = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <span class="hljs-comment">//此时 B = &#123;&#125;</span><br><span class="hljs-comment">//在创建B时，已将B._proto_ = A.prototype = &#123; a: 1 &#125;</span><br><span class="hljs-comment">//即使后面A.prototype重新赋值，将A.prototype开辟了新的空间指向别的对象</span><br><span class="hljs-comment">//B._proto_并没有改，还是指向&#123;a:1&#125;这个对象</span><br><br><br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123; <span class="hljs-comment">//此时 A.prototype = &#123; b: 2, c: 3 &#125;</span><br>  <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">c</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-keyword">let</span> C = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>(); <span class="hljs-comment">//C = &#123;&#125;</span><br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">d</span> = <span class="hljs-number">4</span>;<span class="hljs-comment">//此时A.prototype = &#123; b: 2, c: 3, d: 4 &#125;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">a</span>); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B.<span class="hljs-property">b</span>); <span class="hljs-comment">//undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(C.<span class="hljs-property">c</span>); <span class="hljs-comment">//3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(C.<span class="hljs-property">d</span>); <span class="hljs-comment">//4</span><br><br><span class="hljs-comment">//C.d</span><br><span class="hljs-comment">//着重区分： A.prototype.d = 4 和 A.prototype 重新赋值 不是一个概念 </span><br><span class="hljs-comment">//A.prototype重新赋值时，A.prototype已经指向另一个对象了   </span><br><span class="hljs-comment">//A.prototype.d = 4时，访问的还是同一个A.prototype 对象 </span><br><br></code></pre></td></tr></table></figure></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//执行以下代码，下列选项中，说法正确的是（）</span><br><span class="hljs-keyword">function</span> * <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-attr">A</span>: <span class="hljs-title function_">gen</span>()执行后返回<span class="hljs-number">2</span><br><span class="hljs-attr">B</span>: <span class="hljs-title function_">gen</span>()执行后返回<span class="hljs-literal">undefined</span><br><span class="hljs-attr">C</span>: <span class="hljs-title function_">gen</span>()执行后返回一个<span class="hljs-title class_">Generator</span>对象<br><span class="hljs-attr">D</span>: <span class="hljs-title function_">gen</span>()执行后返回<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>C</li></ul></li><li>解析<ul><li>在函数声明时，由于带有星号，所以gen函数是一个生成器函数，调用生成器函数会返回生成器（Generator）对象，C选项正确。</li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">在 es6 中，下面程序运行结果输出，选项结果正确的是<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">12</span>;i++)&#123;&#125; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><span class="hljs-keyword">const</span> a = <span class="hljs-number">12</span>;a=<span class="hljs-number">13</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">const</span> g = &#123;<span class="hljs-attr">b</span>:<span class="hljs-number">3</span>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-property">b</span>);<br>g.<span class="hljs-property">b</span>=<span class="hljs-number">12</span>;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(g.<span class="hljs-property">b</span>);<br><span class="hljs-keyword">let</span> [head,...tail] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>conole.<span class="hljs-title function_">log</span>(tail);<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>i not defined,TypeError,3,12,[2,3,4]</li></ul></li><li><p>解析</p><ul><li>let 与var不同，存在块级作用域，在for循环中声明，循环之外销毁 所以 i not defined (for当中也是一个块级作用域,没想到)</li><li>const 声明一个常量无法更改，所以TypeError(这里是分号,不是逗号!!),但是const声明一个对象是可以改对象里面的属性的</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我来图书馆小程序加密后抓包分析反编译抢位置</title>
    <link href="/2022/04/23/NodeJs/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A0%E5%AF%86%E5%90%8E%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%A2%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/04/23/NodeJs/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A0%E5%AF%86%E5%90%8E%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90%E5%8F%8D%E7%BC%96%E8%AF%91%E6%8A%A2%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="提交预约流程"><a href="#提交预约流程" class="headerlink" title="提交预约流程"></a>提交预约流程</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093101.png"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>抓包分析好像还涉及到wxlib&#x2F;wx&#x2F;login 不过从后面提交数据来看好像用不到,可能我技术问题吧</li></ol><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><h4 id="有人可能最新微信PC抓不了小程序包"><a href="#有人可能最新微信PC抓不了小程序包" class="headerlink" title="有人可能最新微信PC抓不了小程序包"></a>有人可能最新微信PC抓不了小程序包</h4><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><ol><li><p>打开一个任意小程序，打开任务管理器，找到进程。右键打开文件位置。</p></li><li><p>退出电脑微信，右键结束小程序进程。</p></li><li><p>找到这个目录后删除这个目录<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093447.png"></p></li><li><p>或者你有everything这个工具,直接搜索 WMPFRuntime 然后右键打开所在文件夹,把里面这个4376目录删除就可以</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093433.png"></p><h4 id="2-0新变化"><a href="#2-0新变化" class="headerlink" title="2.0新变化"></a>2.0新变化</h4><ul><li>位置预约的一些信息加密了</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423170137.png"></p><h3 id="预约信息加密解决"><a href="#预约信息加密解决" class="headerlink" title="预约信息加密解决"></a>预约信息加密解决</h3><h4 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h4><p><a href="https://github.com/Cherrison/CrackMinApp">微信小程序反编译</a></p><p>这次小程序反编译出来的文件</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423171817.png"></p><h4 id="反编译后查看源代码"><a href="#反编译后查看源代码" class="headerlink" title="反编译后查看源代码"></a>反编译后查看源代码</h4><ul><li><p>预约位置关键代码</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423170658.png"></p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">RSA加密的,跟着他代码来就可以<br></code></pre></td></tr></table></figure><ul><li><p><strong>找啊找,发现找到了,在app.js当中是rsa.modules和exponent加密代码</strong></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423170856.png"></p></li><li><p>找啊找,找到了小程序图书馆调用的函数工具库</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423171000.png"></p></li><li><p>接下来就简答了,模拟导入就可以了</p></li></ul><h3 id="计算生成预约js-nodejs下运行-代码"><a href="#计算生成预约js-nodejs下运行-代码" class="headerlink" title="计算生成预约js(nodejs下运行)代码"></a>计算生成预约js(nodejs下运行)代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ttt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./security.js&quot;</span>);<br><span class="hljs-keyword">var</span> modulus = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//拆包一下就知道</span><br><span class="hljs-keyword">var</span> exponent = <span class="hljs-string">&quot;010001&quot;</span>;<br><span class="hljs-keyword">var</span> iii = ttt.<span class="hljs-title function_">getKeyPair</span>(exponent, <span class="hljs-string">&quot;&quot;</span>, modulus);<br><span class="hljs-comment">// time_end时间截止</span><br><span class="hljs-comment">//时间段,1代表8:00-12:00时间段</span><br><span class="hljs-comment">//时间段,2代表12:00-17:00时间段</span><br><span class="hljs-comment">//时间段,3代表17:30-23:00时间段</span><br><span class="hljs-comment">//day_time日期时间 2022-04-10</span><br><span class="hljs-comment">//num 为时间段</span><br><span class="hljs-keyword">var</span> id = <span class="hljs-number">11</span>;<br><span class="hljs-keyword">var</span> vd_id = <span class="hljs-number">8235</span>; <span class="hljs-comment">//区域代码</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>; <span class="hljs-comment">//是预约时间段1 2 3</span><br><span class="hljs-keyword">var</span> day_time = <span class="hljs-string">&quot;2022-04-23&quot;</span>; <span class="hljs-comment">//预约日期</span><br><span class="hljs-keyword">var</span> time_end = <span class="hljs-string">&quot;23:00&quot;</span>; <span class="hljs-comment">//截止时间段</span><br><span class="hljs-comment">// var r = a.data.selectSeat.id + &quot;,&quot; + a.data.selectSeat.vd_id + &quot;,&quot; + a.data.urlOptions.num + &quot;,&quot; + a.data.urlOptions.day_time + &quot;, &quot; + a.data.urlOptions.time_end</span><br><span class="hljs-keyword">var</span> rsa_data = id + <span class="hljs-string">&quot;,&quot;</span> + vd_id + <span class="hljs-string">&quot;,&quot;</span> + num + <span class="hljs-string">&quot;,&quot;</span> + day_time + <span class="hljs-string">&quot;, &quot;</span> + time_end;<br><br><span class="hljs-comment">//预约位置的时候的加密算法</span><br><span class="hljs-keyword">var</span> rsa_result = ttt.<span class="hljs-title function_">encryptedString</span>(iii, rsa_data);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;预约加密代码&quot;</span>,rsa_result);<span class="hljs-comment">//也就是获取info部分</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">接下来就简答了如果有了这个预约加密代码<br></code></pre></td></tr></table></figure><h3 id="提交预约代码"><a href="#提交预约代码" class="headerlink" title="提交预约代码"></a>提交预约代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> userSeatInfoOption=&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;https://wxcourse.jxufe.cn/wxlib/wx/appoint&quot;</span>,<br>    <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-string">&#x27;isPeriod&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;userId&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-comment">//依旧是抓包获取</span><br>        <span class="hljs-string">&#x27;appointType&#x27;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;officeCode&#x27;</span>: <span class="hljs-string">&quot;jxcjdx&quot;</span>,<br>        <span class="hljs-string">&#x27;colleageId&#x27;</span>: <span class="hljs-number">51</span>,<br>        <span class="hljs-comment">//添加加密后的字段</span><br>        <span class="hljs-string">&#x27;info&#x27;</span>:<span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>预约加密代码</li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423171533.png"></p><ul><li><p>预约成功</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423171737.png"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ProcessOn的官网(less+jquery实现三端)</title>
    <link href="/2022/04/23/%E5%89%8D%E7%AB%AF/ProcessOn/"/>
    <url>/2022/04/23/%E5%89%8D%E7%AB%AF/ProcessOn/</url>
    
    <content type="html"><![CDATA[<h3 id="ProcessOn的官网-less-jquery实现三端"><a href="#ProcessOn的官网-less-jquery实现三端" class="headerlink" title="ProcessOn的官网(less+jquery实现三端)"></a>ProcessOn的官网(less+jquery实现三端)</h3><ul><li>很基础的一个网站,没有什么特别的技术(懒加载也没有)</li><li>手机端,苹果端,PC端都通用,具体可以试试</li><li>不过有些小bug,那个图片滚动的,可能有些bug</li></ul><h3 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h3><h4 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h4><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/主页.png"/><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/主页1.png" /><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/主页3.png" /><h4 id="手机端-浏览器测试"><a href="#手机端-浏览器测试" class="headerlink" title="手机端(浏览器测试)"></a>手机端(浏览器测试)</h4><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423144437.png" /><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423144500.png" /><h4 id="平板端-浏览器测试"><a href="#平板端-浏览器测试" class="headerlink" title="平板端(浏览器测试)"></a>平板端(浏览器测试)</h4><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423144535.png" /><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220423144555.png" /><h3 id="头部渐变效果-“免费扩容”这几个字"><a href="#头部渐变效果-“免费扩容”这几个字" class="headerlink" title="头部渐变效果(“免费扩容”这几个字)"></a>头部渐变效果(“免费扩容”这几个字)</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/slow.gif"></p><h4 id="滚动列表效果"><a href="#滚动列表效果" class="headerlink" title="滚动列表效果"></a>滚动列表效果</h4><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/scroll2.gif" /><h4 id="底部出现效果"><a href="#底部出现效果" class="headerlink" title="底部出现效果"></a>底部出现效果</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/showbottom.gif"></p><h4 id="一些改变时候的过渡"><a href="#一些改变时候的过渡" class="headerlink" title="一些改变时候的过渡"></a>一些改变时候的过渡</h4><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/slow20220423150040364202204231500566712.gif" /><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/superBiuBiuMan/processon_html_project">ProcessOn官网前端页面</a></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-JavaScript的身份证正则和内置可迭代对象</title>
    <link href="/2022/04/23/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8823%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/23/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8823%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">以下哪些对象是Javascript内置的可迭代对象？(多选)<br><span class="hljs-symbol">A:</span> Array<br><span class="hljs-symbol">B:</span> Map<br><span class="hljs-symbol">C:</span> <span class="hljs-type">String</span><br><span class="hljs-symbol">D:</span> <span class="hljs-type">Object</span><br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A,B,C</li></ul></li><li><p>解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JavaScript</span>当中可迭代的对象有<br><span class="hljs-title class_">Array</span><br><span class="hljs-title class_">Map</span><br><span class="hljs-title class_">Set</span><br><span class="hljs-title class_">String</span><br><span class="hljs-title class_">TypedArray</span><br><span class="hljs-variable language_">arguments</span>对象(注意:箭头函数是没有<span class="hljs-variable language_">arguments</span>和<span class="hljs-variable language_">this</span>的,所以只有普通函数才有<span class="hljs-variable language_">arguments</span>)<br><span class="hljs-title class_">NodeList</span>对象(从<span class="hljs-variable language_">document</span>.<span class="hljs-property">getElementsByTagName</span>之类获取的节点列表)<br></code></pre></td></tr></table></figure></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs inform7">关于身份证号，以下正确的正则表达式为(多选)<br>A: isIDCard=/^<span class="hljs-comment">[1-9]</span>\d&#123;7&#125;((0\d)|(1<span class="hljs-comment">[0-2]</span>))((<span class="hljs-comment">[0|1|2]</span>\d)|3<span class="hljs-comment">[0-1]</span>)\d&#123;3&#125;$/<br><br>B: isIDCard=/^<span class="hljs-comment">[1-9]</span>\d&#123;7&#125;((9\d)|(1<span class="hljs-comment">[0-2]</span>))((<span class="hljs-comment">[0|1|2]</span>\d)|3<span class="hljs-comment">[9-1]</span>)\d&#123;3&#125;$/<br><br>C: isIDCard=/^<span class="hljs-comment">[1-9]</span>\d&#123;5&#125;<span class="hljs-comment">[1-9]</span>\d&#123;3&#125;((0\d)|(1<span class="hljs-comment">[0-2]</span>))((<span class="hljs-comment">[0|1|2]</span>\d)|3<span class="hljs-comment">[0-1]</span>)\d&#123;4&#125;$/<br><br>D: isIDCard=/^<span class="hljs-comment">[1-9]</span>\d&#123;5&#125;<span class="hljs-comment">[1-9]</span>\d&#123;3&#125;((9\d)|(1<span class="hljs-comment">[9-2]</span>))((<span class="hljs-comment">[0|1|2]</span>\d)|3<span class="hljs-comment">[9-1]</span>)\d&#123;4&#125;$/<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>A ,C</li></ul></li><li><p>解析</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">身份证构成<br>15位身份证的构成：六位出生地区码+六位出身日期码+三位顺序码<br>并且15位的身份证号码显示的年份00<span class="hljs-string">-99</span>,代表1900<span class="hljs-string">-1999</span>年,其他的和18为基本一致<br>18位身份证的构成：六位出生地区码+八位出生日期码+三位顺序码+一位校验码<br></code></pre></td></tr></table></figure><ul><li><p>A: </p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">^:以指定类型的开头,后面紧跟着什么就是以什么开头</span><br><span class="hljs-section">[1-9]\d&#123;7&#125;: 六位出生地区码+两位出生日期码的年份(00-99)</span><br><span class="hljs-section">((0\d)|(1[0-2])): 匹配月份,不足二位的前面填充0,也就是01,05</span><br><span class="hljs-section">(([0|1|2]\d)|3[0-1]): 匹配日,匹配01,10等或者30,31</span><br><span class="hljs-section">\d&#123;3&#125;$: 三位顺序码,并以数字结尾</span><br></code></pre></td></tr></table></figure></li><li><p>C: </p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs inform7">^:以指定类型的开头,后面紧跟着什么就是以什么开头<br><span class="hljs-comment">[1-9]</span>\d&#123;5&#125;: 匹配六位出生地区码<br><span class="hljs-comment">[1-9]</span>\d&#123;3&#125;: 匹配年份,年份不能为0开头,所以第一位就以<span class="hljs-comment">[1-9]</span>的情况出现<br>((0\d)|(1<span class="hljs-comment">[0-2]</span>)): 匹配月份,不足二位的前面填充0,也就是01,05<br>((<span class="hljs-comment">[0|1|2]</span>\d)|3<span class="hljs-comment">[0-1]</span>): 匹配日,匹配01,10等或者30,31<br>\d&#123;4&#125;$: 三位顺序码+一位校验码,并以数字结尾<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="额外"><a href="#额外" class="headerlink" title="额外"></a>额外</h3><ul><li>​jQuery当中的$符号还可以传入一个jQuery对象,代表创建该jQuery对象的一个副本并返回,副本与传入的jQuery对象引用完全相同的元素.</li><li>​JavaScript是解释性语言</li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-js的call,apply为null,undefined的情况和日期的注意点</title>
    <link href="/2022/04/22/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8822%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/22/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8822%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125; <br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>);<span class="hljs-comment">//输出结果为?</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>window</li></ul></li><li>解析<ul><li>call,apply用于改变this的指向,并且可以让任意函数成为某一对象的方法进行调用</li><li><strong>特别的是</strong><ul><li>null或undefined时，将是JS执行环境的全局变量。浏览器中是window，其它环境（如node）则是global。</li><li><a href="http://es5.github.io/#x15.3.4.4">ECMAScript5.1 15.3.4.4中有解释</a></li></ul></li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">有<span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&#x27;2018-05-09&#x27;</span>)，可以设置为<span class="hljs-number">6</span>月份的操作是？（）(多选)<br><span class="hljs-attr">A</span>:  d.<span class="hljs-title function_">setMonth</span>(<span class="hljs-number">7</span>);<br><span class="hljs-attr">B</span>:  d.<span class="hljs-title function_">setMonth</span>(<span class="hljs-number">6</span>);<br><span class="hljs-attr">C</span>:  d.<span class="hljs-title function_">setMonth</span>(<span class="hljs-number">5</span>);<br><span class="hljs-attr">D</span>:  d.<span class="hljs-title function_">setDate</span>(<span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>C与D</li></ul></li><li><p>解析</p><ul><li><p>C : js当中的月份是从0开始算的,0代表1月,11代表12月,所以设置的时候需要减少1,所以d.setMonth(5)为设置6月份</p></li><li><p>D : 看看菜鸟教程当中的setDate(day)解释</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>day</em></td><td align="left">必需。<br /><strong>表示一个月中的一天的一个数值（1 ~ 31</strong>）<br />          0 为上一个月的最后一天<br />           -1 为上一个月最后一天之前的一天<br /><strong>如果当月有 31 天</strong><br />          32 为下个月的第一天<br /><strong>如果当月有 30 天</strong><br />           32 为下一个月的第二天</td></tr></tbody></table></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//五月有31天,所以只需要大于31就是设置下一个月了(其实设置大于31的数字都可以设置到下一个月,只不过下一个是记号的区别而已~)</span><br><span class="hljs-keyword">var</span> time = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2018-05-09&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;time.getFullYear()&#125;</span>年<span class="hljs-subst">$&#123;time.getMonth()+<span class="hljs-number">1</span>&#125;</span>月<span class="hljs-subst">$&#123;time.getDate()&#125;</span>日`</span>);<span class="hljs-comment">//2018年5月9日</span><br>time.<span class="hljs-title function_">setDate</span>(<span class="hljs-number">42</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;time.getFullYear()&#125;</span>年<span class="hljs-subst">$&#123;time.getMonth()+<span class="hljs-number">1</span>&#125;</span>月<span class="hljs-subst">$&#123;time.getDate()&#125;</span>日`</span>);<span class="hljs-comment">//2018年6月12日</span><br></code></pre></td></tr></table></figure><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//说出A,B,C,D输出结果</span><br><span class="hljs-attr">A</span>:  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>+ <span class="hljs-string">&quot;2&quot;</span>+<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-attr">B</span>:  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>+ +<span class="hljs-string">&quot;2&quot;</span>+<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-attr">C</span>:  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A&quot;</span>- <span class="hljs-string">&quot;B&quot;</span>+<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-attr">D</span>:  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;A&quot;</span>- <span class="hljs-string">&quot;B&quot;</span>+<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>122   &#x3D;&gt; (  如果typeof (1+ “2”+”2”)   那么输出结果为”string”  )</li><li>32    &#x3D;&gt;  (  如果typeof (1+ +”2”+”2”)   那么输出结果为”string”  )</li><li>NaN2</li><li>NaN</li></ul></li><li><p>解析</p><ul><li>A : 做加法时要注意双引号，当使用双引号时，JavaScript认为是字符串，字符串相加等于字符串合并。<br>因此，这里相当于字符串的合并，即为122.</li><li>B : 第一个+”2”中的加号是一元加操作符，+”2”会变成数值2，因此1+ +”2”相当于1+2&#x3D;3.<br>然后和后面的字符串“2”相合并，变成了字符串”32”.</li><li>C :  第一个+”2”中的加号是一元加操作符，+”2”会变成数值2，因此1+ +”2”相当于1+2&#x3D;3.<br>然后和后面的字符串“2”相合并，变成了字符串”32”.<ul><li>同样的操作还有  * “1”   &#x3D;&gt;  相当于把字符串1转化为数字1</li></ul></li><li>“A”-“B”的运算中，需要先把”A”和”B”用Number函数转换为数值，其结果为NaN，在减发操作中，如果有一个是NaN，则结果是NaN，因此”A”-“B”结果为NaN。<br>然后和”2”进行字符串合并(<strong>这里的+为什么是合并那是因为加数为字符串类型</strong>)，变成了NaN2.</li><li>D :”A”-“B”结果为NaN，然后和数值2进行<strong>加法</strong>操作，在加法操作中，如果有一个操作数是NaN，则结果为NaN。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-try...catch...finally</title>
    <link href="/2022/04/21/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8821%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/21/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8821%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> i = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-attr">bbb</span>: <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;position1&quot;</span>);<br>        <span class="hljs-keyword">return</span> i++;<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">break</span> bbb;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;position2&quot;</span>);<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><ul><li><p>答案</p><ul><li>position1 position2</li></ul></li><li><p>解析,上面代码转换下,对齐下</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> i = <span class="hljs-number">100</span>;<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-attr">bbb</span>: <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;position1&quot;</span>);<br>                  <span class="hljs-keyword">return</span> i++;<span class="hljs-comment">//i此时从100变为101</span><br>              &#125;<br>              <span class="hljs-keyword">finally</span> &#123;<br>                  <span class="hljs-keyword">break</span> bbb;<br>              &#125;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;position2&quot;</span>);<br>          <span class="hljs-keyword">return</span> i;<span class="hljs-comment">//i此时的值为101</span><br>      &#125;<br>      <span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><ul><li>在try…..catch ….finally 当中,不管try里面的结果怎么样,finally都会被执行,至于 finally的break bbb;是跳出bbb标签代码块</li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;<span class="hljs-variable constant_">SCRIPT</span> <span class="hljs-variable constant_">LANGUAGE</span>=<span class="hljs-string">&quot;JavaScript&quot;</span>&gt;<br>    <span class="hljs-keyword">var</span> a=<span class="hljs-string">&quot;undefined&quot;</span>;<br>    <span class="hljs-keyword">var</span> b=<span class="hljs-string">&quot;false&quot;</span>;<br>    <span class="hljs-keyword">var</span> c=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">assert</span>(<span class="hljs-params">aVar</span>)&#123;<br>        <span class="hljs-keyword">if</span>(aVar)      <br>            <span class="hljs-title function_">alert</span>(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">else</span>  <br>            <span class="hljs-title function_">alert</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-title function_">assert</span>(a);<br>    <span class="hljs-title function_">assert</span>(b);<br>    <span class="hljs-title function_">assert</span>(c);<br>&lt;/<span class="hljs-variable constant_">SCRIPT</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>true true false</li></ul></li><li>解析<ul><li>大意了,除了 “” null undefined false 0 NaN 这六种转布尔值为false外,其他转化为布尔值都为true</li><li>var a &#x3D; “undefined” &#x3D;&gt;字符串,转布尔值为true</li><li>var b &#x3D; “false” &#x3D; &gt; 字符串 ,转布尔值为true</li><li>var c &#x3D; “” &#x3D; &gt; 空字符串, 转布尔值为false</li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/0073Cjx6ly1gkwllhsy77j30u00u0gnd.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>今日刷题-隐式转换和String和new String</title>
    <link href="/2022/04/20/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8820%E6%97%A5%E5%88%B7%E9%A2%98/"/>
    <url>/2022/04/20/%E5%88%B7%E9%A2%98/JavaScript/2022%E5%B9%B44%E6%9C%8820%E6%97%A5%E5%88%B7%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p1 = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;12&#x27;</span>,<br>  <span class="hljs-attr">action</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">where,doing</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;岁的&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;在&#x27;</span> + where + doing);<br>  &#125;  <br>&#125;<br><span class="hljs-keyword">var</span> p2 = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;15&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p1.<span class="hljs-property">action</span>.<span class="hljs-title function_">call</span>(p2,<span class="hljs-string">&#x27;操场上&#x27;</span>,<span class="hljs-string">&#x27;运动&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li>输出结果<ul><li>15岁的小红在操场上运动</li></ul></li><li>分析<ul><li>call可以改变this的执行,并且使得某一个函数成为对象的方法调用</li><li>所以p1.action.call(p2,’操场上’,’运动’) &#x3D; &gt; p2.action(“操作上”,”运动) &#x3D; &gt; 输出  “15岁的小红在操场上运动”</li></ul></li></ul><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><p>以下哪个表达式的值为true？</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>.&#x27;<span class="hljs-number">1</span>&#x27; === <span class="hljs-number">1</span><br><span class="hljs-attribute">B</span>.isNaN(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br><span class="hljs-attribute">C</span>.<span class="hljs-number">1</span> in<span class="hljs-meta"> [1]</span><br><span class="hljs-attribute">D</span>.<span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>D</li></ul></li><li>分析<ul><li>A:  &#x3D;&#x3D;&#x3D;不会隐式转换,String类型不会等于Number类型 所以结果为false</li><li>B: 1&#x2F;0在js当中返回 <strong>Infinity</strong> 所以isNaN(1&#x2F;0)为false</li><li>C: in在数组可以用来检测是否有这个索引,在对象则是否是实例化对象<ul><li>Arrays var trees &#x3D; new Array(“redwood”, “bay”, “cedar”, “oak”, “maple”); 0 in trees &#x2F;&#x2F; returns true</li><li>var color1 &#x3D; new String(“green”); “length” in color1 &#x2F;&#x2F; returns true</li></ul></li><li>算术运算符优先级 &gt; 关系运算符 &gt; 逻辑运算符,所以 1 &amp;&amp; true &#x3D; &gt; true</li></ul></li></ul><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//说错1,2,3,4的输出结果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">value</span>)&#123;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>); ...①<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);...②<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);...③<br><br><span class="hljs-keyword">var</span> arr = [...<span class="hljs-variable language_">arguments</span>];...④<br><br>&#125;<br><br><span class="hljs-title function_">fn</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>① : false</li><li>② : 3</li><li>③ : 1</li><li>④ :  [1,2,3,4]</li></ul></li><li>分析<ul><li>① : arguments为一个伪数组,实际上是一个对象,所以为false</li><li>② : arguments接收函数传入过来的所有参数,所以结果为3</li><li>③ : value为函数第一个传入过来的值,所以为1</li><li>④ : 记住就好</li></ul></li></ul><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">下面哪些语句执行结果为<span class="hljs-title function_">true</span>(多选)<br><span class="hljs-attr">A</span>:<span class="hljs-string">&#x27;foo&#x27;</span> == <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); &#125;;<br><span class="hljs-attr">B</span>:<span class="hljs-string">&#x27;foo&#x27;</span> == <span class="hljs-keyword">new</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); &#125;;<br><span class="hljs-attr">C</span>:[] == <span class="hljs-number">0</span><br><span class="hljs-attr">D</span>:![]<br><span class="hljs-attr">E</span>:!<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li>答案<ul><li>B C E</li></ul></li><li>分析<ul><li>A,B:<ul><li>构造函数使用会返回一个对象:<ul><li>情况1:return 一个对象,那么构造函数就会返回你定义的这个对象 比如 return {a:xxx}; 就会返回这个 {a:xxx}</li><li>情况2:未写return 或者return 基本数据类型,构造函数会默认返回一个对象</li><li>A选项当中的构造函数返回一个基本数据类型,所以构造函数默认返回一个空对象<ul><li>String(‘foo’); 控制台输出为’foo’</li></ul></li><li>B选项返回一个String对象,所以构造函数就返回了这个对象<ul><li>new String(‘foo’);控制台输出为String {‘foo’}<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220420102106.png"></li></ul></li></ul></li></ul></li><li>C: 引用数据和基本数据比较,会将引用数据转基本数据在比较,[]转基本数据类型为”” , “” &#x3D;&#x3D; 0 ;比较再转化为布尔类型,false &#x3D;&#x3D; false,所以为true</li><li>D:未发生隐式转换,**[]**的布尔值有两种转换结果。直接转的话是true(在false六种值之外)，还有一种是调用tostring转字符串”” 再转布尔就为false了,所以![] 为true<ul><li>如果[] &#x3D;&#x3D; false ,发生了隐式转换,则[]会转化为false</li></ul></li><li>E: 0转布尔为false,同样转false的还有 undefined null ‘’ NaN 0 false 这四种都会为FALSE . 其他均为TRUE.所以!false &#x3D;&gt; true</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>刷题</tag>
      
      <tag>刷刷刷</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我来图书馆小程序抓包抢位置</title>
    <link href="/2022/04/06/NodeJs/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E6%8A%A2%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/04/06/NodeJs/%E6%88%91%E6%9D%A5%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85%E6%8A%A2%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="提交预约流程"><a href="#提交预约流程" class="headerlink" title="提交预约流程"></a>提交预约流程</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093101.png"></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>抓包分析好像还涉及到wxlib&#x2F;wx&#x2F;login 不过从后面提交数据来看好像用不到,可能我技术问题吧</li></ol><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><h4 id="有人可能最新微信PC抓不了小程序包"><a href="#有人可能最新微信PC抓不了小程序包" class="headerlink" title="有人可能最新微信PC抓不了小程序包"></a>有人可能最新微信PC抓不了小程序包</h4><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><ol><li><p>打开一个任意小程序，打开任务管理器，找到进程。右键打开文件位置。</p></li><li><p>退出电脑微信，右键结束小程序进程。</p></li><li><p>找到这个目录后删除这个目录<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093447.png"></p></li><li><p>或者你有everything这个工具,直接搜索 WMPFRuntime 然后右键打开所在文件夹,把里面这个4376目录删除就可以</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406093433.png"></p><h4 id="不想分析了-具体的可以自己抓包看看"><a href="#不想分析了-具体的可以自己抓包看看" class="headerlink" title="不想分析了~,具体的可以自己抓包看看"></a>不想分析了~,具体的可以自己抓包看看</h4><h3 id="微信小程序反编译-可以看看源代码"><a href="#微信小程序反编译-可以看看源代码" class="headerlink" title="微信小程序反编译(可以看看源代码~)"></a>微信小程序反编译(可以看看源代码~)</h3><p><a href="https://github.com/Cherrison/CrackMinApp">微信小程序反编译</a></p><p>这次小程序反编译出来的文件</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406095121.png"></p><h4 id="userID可以去抓包获取-这个没办法模拟请求获取"><a href="#userID可以去抓包获取-这个没办法模拟请求获取" class="headerlink" title="userID可以去抓包获取,这个没办法模拟请求获取"></a>userID可以去抓包获取,这个没办法模拟请求获取</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406144717.png"></p><h3 id="抢座nodejs代码"><a href="#抢座nodejs代码" class="headerlink" title="抢座nodejs代码"></a>抢座nodejs代码</h3><p class="note note-info">注意安装axios依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br><span class="hljs-keyword">var</span> configself = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://wxcourse.jxufe.cn/wxlib/wx/appoint&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">isPeriod</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">//自己的userID有效期多久未测试</span><br>        <span class="hljs-attr">userId</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-comment">//座位id,可以通过网站传参抓包获取</span><br>        <span class="hljs-comment">//519代表A208这个位置</span><br>        <span class="hljs-attr">seatId</span>: <span class="hljs-number">519</span>,<br>        <span class="hljs-comment">//不知道干嘛用</span><br>        <span class="hljs-attr">appointType</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-comment">//代表区域,A区域代码为23,F区域为115,G区域为113等等</span><br>        <span class="hljs-attr">vdId</span>: <span class="hljs-number">23</span>,<br>        <span class="hljs-comment">//时间段,1代表8:00-12:00时间段</span><br>        <span class="hljs-comment">//时间段,2代表12:00-17:00时间段</span><br>        <span class="hljs-comment">//时间段2,代表17:30-23:00时间段</span><br>        <span class="hljs-attr">timeSlot</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-comment">//大学名称</span><br>        <span class="hljs-attr">officeCode</span>: <span class="hljs-string">&quot;jxcjdx&quot;</span>,<br>        <span class="hljs-comment">//大学id</span><br>        <span class="hljs-attr">colleageId</span>: <span class="hljs-number">51</span>,<br>        <span class="hljs-comment">//预约日期</span><br>        <span class="hljs-attr">day</span>: <span class="hljs-string">&quot;2022-04-07&quot;</span>,<br>        <span class="hljs-comment">//预约截止时间段: </span><br>        <span class="hljs-comment">//比如8:00-12:00截止日期为12:00, </span><br>        <span class="hljs-comment">//比如12:00-17:00截止日期为17:00</span><br>        <span class="hljs-comment">//比如17:30-23:00截止日期为23:00</span><br>        <span class="hljs-attr">appointTo</span>: <span class="hljs-string">&quot;12:00&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">headers</span>: &#123;&#125;<br>&#125;;<br><span class="hljs-title function_">axios</span>(configself)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response.<span class="hljs-property">data</span>));<br>    &#125;)<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;);<br></code></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220406101308.png"></p>]]></content>
    
    
    <categories>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纯css+html实现的分页器功能</title>
    <link href="/2022/04/03/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E5%99%A8/"/>
    <url>/2022/04/03/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E5%88%86%E9%A1%B5%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="分页器"><a href="#分页器" class="headerlink" title="分页器"></a>分页器</h3><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://github.com/superBiuBiuMan/pageing-device">github地址</a></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>引入样式文件<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./paginationself.css&quot;&gt;</code></p></li><li><p>引入js代码文件<code> &lt;script src=&quot;./paginationself.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>js代码添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fy = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pagination_self&quot;</span>);<span class="hljs-comment">//父容器,负责存储分页器,id名不要改</span><br><span class="hljs-title function_">paginationself</span>(fy, &#123;&#125;);<br></code></pre></td></tr></table></figure></li></ol><h4 id="具体参数"><a href="#具体参数" class="headerlink" title="具体参数"></a>具体参数</h4><p>paginationself(fatherDom,options,callback)</p><ol><li>fatherDom:生成器生成的父容器</li><li>options对象:参数配置<ul><li>pageInfo对象<ul><li>pageNum:当前页</li><li>totalPage:数据总个数</li><li>least:当总页数低于least的时候页码全部显示</li><li>size:一次显示多少页码</li></ul></li><li>textInfo对象:设置显示文字<ul><li>first<ul><li>(默认为首页)</li></ul></li><li>prev<ul><li>(默认为上一页)</li></ul></li><li>next<ul><li>(默认为下一页)</li></ul></li><li>last<ul><li>(默认为尾页)</li></ul></li></ul></li></ul></li><li>callback:当用户单击页数的时候触发回调函数,会返回一个用户单击后的页码</li></ol><h4 id="参考示例"><a href="#参考示例" class="headerlink" title="参考示例"></a>参考示例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./paginationself.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 外壳样式,可选,写了就覆盖默认的 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* #pagination_self &#123;</span></span><br><span class="hljs-comment"><span class="language-css">            width: 98%;</span></span><br><span class="hljs-comment"><span class="language-css">            height: 50px;</span></span><br><span class="hljs-comment"><span class="language-css">            border: 1px solid #e5e5e5;</span></span><br><span class="hljs-comment"><span class="language-css">            margin: 20px auto;</span></span><br><span class="hljs-comment"><span class="language-css">            display: flex;</span></span><br><span class="hljs-comment"><span class="language-css">            justify-content: center;</span></span><br><span class="hljs-comment"><span class="language-css">            align-items: center;</span></span><br><span class="hljs-comment"><span class="language-css">        &#125;  */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- id名不可变动! --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pagination_self&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./paginationself.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 使用</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> fy = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;pagination_self&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-title function_">paginationself</span>(fy, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">pageInfo</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">pageNum</span>:<span class="hljs-number">2</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">totalPage</span>:<span class="hljs-number">25</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;, <span class="hljs-function">(<span class="hljs-params">nowPage</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//此为回调函数,可省略~</span></span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;当前显示的页为&quot;</span>,nowPage);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">        <span class="hljs-comment">//等同于</span></span><br><span class="language-javascript">        <span class="hljs-comment">// paginationself(fy,&#123;&#125;);</span></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><h4 id="图1"><a href="#图1" class="headerlink" title="图1"></a>图1</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220403154238.png"></p><h4 id="图2"><a href="#图2" class="headerlink" title="图2"></a>图2</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220403154403.png"></p><h4 id="图3"><a href="#图3" class="headerlink" title="图3"></a>图3</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220403154454.png"></p><h4 id="图4"><a href="#图4" class="headerlink" title="图4"></a>图4</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220403154318.png"></p>]]></content>
    
    
    <categories>
      
      <category>javscript</category>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express+socket简易聊天室</title>
    <link href="/2022/03/31/%E5%89%8D%E7%AB%AF/express+socket%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/2022/03/31/%E5%89%8D%E7%AB%AF/express+socket%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="简易聊天室"><a href="#简易聊天室" class="headerlink" title="简易聊天室"></a>简易聊天室</h3><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><ol><li>在我们平常的时候,ajax发送的都是短连接,get完成或者post完成之后连接就断开,并且当服务器数据更新的时候,必须再次发送ajax请求才可以获取到最新的数据</li><li>在没有socket之前,要实时获取服务器的数据,必须要<strong>轮询</strong>,也就是每隔一段时间发送ajax</li><li>所以现在有了服务端主动向前端推送消息的东东——长连接socket</li><li>实现的二种方式<ol><li>socket.io</li><li>websocket(H5新增)</li></ol></li></ol><h4 id="这里使用socket-io实现"><a href="#这里使用socket-io实现" class="headerlink" title="这里使用socket.io实现"></a>这里使用socket.io实现</h4><ol><li><p>socket.io的具体使用并没有想象的难记,而是on和emit这二个关键字贯穿始终</p></li><li><p>on就用来订阅服务器发送的消息(服务端当中的理解就是监听用户发送服务端的信息)</p></li><li><p>emit就用来用户向服务器发送信息(服务端当中的理解就是向用户发送信息)</p><p class="note note-info">socket.io大概过程</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/1a6439038e343b8fe18f9612fbcd4cb.png"></p></li></ol><h3 id="前端设置"><a href="#前端设置" class="headerlink" title="前端设置"></a>前端设置</h3><ol><li><p>引入<code>&lt;script src=&quot;./socket.io.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>使用io.connect(url)连接socket服务器</p></li><li><p>使用on监听和emit发送</p></li></ol><h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./jquery-3.6.0.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./socket.io.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        * &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span> <span class="hljs-number">10px</span> <span class="hljs-number">8px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e2e1e2</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow-x</span>: auto;</span><br><span class="language-css">            <span class="hljs-attribute">overflow-x</span>: hidden;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.left</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#c5cdd6</span>;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.content</span> <span class="hljs-selector-class">.right</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span> <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8dcced</span>;</span><br><span class="language-css">            <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.input</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.input</span> <span class="hljs-selector-id">#ipt</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.ope</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.wrap</span>&gt;<span class="hljs-selector-class">.ope</span> <span class="hljs-selector-id">#send</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;p class=&quot;left&quot;&gt;你好,我叫&lt;/p&gt; --&gt;</span><br>            <span class="hljs-comment">&lt;!-- &lt;p class=&quot;right&quot;&gt;hello&lt;/p&gt; --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ipt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ope&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;send&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $inputs = $(<span class="hljs-string">&quot;#ipt&quot;</span>); <span class="hljs-comment">//文本输入框</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $send = $(<span class="hljs-string">&quot;#send&quot;</span>); <span class="hljs-comment">//发送按钮</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $content = $(<span class="hljs-string">&quot;.content&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">// socket连接</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> socket = io.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&quot;http://localhost:8888&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">//监听自定义的serverInfo事件,data参数为服务器传送的数据</span></span><br><span class="language-javascript">        <span class="hljs-comment">//监听服务器的信息</span></span><br><span class="language-javascript">        socket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;serverInfo&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//收到从服务器发送的信息</span></span><br><span class="language-javascript">            $(<span class="hljs-string">&#x27;&lt;p class=&quot;left&quot;&gt;&#x27;</span> + data + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>($content);</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">//用户在输入框按下回车</span></span><br><span class="language-javascript">        $inputs.<span class="hljs-title function_">keyup</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> ($inputs.<span class="hljs-title function_">val</span>().<span class="hljs-title function_">trim</span>() &amp;&amp; e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>) &#123;</span><br><span class="language-javascript">                $send.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        <span class="hljs-comment">//发送按钮被单击</span></span><br><span class="language-javascript">        $send.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> value = $inputs.<span class="hljs-title function_">val</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (value) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 不为空,添加</span></span><br><span class="language-javascript">                <span class="hljs-comment">//自己发送的消息,添加到右边</span></span><br><span class="language-javascript">                $(<span class="hljs-string">&#x27;&lt;p class=&quot;right&quot;&gt;&#x27;</span> + value + <span class="hljs-string">&#x27;&lt;/p&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>($content);</span><br><span class="language-javascript">                <span class="hljs-comment">//先服务端发送消息,key为userMessage</span></span><br><span class="language-javascript">                socket.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;userMessage&quot;</span>, value);</span><br><span class="language-javascript">                <span class="hljs-comment">//清空输入框</span></span><br><span class="language-javascript">                $inputs.<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;&quot;</span>);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;输入框为空!&quot;</span>);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>server.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-comment">//这里是为了解决跨域</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/&quot;</span>, express.<span class="hljs-title function_">static</span>(__dirname));<br><span class="hljs-keyword">const</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>).<span class="hljs-title class_">Server</span>(app);<br><span class="hljs-keyword">const</span> websocket = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;socket.io&quot;</span>)(server);<br><span class="hljs-comment">//上面的可以说的固定的~</span><br><br><span class="hljs-keyword">var</span> clientCache = []; <span class="hljs-comment">//用户暂存列表,为了后面可以向所有用户发送数据</span><br><span class="hljs-comment">//连接监听</span><br>websocket.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params">client</span>) =&gt;</span> &#123;<br>    clientCache.<span class="hljs-title function_">push</span>(client); <span class="hljs-comment">//添加用户到缓存列表</span><br>    <span class="hljs-comment">//监听用户请求 key为userMessage</span><br>    client.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;userMessage&quot;</span>, <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//收到用户发送的信息,批量发送给其他人</span><br>        clientCache.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">ele</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (ele != client) &#123;<br>                <span class="hljs-comment">//避免自己收到</span><br>                ele.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;serverInfo&quot;</span>, data);<br>            &#125;<br>        &#125;)<br>    &#125;)<br><br>&#125;)<br><br><span class="hljs-comment">//服务启动</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;8888&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;---------server start--------------&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/1648698057(1).jpg"></p><h3 id="娱乐一刻"><a href="#娱乐一刻" class="headerlink" title="娱乐一刻"></a>娱乐一刻</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E8%88%94%E7%8B%97%E6%97%A5%E8%AE%B0.png" alt="舔狗日记"></p><p><code>&quot;今天你约我去陪你买衣服，尽管我知道只是因为我的身形像你异地的男朋友，比较好试衣服而已。买完衣服，寄快递写他名字的时候，看见你嘴角翘起幸福的笑来。那一刻，我多希望我可以也叫那个名字，哪怕只有一分钟！！&quot;</code></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
      <category>socket</category>
      
      <category>express</category>
      
    </categories>
    
    
    <tags>
      
      <tag>socket</tag>
      
      <tag>express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖节流的使用和封装成函数</title>
    <link href="/2022/03/31/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/"/>
    <url>/2022/03/31/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E9%98%B2%E6%8A%96%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="关于this指向问题，防抖函数中的fn-apply-this-arguments-作用"><a href="#关于this指向问题，防抖函数中的fn-apply-this-arguments-作用" class="headerlink" title="关于this指向问题，防抖函数中的fn.apply(this,arguments)作用"></a>关于this指向问题，防抖函数中的fn.apply(this,arguments)作用</h4><p><a href="https://blog.csdn.net/weixin_44494811/article/details/103486637">防抖函数中的fn.apply(this,arguments)作用</a></p><p><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">this指向问题</a></p><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><ol><li>一定时间内只执行一项任务</li></ol><h3 id="节流原理"><a href="#节流原理" class="headerlink" title="节流原理"></a>节流原理</h3><ol><li>执行一个函数</li><li>执行这个函数的时候看看前面有没有执行过</li><li>如果前面有执行过这个函数并且没有完成,那么本次任务就不执行</li></ol><h4 id="节流前"><a href="#节流前" class="headerlink" title="节流前"></a>节流前</h4><p class="note note-warning">可以看到"move"疯狂输出</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E9%98%B2%E6%8A%96%E4%B9%8B20220331144311156%E5%89%8D.gif"></p><h4 id="节流后"><a href="#节流后" class="headerlink" title="节流后"></a>节流后</h4><p class="note note-info">程序输出move的次数明显减少</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E9%98%B2%E6%8A%9620220331144308919%E5%90%8E.gif"></p><h4 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 节流</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; fn 要节流的函数</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; delay 延迟(类似于fps一样~)</span><br><span class="hljs-comment"> * return 执行函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttleMy</span>(<span class="hljs-params">fn, delay</span>) &#123;<br><span class="hljs-comment">//这样子建立了一个闭包,timer始终存在</span><br><span class="hljs-keyword">var</span> timer=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br><span class="hljs-keyword">if</span> (timer) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//传入的为[30,40,50....这种形式],所以不能单纯fn(args)</span><br><span class="hljs-comment">//不确定参数,加上参数形式为[....],就使用fn.apply(this.args);</span><br>fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>timer=<span class="hljs-literal">null</span>;<br>&#125;, delay);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="节流函数使用示例代码"><a href="#节流函数使用示例代码" class="headerlink" title="节流函数使用示例代码"></a>节流函数使用示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.box&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onmousemove</span>=<span class="hljs-title function_">throttleMy</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = e.<span class="hljs-property">pageX</span> - (box.<span class="hljs-property">clientWidth</span>) / <span class="hljs-number">2</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">            box.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = e.<span class="hljs-property">pageY</span> - (box.<span class="hljs-property">clientHeight</span>) / <span class="hljs-number">2</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">        &#125;,<span class="hljs-number">40</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; fn 要防抖的函数</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; delay 延迟(类似于fps一样~)</span></span><br><span class="hljs-comment"><span class="language-javascript">         * return 执行函数</span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">throttleMy</span>(<span class="hljs-params">fn, delay</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//这样子建立了一个闭包,timer始终存在</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> timer=<span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//传入的为[30,40,50....这种形式],所以不能单纯fn(args)</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//不确定参数,加上参数形式为[....],就使用fn.apply(this.args);</span></span><br><span class="language-javascript">                    fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);</span><br><span class="language-javascript">                    timer=<span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;, delay);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><h4 id="防抖原理"><a href="#防抖原理" class="headerlink" title="防抖原理"></a>防抖原理</h4><ol><li>执行一个函数</li><li>执行这个函数的时候一段时间后如果有东东再次执行这个函数,则重新计时后在次调用</li></ol><h4 id="防抖前"><a href="#防抖前" class="headerlink" title="防抖前"></a>防抖前</h4><p class="note note-info">输入框输入"你好"</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220331154303.png"></p><h4 id="防抖后"><a href="#防抖后" class="headerlink" title="防抖后"></a>防抖后</h4><p class="note note-info">输入框再次输入"你好"</p><p class="note note-info">可以看到少了很多次</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220331154405.png"></p><h4 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 防抖</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; fn 要防抖的函数</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; delay 延迟(类似于fps一样~)</span><br><span class="hljs-comment">* return 执行函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;<br><span class="hljs-comment">//这样子建立了一个闭包,timer始终存在</span><br><span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br><span class="hljs-keyword">if</span> (timer) &#123;<br><span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">//清除上一次的</span><br>&#125;<br>timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">//传入的为[30,40,50....这种形式],所以不能单纯fn(args)</span><br><span class="hljs-comment">//不确定参数,加上参数形式为[....],就使用fn.apply(this.args);</span><br>fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);<br>timer = <span class="hljs-literal">null</span>;<br>&#125;, delay);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="防抖函数使用示例代码"><a href="#防抖函数使用示例代码" class="headerlink" title="防抖函数使用示例代码"></a>防抖函数使用示例代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    账户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;useript&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ipt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;useript&quot;</span>);</span><br><span class="language-javascript">        ipt.<span class="hljs-property">onkeyup</span>=<span class="hljs-title function_">debounce</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);</span><br><span class="language-javascript">        &#125;,<span class="hljs-number">40</span>);</span><br><span class="language-javascript">        <span class="hljs-comment">/**</span></span><br><span class="hljs-comment"><span class="language-javascript">         * 防抖</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">function</span>&#125; fn 要防抖的函数</span></span><br><span class="hljs-comment"><span class="language-javascript">         * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number</span>&#125; delay 延迟(类似于fps一样~)</span></span><br><span class="hljs-comment"><span class="language-javascript">         * return 执行函数</span></span><br><span class="hljs-comment"><span class="language-javascript">         */</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn, delay</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//这样子建立了一个闭包,timer始终存在</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">if</span> (timer) &#123;</span><br><span class="language-javascript">                    <span class="hljs-built_in">clearTimeout</span>(timer); <span class="hljs-comment">//清除上一次的</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-comment">//传入的为[30,40,50....这种形式],所以不能单纯fn(args)</span></span><br><span class="language-javascript">                    <span class="hljs-comment">//不确定参数,加上参数形式为[....],就使用fn.apply(this.args);</span></span><br><span class="language-javascript">                    fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args);</span><br><span class="language-javascript">                    timer = <span class="hljs-literal">null</span>;</span><br><span class="language-javascript">                &#125;, delay);</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="娱乐一刻"><a href="#娱乐一刻" class="headerlink" title="娱乐一刻"></a>娱乐一刻</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E8%88%94%E7%8B%97%E6%97%A5%E8%AE%B0.png"></p><p><code>&quot;昨晚你终于回我信息了，你回了一句谢谢还加了一个爱心。当时我在工地上激动的差点把隔壁的吊塔阿姨给亲了。不过我想了想你笑起来的样子我还是忍住了。你给我发爱心，一定是已经爱上我了吧，放心，我连咱们的孩子名字都想好了。XX等我，我一定会继续努力挣钱，给你买更多的化妆品，发更多的红包！！&quot;</code></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>express,multer,jQuery前端后端上传单个文件</title>
    <link href="/2022/03/29/%E5%89%8D%E7%AB%AF/express+multer+jQuery%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E4%B8%8A%E4%BC%A0%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <url>/2022/03/29/%E5%89%8D%E7%AB%AF/express+multer+jQuery%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E4%B8%8A%E4%BC%A0%E5%8D%95%E4%B8%AA%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="先安装基本的模块"><a href="#先安装基本的模块" class="headerlink" title="先安装基本的模块"></a>先安装基本的模块</h3><p>$ npm init -y </p><p>$ npm install express –save</p><p>$ npm install multer –save</p><h4 id="附上multer的github当中别人汉化的API文档"><a href="#附上multer的github当中别人汉化的API文档" class="headerlink" title="附上multer的github当中别人汉化的API文档"></a>附上multer的github当中别人汉化的API文档</h4><p><a href="https://github.com/expressjs/multer/blob/master/doc/README-zh-cn.md">github地址</a></p><p class="note note-info">我这使用的nodemon,如果那么使用node运行,修改记得重启</p><h3 id="开始创建基本express-上传图片"><a href="#开始创建基本express-上传图片" class="headerlink" title="开始创建基本express(上传图片)"></a>开始创建基本express(上传图片)</h3><p>当前目录下创建fileup.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;multer&quot;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>();<span class="hljs-comment">//创建express实例</span><br><br><span class="hljs-comment">//这里是为了后期没有跨域问题设置的静态资源目录</span><br><span class="hljs-comment">//__dirname为NodeJS全局变量: 返回运行当前js的文件夹的绝对路径</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/&quot;</span>,express.<span class="hljs-title function_">static</span>(__dirname));<br><br><span class="hljs-comment">//后期ajax提交地址就为:http://localhost:3000/file 端口号可在下方自行设置</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/file&quot;</span>,<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//前期测试接口发送数据,没有问题再进行下一步</span><br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;file ok&quot;</span>);<br>&#125;)<br><br><span class="hljs-comment">//设置在本地端口3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------server start-------------------&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="测试是否正常"><a href="#测试是否正常" class="headerlink" title="测试是否正常"></a>测试是否正常</h4><p class="note note-info">这里使用postman测试</p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220329212333.png"  /><p class="note note-info">测试没有问题再继续,不然后期很难改</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><p>当前目录下创建up.html </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileInput&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">//这里不用jQuery获取是后期需要用到DOM元素,用jQuery也可以,用get或则[]就可以转为DOM元素</span></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileInput&quot;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $btn = $(<span class="hljs-string">&quot;#btn&quot;</span>);</span><br><span class="language-javascript">        $btn.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">//创建表单</span></span><br><span class="language-javascript">            <span class="hljs-comment">//这里new FormData不传入参数,因为这里只是上传一个图片,不存在其他数据,如果要传,传入form标签对应的DOM元素</span></span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();</span><br><span class="language-javascript">            <span class="hljs-comment">//传入文件的key和value</span></span><br><span class="language-javascript">            <span class="hljs-comment">//fileInput.files[0]获取第一个文件,为什么是数组的我猜是因为开发js的为了和多文件上传一样用</span></span><br><span class="language-javascript">            formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;fileusers&quot;</span>, fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]); </span><br><span class="language-javascript">            <span class="hljs-comment">//注意formData.append和formData.set区别,</span></span><br><span class="language-javascript">            $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;post&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;url&quot;</span>: <span class="hljs-string">&quot;http://localhost:3000/file&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-comment">//contentType:true;默认值,值为application/x-www-form-urlencoded</span></span><br><span class="language-javascript"><span class="hljs-comment">//contentType:false;值为multipart/form-data</span></span><br><span class="language-javascript">                <span class="hljs-comment">//重要!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="language-javascript">                <span class="hljs-string">&quot;contentType&quot;</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">               <span class="hljs-comment">//重要!!!!!!!!!!!!!!!!!!!!!!!!</span></span><br><span class="language-javascript">                <span class="hljs-string">&quot;processData&quot;</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;data&quot;</span>: formData,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span><br><span class="language-javascript">                &#125;,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;错误了&quot;</span>, error);</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="前端需要注意的"><a href="#前端需要注意的" class="headerlink" title="前端需要注意的"></a>前端需要注意的</h4><ol><li><p>注意formData.append和formData.set区别</p><ol><li>formData.append是如果存在值则会添加到后面,就像[{…},{…}]一样</li><li>formData.set是会覆盖前面的,只保留一个</li></ol></li><li><p><strong>jQuery上传数据的时候,记得设置下面二点</strong></p><ol><li>“processData”: false</li><li>“contentType”: false</li></ol></li><li><p>formData.append(“<strong>fileusers</strong>“, fileInput.files[0]); 当中<strong>fileusers</strong>在这里的作用</p><ol><li>后端multer需要通过用户定义的key,在这里也就是<strong>fileusers</strong>来设置数据</li></ol></li><li><p>new FormData();如果需要传入参数,是传入form标签对应的DOM元素</p></li></ol><h3 id="multer使用"><a href="#multer使用" class="headerlink" title="multer使用"></a>multer使用</h3><ul><li>大体分为而部分<ul><li>根据multer({})创建一个变量(对文件的一些设置和过滤),比如说 var <strong>fileOption</strong> &#x3D; multer({})</li><li>依据这个变量创建单例fileOption.single(key)或者fileOption.array(key,maxcount)</li><li>使用这个单例作为过滤器来对文件进行过滤和操作(也就是中间件)</li></ul></li></ul><h4 id="multer-创建一个变量当中一些可以设置的-具体可以参考官网"><a href="#multer-创建一个变量当中一些可以设置的-具体可以参考官网" class="headerlink" title="multer({})创建一个变量当中一些可以设置的(具体可以参考官网)"></a>multer({})创建一个变量当中一些可以设置的(具体可以参考官网)</h4><ol><li><p><strong>limits</strong>{对象}(一个对象，指定一些数据大小的限制)</p><table><thead><tr><th>Key</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>fieldNameSize</code></td><td>field 名字最大长度</td><td>100 bytes</td></tr><tr><td><code>fieldSize</code></td><td>field 值的最大长度</td><td>1MB</td></tr><tr><td><code>fields</code></td><td>非文件 field 的最大数量</td><td>无限</td></tr><tr><td><code>fileSize</code></td><td>在 multipart 表单中，文件最大长度 (字节单位)</td><td>无限</td></tr><tr><td><code>files</code></td><td>在 multipart 表单中，文件最大数量</td><td>无限</td></tr><tr><td><code>parts</code></td><td>在 multipart 表单中，part 传输的最大数量(fields + files)</td><td>无限</td></tr><tr><td><code>headerPairs</code></td><td>在 multipart 表单中，键值对最大组数</td><td>2000</td></tr></tbody></table></li><li><p><strong>fileFilter</strong>{函数}设置一个函数来控制什么文件可以上传以及什么文件应该跳过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fileFilter</span> (req, file, cb) &#123;<br><br>  <span class="hljs-comment">// 这个函数应该调用 `cb` 用boolean值来</span><br>  <span class="hljs-comment">// 指示是否应接受该文件</span><br><br>  <span class="hljs-comment">// 拒绝这个文件，使用`false`，像这样:</span><br>  <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>)<br><br>  <span class="hljs-comment">// 接受这个文件，使用`true`，像这样:</span><br>  <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>)<br><br>  <span class="hljs-comment">// 如果有问题，你可以总是这样发送一个错误:</span><br>  <span class="hljs-title function_">cb</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;I don\&#x27;t have a clue!&#x27;</span>))<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>storage</strong>{返回值} 为运行multer.diskStorage({设置参数})的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>  <span class="hljs-comment">//定义文件存储位置</span><br>  <span class="hljs-attr">destination</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) &#123;<br>    <span class="hljs-comment">//回调函数file当中 </span><br>    <span class="hljs-comment">/* file对象的内容&#123;</span><br><span class="hljs-comment">       fieldname: &#x27;fileusers&#x27;,//通过formData.append(key,value)添加的key值</span><br><span class="hljs-comment">       originalname: &#x27;_1464815392_.bmp&#x27;,//文件名</span><br><span class="hljs-comment">       encoding: &#x27;7bit&#x27;,//编码</span><br><span class="hljs-comment">       mimetype: &#x27;image/bmp&#x27;  //mimeType类型</span><br><span class="hljs-comment">     &#125; */</span><br>    <span class="hljs-comment">//cb(null,存储路径)</span><br>    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;./myfile&#x27;</span>);<span class="hljs-comment">//可能是以fileup.js在哪里运行为基准的参考的</span><br>  &#125;,<br>  <span class="hljs-comment">//重定义上传的文件</span><br>  <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) &#123;<br>    <span class="hljs-comment">//cb(null,新文件名称)</span><br>    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, file.<span class="hljs-property">fieldname</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>())<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123; <span class="hljs-attr">storage</span>: storage &#125;)<br></code></pre></td></tr></table></figure></li></ol><h4 id="multer代码"><a href="#multer代码" class="headerlink" title="multer代码"></a>multer代码</h4><p>当前目录下创建fileup.js文件和myfile文件夹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;multer&quot;</span>);<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">express</span>(); <span class="hljs-comment">//创建express实例</span><br><br><span class="hljs-comment">//这里是为了后期没有跨域问题设置的静态资源目录</span><br><span class="hljs-comment">//__dirname为NodeJS全局变量: 返回运行当前js的文件夹的绝对路径</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/&quot;</span>, express.<span class="hljs-title function_">static</span>(__dirname));<br><br><span class="hljs-comment">//根据multer(&#123;&#125;)创建一个变量(对文件的一些设置和过滤)</span><br><span class="hljs-keyword">var</span> fileOption = <span class="hljs-title function_">multer</span>(&#123;<br>    <span class="hljs-comment">//上传限制</span><br>    <span class="hljs-attr">limits</span>: &#123;<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>,<br>        <span class="hljs-attr">files</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-comment">//存储位置</span><br>    <span class="hljs-attr">storage</span>: multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>        <span class="hljs-attr">destination</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) &#123;<br>            <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;./myfile&#x27;</span>);<br>        &#125;,<br>        <span class="hljs-comment">//重定义上传的文件</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) &#123;<br>            <span class="hljs-comment">//cb(null,新文件名称)</span><br>            <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, file.<span class="hljs-property">fieldname</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()+<span class="hljs-string">&quot;-&quot;</span>+file.<span class="hljs-property">originalname</span>);<br>        &#125;<br>    &#125;),<br>    <span class="hljs-comment">//过滤</span><br>    <span class="hljs-attr">fileFilter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">req, file, cb</span>) &#123;<br>        <span class="hljs-comment">//这里就不写了~,如果添加了这个对象,一定要设置cb(null,true);不然数据过不去</span><br>        <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>,<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//依据这个变量创建单例multer.single(key)或者multer.array(key,maxcount)</span><br><span class="hljs-keyword">var</span> fileOptionFunction=fileOption.<span class="hljs-title function_">single</span>(<span class="hljs-string">&quot;fileusers&quot;</span>);<span class="hljs-comment">//传入通过formData.append(key,value)添加的key值</span><br><span class="hljs-comment">//后期ajax提交地址就为:http://localhost:3000/file 端口号可在下方自行设置</span><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/file&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//这里传入的是app.post当中的req,和res</span><br>    <span class="hljs-title function_">fileOptionFunction</span>(req,res,<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">err</span>:-<span class="hljs-number">1</span>,<span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;上传图片不能大于5M&#x27;</span>&#125;)<br>        &#125;<br>        res.<span class="hljs-title function_">send</span>(&#123;<span class="hljs-attr">error</span>:<span class="hljs-number">0</span>,<span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;文件上传成功&quot;</span>&#125;)<br>    &#125;)<br>&#125;)<br><br><span class="hljs-comment">//设置在本地端口3000</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;-------------server start-------------------&quot;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220329220433.png"></p><h4 id="multer部分需要注意的"><a href="#multer部分需要注意的" class="headerlink" title="multer部分需要注意的"></a>multer部分需要注意的</h4><ol><li>如果使用app.post(“&#x2F;file”, uploadOption.single(“fileusers”),(req, res) &#x3D;&gt; {      });好像无法处理文件过大时候的异常</li><li>如果使用上面fileup.js文件当中的方式,可以在回调当中处理文件过大时候的异常</li><li>如果设置了文件过滤,那么遇到不符合的文件扩展名,req.file的值会为undefined</li><li>如果设置了fileFilter文件过滤,一定要设置cb(null,true)(通过),或者cb(null,false);(不通过),不然留空的话数据会一直处于”pending”状态</li></ol><h3 id="具体文件目录结构和参考完整代码下载"><a href="#具体文件目录结构和参考完整代码下载" class="headerlink" title="具体文件目录结构和参考完整代码下载"></a>具体文件目录结构和参考完整代码下载</h3><p>启动后浏览器输入<a href="http://localhost:3000/up.html">http://localhost:3000/up.html</a></p><h4 id="目录文件结构"><a href="#目录文件结构" class="headerlink" title="目录文件结构"></a>目录文件结构</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220329220518.png"></p><h4 id="参考完整代码下载"><a href="#参考完整代码下载" class="headerlink" title="参考完整代码下载"></a>参考完整代码下载</h4><p><a href="https://github.com/superBiuBiuMan/demonForUpFile">express+multer+jQuery前端后端上传单个文件演示</a></p>]]></content>
    
    
    <categories>
      
      <category>javscript</category>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NodeJs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js当中的图片懒加载,懒加载的一些概念和相关知识点</title>
    <link href="/2022/03/24/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/"/>
    <url>/2022/03/24/%E5%B7%A5%E5%85%B7%E5%BA%93%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="知道什么是懒加载"><a href="#知道什么是懒加载" class="headerlink" title="知道什么是懒加载"></a>知道什么是懒加载</h3><h4 id="说通俗点就是轮到我我再出现-而不是一进入页面就出现"><a href="#说通俗点就是轮到我我再出现-而不是一进入页面就出现" class="headerlink" title="说通俗点就是轮到我我再出现,而不是一进入页面就出现"></a>说通俗点就是轮到我我再出现,而不是一进入页面就出现</h4><h4 id="为什么需要"><a href="#为什么需要" class="headerlink" title="为什么需要"></a>为什么需要</h4><ol><li>节省资源</li><li>加快网页打开</li><li>提升用户体育</li><li>巴拉巴拉</li></ol><h3 id="懒加载原理"><a href="#懒加载原理" class="headerlink" title="懒加载原理"></a>懒加载原理</h3><p class="note note-info">红色为我们实际看到的浏览器窗口,黑色的为实际网页的长度</p><h5 id="我们刚进入主页的时候"><a href="#我们刚进入主页的时候" class="headerlink" title="我们刚进入主页的时候"></a>我们刚进入主页的时候</h5><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323212758.png" style="zoom:50%;" /><p>用户拖动滚动条,看到绿色的框框,这些绿色的框框才开始加载出来</p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323213458.png" style="zoom:50%;" /><h3 id="必要知道的知识"><a href="#必要知道的知识" class="headerlink" title="必要知道的知识"></a>必要知道的知识</h3><ol><li><p>获取元素距离顶部(body)的距离:元素.offsetTop</p><ol><li>注意:如果元素的父元素(不管是祖父还是曾祖父还是亲生父亲),只要任意一个父亲开启了定位(不管是相对还是绝对),那么子元素的offsetTop属性值都是参考父元素的</li><li>如果父元素没有开启定位,那么就参考body</li><li>元素.offsetLeft同理</li></ol></li><li><p>获取浏览器垂直滚动的距离:document.documentElement.onscrollTop</p></li><li><p>offsetTop和offsetLeft 这两个属性,IE 、Opera和Firefox对它俩的解释存在差异：</p><ol><li>IE5.0+ 、Opera8.0+：　offsetTop和offsetLeft 都是相对父级元素</li><li>Firefox1.06： offsetTop和offsetLeft 都是相对于body元素</li></ol></li><li><p>为了解决父元素如果开启定位的问题,我们可以使用offsetParent加循环获取距离body的距离</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取元素距离body的top值和left值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPoint</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-comment">//记录left的值</span><br>    <span class="hljs-keyword">var</span> left = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//记录top的值</span><br>    <span class="hljs-keyword">var</span> top = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//如果需要减去边框的距离,可以解除下面这二行注释</span><br>    <span class="hljs-comment">//var borderLeftWidth;</span><br>    <span class="hljs-comment">//var borderTopWidth;</span><br>    <br>    <span class="hljs-comment">//如果obj.offsetParent获取不到父级了,就会跳出循环</span><br>    <span class="hljs-keyword">while</span> (obj) &#123;<br>        left = left + obj.<span class="hljs-property">offsetLeft</span>;<br>        top = top + obj.<span class="hljs-property">offsetTop</span>;<br>        <span class="hljs-comment">//如果需要减去边框的距离,可以解除下面这二行注释,并将前二行注释</span><br>        <span class="hljs-comment">//left = left + obj.offsetLeft - borderLeftWidth;</span><br>        <span class="hljs-comment">//top = top + obj.offsetTop - borderTopWidth;</span><br>        obj = obj.<span class="hljs-property">offsetParent</span>;<br>    &#125;<br>    <span class="hljs-comment">//返回距离body的left值和top值</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        left,<br>        top<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220324113529.png"></p></li></ol><h3 id="实现懒加载"><a href="#实现懒加载" class="headerlink" title="实现懒加载"></a>实现懒加载</h3><ol><li><p>一开始的思路(错误的):</p><ol><li>先获取元素距离可视窗口顶部的距离,然后再和可视窗口的高度进行比较,如果小于可视窗口的高度,就加载出来(错误,因为二者距离都是死的)</li></ol></li><li><p>后来的思路(正确的)</p><ol><li>还是依旧获取元素距离可是窗口顶部的距离,然后再和(可视窗口的高度+滚动的距离)进行比较,如果某一个元素距离顶部距离小于这二者之和的距离,则元素里面的资源加载出来</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="css代码"><a href="#css代码" class="headerlink" title="css代码"></a>css代码</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>    * &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">body</span>,<br>    <span class="hljs-selector-tag">html</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>    <span class="hljs-selector-tag">img</span> &#123;<br>        <span class="hljs-attribute">vertical-align</span>: bottom;<br>        <span class="hljs-attribute">display</span>: inline;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">590px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;<br>    &#125;<br>    <span class="hljs-selector-class">.content</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;<br>    &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h5 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>图片展示<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&lt;/div&gt;<br>&lt;div class=&quot;content&quot;&gt;<br>    &lt;img data-src=&quot;./img/01.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/02.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/03.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/04.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/05.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/06.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/07.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/08.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/09.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/10.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/10.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/11.jpg&quot; alt=&quot;&quot;&gt;<br>    &lt;img data-src=&quot;./img/12.jpg&quot; alt=&quot;&quot;&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h5 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-comment">//获取元素距离body的top值和left值</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPoint</span>(<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-keyword">var</span> left = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">var</span> top = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (obj) &#123;<br>                left = left + obj.<span class="hljs-property">offsetLeft</span>;<br>                top = top + obj.<span class="hljs-property">offsetTop</span>;<br>                obj = obj.<span class="hljs-property">offsetParent</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;<br>                left,<br>                top<br>            &#125;;<br>        &#125;<br>        <span class="hljs-comment">//防止图片没有加载出来获取不到图片的offsetTop值,就填加了一个window.onload事件</span><br><span class="hljs-comment">//页面初始化(用户刚刚进入页面的时候)</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> domHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>; <span class="hljs-comment">//视口的高度</span><br>            <span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>            <span class="hljs-comment">//然后循环</span><br>            <span class="hljs-comment">//每一个元素判断距离body的值是否 小于 (可视窗口的高度+垂直滚动的距离)</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v <span class="hljs-keyword">of</span> imgs) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getPoint</span>(v).<span class="hljs-property">top</span> &lt; (domHeight + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>)) &#123;<br>                    <span class="hljs-comment">//显示图片</span><br>                    <span class="hljs-comment">// v.src=v.dataset.src;也可以获取自定义属性值</span><br>                    v.<span class="hljs-property">src</span> = v.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-src&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//滚动事件</span><br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> domHeight = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>; <span class="hljs-comment">//视口的高度</span><br>            <span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>            <span class="hljs-comment">//然后循环</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> v <span class="hljs-keyword">of</span> imgs) &#123;<br>                <span class="hljs-comment">//每一个元素判断距离body的值是否 小于 (可视窗口的高度+垂直滚动的距离)</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_">getPoint</span>(v).<span class="hljs-property">top</span> &lt; (domHeight + <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>)) &#123;<br>                    <span class="hljs-comment">//显示图片</span><br>                    <span class="hljs-comment">// v.src=v.dataset.src;</span><br>                    v.<span class="hljs-property">src</span> = v.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-src&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h3><p>可以看到图片不是一次性加载出来,而是随着滚动条滚动才加载出来的</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/%E5%8A%A8%E7%94%BB.gif"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用优启通(EasyU)重装系统教程(详细)</title>
    <link href="/2022/03/23/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/"/>
    <url>/2022/03/23/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul><li>为什么要制作一个启动盘才能重装系统?</li></ul><p>通俗点来说就是你自己生病了，自己一般不能自己帮自己看病，一般都是别人看病。电脑也是如此，需要一个第三方来“治疗”。</p><ul><li>为什么使用EasyU？而不使用老毛_，巴拉巴拉。。。。。</li></ul><p>因为其他的很多启动盘制作工具有广告，会在系统安装的时候安装第三方软件。</p><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><ul><li>启动盘制作工具(任选一个下载地址)：</li></ul><p><a href="https://www.123pan.com/s/9biA-hNeHh">下载地址1:123盘(不限速)</a></p><p><a href="https://pan.baidu.com/s/1HF1BuiAY39FPDlQNM1yk3w">下载地址2:百度网盘</a></p><ul><li>系统镜像：</li></ul><p><a href="http://y-os.net/">http://y-os.net/(第三方修改镜像)</a></p><p><a href="https://next.itellyou.cn/Original/#">ITELLYOU.CN.(官方原版镜像)</a></p><p><a href="https://www.winos.me/">https://www.winos.me/(第三方修改镜像)</a></p><ul><li>激活工具：</li></ul><p><a href="https://www.aliyundrive.com/s/YcbwkhiGMFM">EasyActivate(阿里云盘下载)</a></p><h3 id="第一步-制作启动盘"><a href="#第一步-制作启动盘" class="headerlink" title="第一步:制作启动盘"></a>第一步:制作启动盘</h3><ol><li>下载后解压文件夹，选中这个<strong>EasyU</strong></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323192507.png"></p><ol start="2"><li><p>选中自己的u盘，然后点击全新制作</p><p class="note note-danger">U盘会格式化！！！！，在制作启动盘之前先备份U盘文件！！！</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323192615.png"></p><ol start="3"><li>单击确定</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323192816.png"></p><p class="note note-info">注意看是否是自己的u盘，比如说金士顿的，一般里面会有kingston，闪迪的SanDisk等等，注意看自己有没有选错了U盘</p><ol start="4"><li>等待制作完成</li></ol><p><code>（这个是EasyU Vip版本的，功能更多点，使用制作起来会比较慢）</code></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323192925.png"></p><p><em>等啊等</em></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323192950.png"></p><ol start="5"><li>制作启动盘完成</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193017.png"></p><ol start="6"><li>单击退出</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193040.png"></p><p>7.制作好后的启动盘在磁盘当中是这样子的</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193104.png"></p><h3 id="第二步-下载镜像并存入u盘"><a href="#第二步-下载镜像并存入u盘" class="headerlink" title="第二步:下载镜像并存入u盘"></a>第二步:下载镜像并存入u盘</h3><p class="note note-info">这里随便找了一个别人封装好的系统镜像</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193151.png"></p><p>好了,放进去了</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193232.png"></p><h3 id="第三步-正式开始重装"><a href="#第三步-正式开始重装" class="headerlink" title="第三步:正式开始重装"></a>第三步:正式开始重装</h3><ol><li>进入启动盘，很多笔记本是电脑开机后，一直按ESC，等到出现,就像这样子(各个品牌不同,有的F2 F12,具体可以百度搜索品牌+进入启动项快捷键)</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193402.png"></p><ol start="2"><li>我们选择UEFIXXXXX开头的,如果 UEFI:Generic STORAGE DEVICE 1404,Partition 1启动失败,那么我们选择 UEFI:Generic STORAGE DEVICE 1404,Partition 2</li><li>选择一个进入mini系统~，我选择的是[3] UEFI WINDOWS 10 PE X64</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193457.png"></p><ol start="4"><li>进入mini系统后,我们选择红色圈圈(EIX系统安装)</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193550.png"></p><ol start="5"><li>我们点击这方框这三个(<strong>按照1,2,3顺序点击</strong>)<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193608.png"></li></ol><p class="note note-danger">最后才点击一键恢复！！！</p><ol start="6"><li>关闭 <strong>恢复完成后自动运行万能驱动</strong> 选择, 之后再次点击<strong>确定</strong></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193737.png"></p><ol start="7"><li><p>等待安装完成<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193753.png"></p></li><li><p>安装完后过段时间会自动启动系统，等待系统安装完成</p></li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193817.png"></p><h3 id="第四步-激活系统"><a href="#第四步-激活系统" class="headerlink" title="第四步:激活系统"></a>第四步:激活系统</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220323193903.png"></p><h3 id="完成系统激活"><a href="#完成系统激活" class="headerlink" title="完成系统激活"></a>完成系统激活</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>系统安装完成后系统会自动联网安装驱动,比如显卡驱动</li><li>以防万一,最好自己用软件装下驱动,比如360驱动大师,驱动总裁</li><li>下面二个必装运行库(不装后面很多软件会报错导致打不开)</li></ol><p><a href="https://www.aliyundrive.com/s/G7qgfBuZCcs">微软常用运行库合集提取码1fa4 解压密码yrxitong.com</a></p><p><a href="https://www.123pan.com/s/9biA-9NeHh">DirectX.Repair</a></p>]]></content>
    
    
    <categories>
      
      <category>系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统</tag>
      
      <tag>重装系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES5当中var只有全局作用域和函数作用域,注意变量提升在var中的坑</title>
    <link href="/2022/03/22/%E5%89%8D%E7%AB%AF/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <url>/2022/03/22/%E5%89%8D%E7%AB%AF/%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ol><li>在ES5当中,变量的作用域只有全局作用域和函数作用域之分的,也就是说,你使用 var 关键字创建的变量,要么是全局都可以使用的,要么就是函数内部可以使用的</li><li>在ES5当中,var定义的变量是会变量提升的</li><li>在ES6当中,let是块级作用域,不会变量提升</li></ol><h3 id="于是乎产生了一次错误"><a href="#于是乎产生了一次错误" class="headerlink" title="于是乎产生了一次错误"></a>于是乎产生了一次错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>      <span class="hljs-keyword">var</span> data=<span class="hljs-string">&#x27;动感超人&#x27;</span><br>      <span class="hljs-keyword">if</span>(data)&#123;<br>          <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">true</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<span class="hljs-comment">//输出结果为true</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="这一段代码一看就是true"><a href="#这一段代码一看就是true" class="headerlink" title="这一段代码一看就是true"></a>这一段代码一看就是true</h4><ol><li><p>在js当中,除了 <strong>null</strong>  <strong>undefined</strong>   <strong>“”</strong> <strong>NaN</strong> <strong>false</strong> 这四个转化为布尔值为false,其他均为true</p></li><li><p>所以data&#x3D;”动感超人”转化为布尔值为true~所以执行var flag&#x3D;true;</p></li><li><p>由于var只有全局作用域和函数作用域,所以var flag为<strong>全局变量</strong></p><h4 id="代码改改"><a href="#代码改改" class="headerlink" title="代码改改"></a>代码改改</h4></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>     <span class="hljs-keyword">var</span> data=<span class="hljs-string">&#x27;&#x27;</span><br>     <span class="hljs-keyword">if</span>(data)&#123;<br>         <span class="hljs-keyword">var</span> flag=<span class="hljs-literal">true</span>;<br>     &#125;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="这一段代码呢"><a href="#这一段代码呢" class="headerlink" title="这一段代码呢?"></a>这一段代码呢?</h4><p class="note warn-note">结果为undefined<p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>1.js引擎执行js代码前先看看有没有可以变量提升,函数提升),上面代码转换下实际上是这样子在执行的过程中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span> data;<span class="hljs-comment">//变量提升</span><br> <span class="hljs-keyword">var</span> flag;<span class="hljs-comment">//变量提升</span><br>    data=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">//赋值</span><br>    <span class="hljs-keyword">if</span>(data)&#123;<span class="hljs-comment">//转布尔值为false</span><br>         flag=<span class="hljs-literal">true</span>;<span class="hljs-comment">//条件不成立,不执行赋值</span><br>    &#125;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<span class="hljs-comment">//没有赋值,又为全局变量,不报错,但是输出为undefined</span><br> &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="施主-要小心-小心-再小心-阿弥陀佛"><a href="#施主-要小心-小心-再小心-阿弥陀佛" class="headerlink" title="施主,要小心,小心,再小心~阿弥陀佛"></a>施主,要小心,小心,再小心~阿弥陀佛</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220316215624.png"></p>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nth-of-type选择器使用的一个坑</title>
    <link href="/2022/03/15/%E5%89%8D%E7%AB%AF/nth-of-type%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/"/>
    <url>/2022/03/15/%E5%89%8D%E7%AB%AF/nth-of-type%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><p>一段HTML代码,我需要让<strong>第一个类名为content</strong>的div背景设置为红色的</p><ol><li>js代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>style样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="一开始想到的"><a href="#一开始想到的" class="headerlink" title="一开始想到的"></a>一开始想到的</h3><ol><li><strong>要选第一个类名为content</strong>,当然是nth-of-type了,因为我只想要让拥有content类的div容器被选择</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">//错误的选择器代码<br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.content</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>结果如下</li></ol><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220315162328.png"></p><h3 id="为什么没有用"><a href="#为什么没有用" class="headerlink" title="为什么没有用?"></a>为什么没有用?</h3><ol><li>:nth-of-type当中没有指定标签,那么就会查找第一个匹配的,同级别下所对应的所有元素标签(后面有具体解释和示例)</li><li>:nth-of-type针对的是标签选择器,也就说你用类和nth-of-type结合使用是不恰当的,如果要使用,记得先用类名筛选,再用标签使用nth-of-type选择器</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//也就是这种,先用类名筛选,再用标签使用nth-of-type选择器</span><br>.<span class="hljs-property">one</span> <span class="hljs-attr">p</span>:nth-<span class="hljs-keyword">of</span>-<span class="hljs-title function_">type</span>(<span class="hljs-params"><span class="hljs-number">2</span></span>)&#123;<br>    xxxxxx<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分析设置代码的-浏览器做了什么"><a href="#分析设置代码的-浏览器做了什么" class="headerlink" title="分析设置代码的,浏览器做了什么"></a>分析设置代码的,浏览器做了什么</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   <span class="hljs-comment">//也就是这段js代码</span><br>&lt;style&gt;<br>       .<span class="hljs-property">content</span>:nth-<span class="hljs-keyword">of</span>-<span class="hljs-title function_">type</span>(<span class="hljs-params"><span class="hljs-number">1</span></span>)&#123;<br>           background-<span class="hljs-attr">color</span>: red;<br>       &#125;<br>   &lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--js代码对应的html代码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="浏览器做了什么示意图"><a href="#浏览器做了什么示意图" class="headerlink" title="浏览器做了什么示意图"></a>浏览器做了什么示意图</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/2022-3-15-183443.png"></p><h3 id="再来举个例子"><a href="#再来举个例子" class="headerlink" title="再来举个例子"></a>再来举个例子</h3><ol><li><p>首先,由于我们没有书写具体要在哪一个标签,那么浏览器就会全局查找拥有这个类的标签,并且把这个类下同级别的所有标签加入到待查列表<br><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220315172203.png"></p></li><li><p>.content:nth-of-type(2) 例子<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220315172549.png"></p></li><li><p>.content:nth-of-type(1)例子<img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220315172728.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javscript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年用JAVA制作的一个小项目图标快捷启动管理的</title>
    <link href="/2022/03/08/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/2020%E5%B9%B4%E7%94%A8JAVA%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%9B%BE%E6%A0%87%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E7%9A%84/"/>
    <url>/2022/03/08/%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80/2020%E5%B9%B4%E7%94%A8JAVA%E5%88%B6%E4%BD%9C%E7%9A%84%E4%B8%80%E4%B8%AA%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%9B%BE%E6%A0%87%E5%BF%AB%E6%8D%B7%E5%90%AF%E5%8A%A8%E7%AE%A1%E7%90%86%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2020</span><span class="hljs-string">年的了,本来想用这个参加学校的作品大赛的获取经验的,想参加试试看,因为疫情没弄成,取消了</span><br></code></pre></td></tr></table></figure><h3 id="用JAVA写的-支持库都放在里面了"><a href="#用JAVA写的-支持库都放在里面了" class="headerlink" title="用JAVA写的,支持库都放在里面了"></a>用JAVA写的,支持库都放在里面了</h3><ul><li>感兴趣的可以下载看看</li><li><a href="https://github.com/superBiuBiuMan/JAVAlikeVstart">github地址</a></li></ul><h3 id="功能展示"><a href="#功能展示" class="headerlink" title="功能展示"></a>功能展示</h3><h4 id="默认主界面"><a href="#默认主界面" class="headerlink" title="默认主界面"></a>默认主界面</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308181426.png"></p><h4 id="托盘菜单"><a href="#托盘菜单" class="headerlink" title="托盘菜单"></a>托盘菜单</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308181447.png"></p><h4 id="右键空白菜单"><a href="#右键空白菜单" class="headerlink" title="右键空白菜单"></a>右键空白菜单</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308182452.png"></p><h4 id="添加网站快捷方式"><a href="#添加网站快捷方式" class="headerlink" title="添加网站快捷方式"></a>添加网站快捷方式</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308181518.png"></p><h4 id="添加其他图标"><a href="#添加其他图标" class="headerlink" title="添加其他图标"></a>添加其他图标</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308182504.png"></p><h4 id="分类栏重命名"><a href="#分类栏重命名" class="headerlink" title="分类栏重命名"></a>分类栏重命名</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308181548.png"></p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308181601.png"></p><h4 id="右键图标菜单栏"><a href="#右键图标菜单栏" class="headerlink" title="右键图标菜单栏"></a>右键图标菜单栏</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308182522.png"></p><h4 id="顶部导航栏"><a href="#顶部导航栏" class="headerlink" title="顶部导航栏"></a>顶部导航栏</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308182534.png"></p><h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220308182543.png"></p><h3 id="还有其他的就不展示图片了"><a href="#还有其他的就不展示图片了" class="headerlink" title="还有其他的就不展示图片了~"></a>还有其他的就不展示图片了~</h3>]]></content>
    
    
    <categories>
      
      <category>JAVA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迭代器自定义数据输出当中this指向</title>
    <link href="/2022/02/28/%E5%89%8D%E7%AB%AF/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%E5%BD%93%E4%B8%ADthis%E6%8C%87%E5%90%91/"/>
    <url>/2022/02/28/%E5%89%8D%E7%AB%AF/%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA%E5%BD%93%E4%B8%ADthis%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li>在箭头函数当中,this的指向为函数声明时所在作用域下this的值</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="next为普通函数"><a href="#next为普通函数" class="headerlink" title="next为普通函数"></a>next为普通函数</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> resultGet = &#123;<br>            <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            <span class="hljs-string">&quot;day&quot;</span>: <span class="hljs-string">&quot;02/ 27&quot;</span>,<br>            <span class="hljs-string">&quot;result&quot;</span>: [&#123;<br>                    <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;272年02月27日&quot;</span>,<br>                    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;罗马帝国皇帝君士坦丁大帝出生&quot;</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;684年02月27日&quot;</span>,<br>                    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;唐中宗李显被母亲武则天废为庐陵王，驱离京师&quot;</span><br>                &#125;,<br>            ]<br>        &#125;;<br>        resultGet[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外面的&#x27;</span>, <span class="hljs-variable language_">this</span>);<span class="hljs-comment">//普通函数--指向的是要处理的数据,在这里也就是resultGet</span><br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-comment">//这里改为箭头函数,其他的不变</span><br>                <span class="hljs-string">&#x27;next&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>                        i++;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;里面的&#x27;</span>, <span class="hljs-variable language_">this</span>);<span class="hljs-comment">//普通--指向的指向的是刚刚return创建的指针对象</span><br>                        <span class="hljs-keyword">return</span> &#123;<br>                            <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;测试&#x27;</span>,<br>                            <span class="hljs-string">&#x27;done&#x27;</span>: <span class="hljs-literal">false</span><br>                        &#125;;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> &#123;<br>                            <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;测试&#x27;</span>,<br>                            <span class="hljs-string">&#x27;done&#x27;</span>: <span class="hljs-literal">true</span><br>                        &#125;;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//调用迭代器,测试里面的console.log()</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> resultGet) &#123;<br><br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220228084551.png" alt="next为普通函数运行结果截图"></p><h3 id="next为箭头函数"><a href="#next为箭头函数" class="headerlink" title="next为箭头函数"></a>next为箭头函数</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> resultGet = &#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;day&quot;</span>: <span class="hljs-string">&quot;02/ 27&quot;</span>,<br>    <span class="hljs-string">&quot;result&quot;</span>: [&#123;<br>            <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;272年02月27日&quot;</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;罗马帝国皇帝君士坦丁大帝出生&quot;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;684年02月27日&quot;</span>,<br>            <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;唐中宗李显被母亲武则天废为庐陵王，驱离京师&quot;</span><br>        &#125;,<br>    ]<br>&#125;;<br>resultGet[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;外面的&#x27;</span>, <span class="hljs-variable language_">this</span>);<span class="hljs-comment">//普通函数--指向的是要处理的数据,在这里也就是resultGet</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-comment">//这里改为箭头函数,其他的不变</span><br>        <span class="hljs-string">&#x27;next&#x27;</span>: <span class="hljs-function">()=&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">1</span>) &#123;<br>                i++;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;里面的&#x27;</span>, <span class="hljs-variable language_">this</span>);<span class="hljs-comment">//箭头函数--指向的依旧是要处理的数据,在这里也就是resultGet</span><br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;测试&#x27;</span>,<br>                    <span class="hljs-string">&#x27;done&#x27;</span>: <span class="hljs-literal">false</span><br>                &#125;;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-string">&#x27;value&#x27;</span>: <span class="hljs-string">&#x27;测试&#x27;</span>,<br>                    <span class="hljs-string">&#x27;done&#x27;</span>: <span class="hljs-literal">true</span><br>                &#125;;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//调用迭代器,测试里面的console.log()</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> resultGet) &#123;<br><br></code></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220228085213.png" alt="next为箭头函数运行结果截图"></p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么?"></a>为什么?</h2><p class='note note-warning'>个人理解,可能有误</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220228091737.png"></p><h3 id="证明个人理解"><a href="#证明个人理解" class="headerlink" title="证明个人理解"></a>证明个人理解</h3><h4 id="实例1代码及运行结果"><a href="#实例1代码及运行结果" class="headerlink" title="实例1代码及运行结果"></a>实例1代码及运行结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = &#123;<br>    <span class="hljs-attr">a</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> obj = &#123;<br>            <span class="hljs-attr">i</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-attr">b</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span>, <span class="hljs-variable language_">this</span>);<br>            &#125;,<br>        &#125;<br>        obj.<span class="hljs-title function_">b</span>();<br>    &#125;<br>&#125;<br>p.<span class="hljs-title function_">a</span>(); <span class="hljs-comment">//undefined &#123;a: ƒ&#125;</span><br></code></pre></td></tr></table></figure><h4 id="实例2代码及运行结果"><a href="#实例2代码及运行结果" class="headerlink" title="实例2代码及运行结果"></a>实例2代码及运行结果</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objSelf = &#123;<br>    <span class="hljs-attr">i</span>: <span class="hljs-number">10</span>,<br><br>    <span class="hljs-attr">b</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span>, <span class="hljs-variable language_">this</span>)<br>    &#125;,<br><br>    <span class="hljs-attr">c</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">i</span>, <span class="hljs-variable language_">this</span>)<br>    &#125;<br><br>&#125;<br><br>objSelf.<span class="hljs-title function_">b</span>(); <span class="hljs-comment">// undefined window&#123;...&#125;</span><br><br>objSelf.<span class="hljs-title function_">c</span>(); <span class="hljs-comment">// 10 &#123;i: 10, b: ƒ, c: ƒ&#125;  </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
      <category>javscript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>迭代器</tag>
      
      <tag>ES5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery中API,post上传文件到阿里云OSS记录</title>
    <link href="/2022/02/28/%E5%89%8D%E7%AB%AF/jQuery%E4%B8%ADAPI,post%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/28/%E5%89%8D%E7%AB%AF/jQuery%E4%B8%ADAPI,post%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91OSS%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前景提示"><a href="#前景提示" class="headerlink" title="前景提示"></a>前景提示</h2><ol><li>在利用FormData上传文件的时候,新建实例化对象如果有参数,需要的是DOM元素,而不是其他的!</li><li>FormData的实例化对象调用get()方法获取属性的时候,返回值(FormDataEntryValue)包括下面二种<ol><li><h3 id="string数据"><a href="#string数据" class="headerlink" title="string数据"></a>string数据</h3> <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220225163854.png"></li><li><h3 id="File对象"><a href="#File对象" class="headerlink" title="File对象"></a>File对象</h3><ol><li>File对象当中的属性<ol><li>lastModified:格林威治时间</li><li>lastModifiedDate:可识别时间</li><li>name:文件名</li><li>size :文件大小(字节)</li><li>type:类型</li><li>webkitRelativePath(非标准: 该特性是非标准的，请尽量不要在生产环境中使用它！)<br> <img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220225164419.png"></li></ol></li></ol></li><li><h3 id="FormDataEntryValue数组"><a href="#FormDataEntryValue数组" class="headerlink" title="FormDataEntryValue数组"></a>FormDataEntryValue数组</h3><ol><li>FormData的实例化对象调用getAll(name)方法返回</li></ol></li><li><h3 id="API测试使用的网站"><a href="#API测试使用的网站" class="headerlink" title="API测试使用的网站"></a>API测试使用的网站</h3><ol><li>果创云</li><li>阿里云OSS存储</li></ol></li></ol></li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p class="note note-info">ajax请求使用jQuery插件</p><h3 id="html代码块"><a href="#html代码块" class="headerlink" title="html代码块"></a>html代码块</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;form&#x27;</span>&gt;</span><br>    上传文件:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ss&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="javascript代码块"><a href="#javascript代码块" class="headerlink" title="javascript代码块"></a>javascript代码块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> url =<br>    <span class="hljs-string">&quot;http://hn216.api.yesapi.cn/?s=App.OSS_Aliyun.UploadFile&amp;app_key=填写你自己的&quot;</span>;<br>$(<span class="hljs-string">&quot;#ss&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;form&#x27;</span>));<br>    <span class="hljs-keyword">var</span> nameFile = formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;file&#x27;</span>).<span class="hljs-property">name</span>;<br>    <span class="hljs-comment">//含有文件</span><br>    <span class="hljs-keyword">if</span> (nameFile.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//文件名</span><br>        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;object&#x27;</span>, nameFile);<br>        <span class="hljs-comment">//做base64处理</span><br>        <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>        <span class="hljs-comment">//从formData当中调用get方法,传入字符串(也就是name属性的值),这里用文件框输入用的name属性为file</span><br>        reader.<span class="hljs-title function_">readAsDataURL</span>(formData.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;file&#x27;</span>));<br>        <span class="hljs-comment">//文件加载完成</span><br>        reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-comment">//添加文件数据到formData当中</span><br>            formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;content&#x27;</span>, reader.<span class="hljs-property">result</span>);<br>            <span class="hljs-comment">//移除多余的,这一步可有可无</span><br>            formData.<span class="hljs-title function_">delete</span>(<span class="hljs-string">&#x27;file&#x27;</span>); <br>            <span class="hljs-comment">//ajax发送数据</span><br>            $.<span class="hljs-title function_">ajax</span>(&#123;<br>                <span class="hljs-string">&#x27;url&#x27;</span>: url,<br>                <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>                <span class="hljs-string">&#x27;data&#x27;</span>: formData,<br>                <span class="hljs-string">&#x27;processData&#x27;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-string">&#x27;contentType&#x27;</span>: <span class="hljs-literal">false</span>,<br>                <span class="hljs-string">&#x27;success&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>                &#125;<br>            &#125;);<br><br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p class="note note-info">成功上传</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220226135656.png"></p><h2 id="测试过程中遇到的问题"><a href="#测试过程中遇到的问题" class="headerlink" title="测试过程中遇到的问题"></a>测试过程中遇到的问题</h2><h3 id="总说缺少content参数但data里面有了"><a href="#总说缺少content参数但data里面有了" class="headerlink" title="总说缺少content参数但data里面有了"></a>总说缺少content参数但data里面有了</h3><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220226105015.png"></p><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>将processData设置为false的时候,表示不将data参数中的数据进行序列化,传输的是blob对象,DOM树,文件等数据的时候就是不需要将传输的数据序列化</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>将processData设置为true即可,即默认情况下会将发送的数据序列化(也就是data当中的数据,以适应默认的内容类型application&#x2F;x-www-form-urlencoded</p><ol><li><h5 id="解决之后传送的数据"><a href="#解决之后传送的数据" class="headerlink" title="解决之后传送的数据"></a>解决之后传送的数据</h5><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220226110026.png"></li><li><h5 id="解决之前传送的数据"><a href="#解决之前传送的数据" class="headerlink" title="解决之前传送的数据"></a>解决之前传送的数据</h5><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220226110157.png"></li></ol><h4 id="区分下"><a href="#区分下" class="headerlink" title="区分下"></a>区分下</h4><h4 id="processData参数在jQuery当中"><a href="#processData参数在jQuery当中" class="headerlink" title="processData参数在jQuery当中"></a>processData参数在jQuery当中</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//测试代码</span><br>$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;some.php&quot;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>        <span class="hljs-attr">location</span>: <span class="hljs-string">&quot;Boston&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">msg</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Data Saved: &quot;</span> + msg);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol><li><p>当processData&#x3D;true;(默认值)</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220331212507.png"></p></li><li><p>当processData&#x3D;false;</p><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220331212522.png"></p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><h4 id="processData-本地要怎么样处理当前的数据"><a href="#processData-本地要怎么样处理当前的数据" class="headerlink" title="processData:本地要怎么样处理当前的数据"></a>processData:本地要怎么样处理当前的数据</h4><ol><li>processData:true;<b>默认值将发送的数据序列化以适应默认的内容类型application&#x2F;x-www-form-urlencoded</b></li><li>processData:false;</li></ol></li><li><h4 id="contentType-告诉服务器发送数据的格式"><a href="#contentType-告诉服务器发送数据的格式" class="headerlink" title="contentType:告诉服务器发送数据的格式"></a>contentType:告诉服务器发送数据的格式</h4><ol><li>contentType:true;<b>默认值</b>,值为application&#x2F;x-www-form-urlencoded</li><li>contentType:false;值为multipart&#x2F;form-data</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>javscript</category>
      
      <category>jQuery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阿里云</tag>
      
      <tag>API</tag>
      
      <tag>OSS存储</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次配置picgo错误的记录和解决办法</title>
    <link href="/2022/02/24/%E5%89%8D%E7%AB%AF/picgo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/24/%E5%89%8D%E7%AB%AF/picgo%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-错误提示StatusCodeError-403-lt-xml-version-x3D-xxxxxxxx-gt"><a href="#1-错误提示StatusCodeError-403-lt-xml-version-x3D-xxxxxxxx-gt" class="headerlink" title="1.错误提示StatusCodeError:403 -&lt;?xml version&#x3D;xxxxxxxx&gt;"></a>1.错误提示StatusCodeError:403 -&lt;?xml version&#x3D;xxxxxxxx&gt;</h2><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220224081412.png"></p><h2 id="2-原因"><a href="#2-原因" class="headerlink" title="2.原因"></a>2.原因</h2><p class="note note-warning">没有设置管理对象存储服务器(OSS权限)</p><h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h2><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220224081744.png"></p><h2 id="4-成功解决再次上传测试可以上传"><a href="#4-成功解决再次上传测试可以上传" class="headerlink" title="4.成功解决再次上传测试可以上传"></a>4.成功解决再次上传测试可以上传</h2><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220224081817.png"></p><h2 id="2-错误提示RequestError-Error-tunneling-socket-could-not-be-established-cause-x3D-getaddrinfo-ENOTFOUND-7890"><a href="#2-错误提示RequestError-Error-tunneling-socket-could-not-be-established-cause-x3D-getaddrinfo-ENOTFOUND-7890" class="headerlink" title="2.错误提示RequestError: Error: tunneling socket could not be established, cause&#x3D;getaddrinfo ENOTFOUND 7890"></a>2.错误提示RequestError: Error: tunneling socket could not be established, cause&#x3D;getaddrinfo ENOTFOUND 7890</h2><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>可能是安装软件的时候设置了代理,删除电脑的环境变量 <strong>HTTPS_PROXY</strong>之类的<ul><li>在环境变量里面把 <code>http_proxy</code> 和 <code>https_proxy</code> 两项删除即可</li></ul></li></ul><p><img src="https://dreamos.oss-cn-beijing.aliyuncs.com/gitblog/20220506193920.png"></p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OSS存储</tag>
      
      <tag>picgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
